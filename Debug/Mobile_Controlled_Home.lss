
Mobile_Controlled_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000533e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000069a  00800060  0000533e  000053d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  008006fa  008006fa  00005a6c  2**0
                  ALLOC
  3 .stab         0000801c  00000000  00000000  00005a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a4e5  00000000  00000000  0000da88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00017f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000180ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0001821d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00019e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0001ad51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0001bb00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0001bc60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0001beed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001c6bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	16 e0       	ldi	r17, 0x06	; 6
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b6 e0       	ldi	r27, 0x06	; 6
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 36       	cpi	r26, 0x66	; 102
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 93 28 	call	0x5126	; 0x5126 <main>
      8a:	0c 94 9d 29 	jmp	0x533a	; 0x533a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4d 29 	jmp	0x529a	; 0x529a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e2       	ldi	r26, 0x23	; 35
     128:	b6 e0       	ldi	r27, 0x06	; 6
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 69 29 	jmp	0x52d2	; 0x52d2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 59 29 	jmp	0x52b2	; 0x52b2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 75 29 	jmp	0x52ea	; 0x52ea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 59 29 	jmp	0x52b2	; 0x52b2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 75 29 	jmp	0x52ea	; 0x52ea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4d 29 	jmp	0x529a	; 0x529a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e2       	ldi	r24, 0x23	; 35
     496:	96 e0       	ldi	r25, 0x06	; 6
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 69 29 	jmp	0x52d2	; 0x52d2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 59 29 	jmp	0x52b2	; 0x52b2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 75 29 	jmp	0x52ea	; 0x52ea <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 59 29 	jmp	0x52b2	; 0x52b2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 75 29 	jmp	0x52ea	; 0x52ea <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 59 29 	jmp	0x52b2	; 0x52b2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 75 29 	jmp	0x52ea	; 0x52ea <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5d 29 	jmp	0x52ba	; 0x52ba <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 79 29 	jmp	0x52f2	; 0x52f2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_vInit>:
/*************** Version : 1.0            **********************/
/***************************************************************/

#include "UART_interface.h"

void UART_vInit(const UART_tcfgInitialize *LOCAL_tcfgUART){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_vInit+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01


	if(LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_5_BITS){
     b54:	e9 81       	ldd	r30, Y+1	; 0x01
     b56:	fa 81       	ldd	r31, Y+2	; 0x02
     b58:	80 81       	ld	r24, Z
     b5a:	88 23       	and	r24, r24
     b5c:	b1 f4       	brne	.+44     	; 0xb8a <UART_vInit+0x44>
		CLR_BIT(UCSRC_REG, UCSZ0_BIT);
     b5e:	a0 e4       	ldi	r26, 0x40	; 64
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e0 e4       	ldi	r30, 0x40	; 64
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	8d 7f       	andi	r24, 0xFD	; 253
     b6a:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSZ1_BIT);
     b6c:	a0 e4       	ldi	r26, 0x40	; 64
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	e0 e4       	ldi	r30, 0x40	; 64
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	8b 7f       	andi	r24, 0xFB	; 251
     b78:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
     b7a:	aa e2       	ldi	r26, 0x2A	; 42
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	ea e2       	ldi	r30, 0x2A	; 42
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8b 7f       	andi	r24, 0xFB	; 251
     b86:	8c 93       	st	X, r24
     b88:	6b c0       	rjmp	.+214    	; 0xc60 <UART_vInit+0x11a>
	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_6_BITS)){
     b8a:	e9 81       	ldd	r30, Y+1	; 0x01
     b8c:	fa 81       	ldd	r31, Y+2	; 0x02
     b8e:	80 81       	ld	r24, Z
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	b1 f4       	brne	.+44     	; 0xbc0 <UART_vInit+0x7a>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSZ1_BIT);
     ba2:	a0 e4       	ldi	r26, 0x40	; 64
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8b 7f       	andi	r24, 0xFB	; 251
     bae:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
     bb0:	aa e2       	ldi	r26, 0x2A	; 42
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e2       	ldi	r30, 0x2A	; 42
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	8c 93       	st	X, r24
     bbe:	50 c0       	rjmp	.+160    	; 0xc60 <UART_vInit+0x11a>

	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_7_BITS)){
     bc0:	e9 81       	ldd	r30, Y+1	; 0x01
     bc2:	fa 81       	ldd	r31, Y+2	; 0x02
     bc4:	80 81       	ld	r24, Z
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	b1 f4       	brne	.+44     	; 0xbf6 <UART_vInit+0xb0>
		CLR_BIT(UCSRC_REG, UCSZ0_BIT);
     bca:	a0 e4       	ldi	r26, 0x40	; 64
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e0 e4       	ldi	r30, 0x40	; 64
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8d 7f       	andi	r24, 0xFD	; 253
     bd6:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
     bd8:	a0 e4       	ldi	r26, 0x40	; 64
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e0 e4       	ldi	r30, 0x40	; 64
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	84 60       	ori	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
     be6:	aa e2       	ldi	r26, 0x2A	; 42
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	ea e2       	ldi	r30, 0x2A	; 42
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8b 7f       	andi	r24, 0xFB	; 251
     bf2:	8c 93       	st	X, r24
     bf4:	35 c0       	rjmp	.+106    	; 0xc60 <UART_vInit+0x11a>

	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_8_BITS)){
     bf6:	e9 81       	ldd	r30, Y+1	; 0x01
     bf8:	fa 81       	ldd	r31, Y+2	; 0x02
     bfa:	80 81       	ld	r24, Z
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	b1 f4       	brne	.+44     	; 0xc2c <UART_vInit+0xe6>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e0 e4       	ldi	r30, 0x40	; 64
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	82 60       	ori	r24, 0x02	; 2
     c0c:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
     c0e:	a0 e4       	ldi	r26, 0x40	; 64
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e0 e4       	ldi	r30, 0x40	; 64
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	84 60       	ori	r24, 0x04	; 4
     c1a:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
     c1c:	aa e2       	ldi	r26, 0x2A	; 42
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	ea e2       	ldi	r30, 0x2A	; 42
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	8b 7f       	andi	r24, 0xFB	; 251
     c28:	8c 93       	st	X, r24
     c2a:	1a c0       	rjmp	.+52     	; 0xc60 <UART_vInit+0x11a>
	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_9_BITS)){
     c2c:	e9 81       	ldd	r30, Y+1	; 0x01
     c2e:	fa 81       	ldd	r31, Y+2	; 0x02
     c30:	80 81       	ld	r24, Z
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	a9 f4       	brne	.+42     	; 0xc60 <UART_vInit+0x11a>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
     c36:	a0 e4       	ldi	r26, 0x40	; 64
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e0 e4       	ldi	r30, 0x40	; 64
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	82 60       	ori	r24, 0x02	; 2
     c42:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
     c44:	a0 e4       	ldi	r26, 0x40	; 64
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e0 e4       	ldi	r30, 0x40	; 64
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	84 60       	ori	r24, 0x04	; 4
     c50:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, UCSZ2_BIT);
     c52:	aa e2       	ldi	r26, 0x2A	; 42
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ea e2       	ldi	r30, 0x2A	; 42
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	84 60       	ori	r24, 0x04	; 4
     c5e:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_DISABLED){
     c60:	e9 81       	ldd	r30, Y+1	; 0x01
     c62:	fa 81       	ldd	r31, Y+2	; 0x02
     c64:	81 81       	ldd	r24, Z+1	; 0x01
     c66:	88 23       	and	r24, r24
     c68:	79 f4       	brne	.+30     	; 0xc88 <UART_vInit+0x142>
		CLR_BIT(UCSRC_REG, UPM0_BIT);
     c6a:	a0 e4       	ldi	r26, 0x40	; 64
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e0 e4       	ldi	r30, 0x40	; 64
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8f 7e       	andi	r24, 0xEF	; 239
     c76:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UPM1_BIT);
     c78:	a0 e4       	ldi	r26, 0x40	; 64
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e0 e4       	ldi	r30, 0x40	; 64
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8f 7d       	andi	r24, 0xDF	; 223
     c84:	8c 93       	st	X, r24
     c86:	27 c0       	rjmp	.+78     	; 0xcd6 <UART_vInit+0x190>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_EVEN){
     c88:	e9 81       	ldd	r30, Y+1	; 0x01
     c8a:	fa 81       	ldd	r31, Y+2	; 0x02
     c8c:	81 81       	ldd	r24, Z+1	; 0x01
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	79 f4       	brne	.+30     	; 0xcb0 <UART_vInit+0x16a>
		CLR_BIT(UCSRC_REG, UPM0_BIT);
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e0 e4       	ldi	r30, 0x40	; 64
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8f 7e       	andi	r24, 0xEF	; 239
     c9e:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UPM1_BIT);
     ca0:	a0 e4       	ldi	r26, 0x40	; 64
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e0 e4       	ldi	r30, 0x40	; 64
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	80 62       	ori	r24, 0x20	; 32
     cac:	8c 93       	st	X, r24
     cae:	13 c0       	rjmp	.+38     	; 0xcd6 <UART_vInit+0x190>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_ODD){
     cb0:	e9 81       	ldd	r30, Y+1	; 0x01
     cb2:	fa 81       	ldd	r31, Y+2	; 0x02
     cb4:	81 81       	ldd	r24, Z+1	; 0x01
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	71 f4       	brne	.+28     	; 0xcd6 <UART_vInit+0x190>
		SET_BIT(UCSRC_REG, UPM0_BIT);
     cba:	a0 e4       	ldi	r26, 0x40	; 64
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e0 e4       	ldi	r30, 0x40	; 64
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	80 61       	ori	r24, 0x10	; 16
     cc6:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UPM1_BIT);
     cc8:	a0 e4       	ldi	r26, 0x40	; 64
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e0 e4       	ldi	r30, 0x40	; 64
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 62       	ori	r24, 0x20	; 32
     cd4:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgStopBits == STOP_BITS_1){
     cd6:	e9 81       	ldd	r30, Y+1	; 0x01
     cd8:	fa 81       	ldd	r31, Y+2	; 0x02
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	88 23       	and	r24, r24
     cde:	41 f4       	brne	.+16     	; 0xcf0 <UART_vInit+0x1aa>
		CLR_BIT(UCSRC_REG, USBS_BIT);
     ce0:	a0 e4       	ldi	r26, 0x40	; 64
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e0 e4       	ldi	r30, 0x40	; 64
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	87 7f       	andi	r24, 0xF7	; 247
     cec:	8c 93       	st	X, r24
     cee:	0c c0       	rjmp	.+24     	; 0xd08 <UART_vInit+0x1c2>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgStopBits == STOP_BITS_2){
     cf0:	e9 81       	ldd	r30, Y+1	; 0x01
     cf2:	fa 81       	ldd	r31, Y+2	; 0x02
     cf4:	82 81       	ldd	r24, Z+2	; 0x02
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	39 f4       	brne	.+14     	; 0xd08 <UART_vInit+0x1c2>
		SET_BIT(UCSRC_REG, USBS_BIT);
     cfa:	a0 e4       	ldi	r26, 0x40	; 64
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e0 e4       	ldi	r30, 0x40	; 64
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	88 60       	ori	r24, 0x08	; 8
     d06:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartInterrupt == UART_INTERRUPT_DISABLED){
     d08:	e9 81       	ldd	r30, Y+1	; 0x01
     d0a:	fa 81       	ldd	r31, Y+2	; 0x02
     d0c:	83 81       	ldd	r24, Z+3	; 0x03
     d0e:	88 23       	and	r24, r24
     d10:	b1 f4       	brne	.+44     	; 0xd3e <UART_vInit+0x1f8>
		CLR_BIT(UCSRB_REG, RXCIE_BIT);
     d12:	aa e2       	ldi	r26, 0x2A	; 42
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ea e2       	ldi	r30, 0x2A	; 42
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8f 77       	andi	r24, 0x7F	; 127
     d1e:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UDRIE_BIT);
     d20:	aa e2       	ldi	r26, 0x2A	; 42
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ea e2       	ldi	r30, 0x2A	; 42
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8f 7d       	andi	r24, 0xDF	; 223
     d2c:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, TXCIE_BIT);
     d2e:	aa e2       	ldi	r26, 0x2A	; 42
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ea e2       	ldi	r30, 0x2A	; 42
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8f 7b       	andi	r24, 0xBF	; 191
     d3a:	8c 93       	st	X, r24
     d3c:	1a c0       	rjmp	.+52     	; 0xd72 <UART_vInit+0x22c>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartInterrupt == UART_INTERRUPT_ENABLED){
     d3e:	e9 81       	ldd	r30, Y+1	; 0x01
     d40:	fa 81       	ldd	r31, Y+2	; 0x02
     d42:	83 81       	ldd	r24, Z+3	; 0x03
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	a9 f4       	brne	.+42     	; 0xd72 <UART_vInit+0x22c>
		SET_BIT(UCSRB_REG, RXCIE_BIT);
     d48:	aa e2       	ldi	r26, 0x2A	; 42
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	ea e2       	ldi	r30, 0x2A	; 42
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 68       	ori	r24, 0x80	; 128
     d54:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, UDRIE_BIT);
     d56:	aa e2       	ldi	r26, 0x2A	; 42
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ea e2       	ldi	r30, 0x2A	; 42
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	80 62       	ori	r24, 0x20	; 32
     d62:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, TXCIE_BIT);
     d64:	aa e2       	ldi	r26, 0x2A	; 42
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ea e2       	ldi	r30, 0x2A	; 42
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 64       	ori	r24, 0x40	; 64
     d70:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartClkMode == UART_ASYNCHRONOUS){
     d72:	e9 81       	ldd	r30, Y+1	; 0x01
     d74:	fa 81       	ldd	r31, Y+2	; 0x02
     d76:	87 81       	ldd	r24, Z+7	; 0x07
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	41 f4       	brne	.+16     	; 0xd8c <UART_vInit+0x246>
		CLR_BIT(UCSRC_REG, UMSEL_BIT);
     d7c:	a0 e4       	ldi	r26, 0x40	; 64
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e0 e4       	ldi	r30, 0x40	; 64
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8f 7b       	andi	r24, 0xBF	; 191
     d88:	8c 93       	st	X, r24
     d8a:	0c c0       	rjmp	.+24     	; 0xda4 <UART_vInit+0x25e>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartClkMode == UART_SYNCHRONOUS){
     d8c:	e9 81       	ldd	r30, Y+1	; 0x01
     d8e:	fa 81       	ldd	r31, Y+2	; 0x02
     d90:	87 81       	ldd	r24, Z+7	; 0x07
     d92:	88 23       	and	r24, r24
     d94:	39 f4       	brne	.+14     	; 0xda4 <UART_vInit+0x25e>
		SET_BIT(UCSRC_REG, UMSEL_BIT);
     d96:	a0 e4       	ldi	r26, 0x40	; 64
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e0 e4       	ldi	r30, 0x40	; 64
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	80 64       	ori	r24, 0x40	; 64
     da2:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartCommMode == UART_2X_SPEED){
     da4:	e9 81       	ldd	r30, Y+1	; 0x01
     da6:	fa 81       	ldd	r31, Y+2	; 0x02
     da8:	80 85       	ldd	r24, Z+8	; 0x08
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	c1 f4       	brne	.+48     	; 0xdde <UART_vInit+0x298>
		SET_BIT(UCSRA_REG, U2X_BIT);
     dae:	ab e2       	ldi	r26, 0x2B	; 43
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	eb e2       	ldi	r30, 0x2B	; 43
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	82 60       	ori	r24, 0x02	; 2
     dba:	8c 93       	st	X, r24
		UBRRL_REG = LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate2X;
     dbc:	a9 e2       	ldi	r26, 0x29	; 41
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e9 81       	ldd	r30, Y+1	; 0x01
     dc2:	fa 81       	ldd	r31, Y+2	; 0x02
     dc4:	84 81       	ldd	r24, Z+4	; 0x04
     dc6:	95 81       	ldd	r25, Z+5	; 0x05
     dc8:	8c 93       	st	X, r24
		UBRRH_REG = ((LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate2X)>>8);
     dca:	a0 e4       	ldi	r26, 0x40	; 64
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e9 81       	ldd	r30, Y+1	; 0x01
     dd0:	fa 81       	ldd	r31, Y+2	; 0x02
     dd2:	84 81       	ldd	r24, Z+4	; 0x04
     dd4:	95 81       	ldd	r25, Z+5	; 0x05
     dd6:	89 2f       	mov	r24, r25
     dd8:	99 27       	eor	r25, r25
     dda:	8c 93       	st	X, r24
     ddc:	1d c0       	rjmp	.+58     	; 0xe18 <UART_vInit+0x2d2>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartCommMode == UART_1X_SPEED){
     dde:	e9 81       	ldd	r30, Y+1	; 0x01
     de0:	fa 81       	ldd	r31, Y+2	; 0x02
     de2:	80 85       	ldd	r24, Z+8	; 0x08
     de4:	88 23       	and	r24, r24
     de6:	c1 f4       	brne	.+48     	; 0xe18 <UART_vInit+0x2d2>
		CLR_BIT(UCSRA_REG, U2X_BIT);
     de8:	ab e2       	ldi	r26, 0x2B	; 43
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	eb e2       	ldi	r30, 0x2B	; 43
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8d 7f       	andi	r24, 0xFD	; 253
     df4:	8c 93       	st	X, r24
		UBRRL_REG = LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate1X;
     df6:	a9 e2       	ldi	r26, 0x29	; 41
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e9 81       	ldd	r30, Y+1	; 0x01
     dfc:	fa 81       	ldd	r31, Y+2	; 0x02
     dfe:	86 81       	ldd	r24, Z+6	; 0x06
     e00:	8c 93       	st	X, r24
		UBRRH_REG = ((LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate1X)>>8);
     e02:	a0 e4       	ldi	r26, 0x40	; 64
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e9 81       	ldd	r30, Y+1	; 0x01
     e08:	fa 81       	ldd	r31, Y+2	; 0x02
     e0a:	86 81       	ldd	r24, Z+6	; 0x06
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	89 2f       	mov	r24, r25
     e12:	99 0f       	add	r25, r25
     e14:	99 0b       	sbc	r25, r25
     e16:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <UART_vEnable>:

void UART_vEnable(const UART_tcfgInitialize *LOCAL_tcfgUART){
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	00 d0       	rcall	.+0      	; 0xe28 <UART_vEnable+0x6>
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRB_REG, RXEN_BIT);
     e30:	aa e2       	ldi	r26, 0x2A	; 42
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ea e2       	ldi	r30, 0x2A	; 42
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 61       	ori	r24, 0x10	; 16
     e3c:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, TXEN_BIT);
     e3e:	aa e2       	ldi	r26, 0x2A	; 42
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	ea e2       	ldi	r30, 0x2A	; 42
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 60       	ori	r24, 0x08	; 8
     e4a:	8c 93       	st	X, r24
}
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <UART_vDisable>:

void UART_vDisable(const UART_tcfgInitialize *LOCAL_tcfgUART){
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <UART_vDisable+0x6>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	9a 83       	std	Y+2, r25	; 0x02
     e62:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB_REG, RXEN_BIT);
     e64:	aa e2       	ldi	r26, 0x2A	; 42
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ea e2       	ldi	r30, 0x2A	; 42
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8f 7e       	andi	r24, 0xEF	; 239
     e70:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG, TXEN_BIT);
     e72:	aa e2       	ldi	r26, 0x2A	; 42
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ea e2       	ldi	r30, 0x2A	; 42
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	87 7f       	andi	r24, 0xF7	; 247
     e7e:	8c 93       	st	X, r24
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <UART_vSendData>:

void UART_vSendData(u8 LOCAL_u8Data){
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	89 83       	std	Y+1, r24	; 0x01
	while( GET_BIT(UCSRA_REG, UDRE_BIT) != 1 );
     e96:	eb e2       	ldi	r30, 0x2B	; 43
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	82 95       	swap	r24
     e9e:	86 95       	lsr	r24
     ea0:	87 70       	andi	r24, 0x07	; 7
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	90 70       	andi	r25, 0x00	; 0
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	a1 f3       	breq	.-24     	; 0xe96 <UART_vSendData+0xc>
	UDR_REG = LOCAL_u8Data;
     eae:	ec e2       	ldi	r30, 0x2C	; 44
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	80 83       	st	Z, r24
}
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <UART_u8ReceiveData>:

u8 UART_u8ReceiveData(void){
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	0f 92       	push	r0
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Data;
	while( GET_BIT(UCSRA_REG, RXC_BIT) != 1 );
     ec8:	eb e2       	ldi	r30, 0x2B	; 43
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	88 1f       	adc	r24, r24
     ed0:	88 27       	eor	r24, r24
     ed2:	88 1f       	adc	r24, r24
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	c1 f7       	brne	.-16     	; 0xec8 <UART_u8ReceiveData+0xa>
	local_u8Data = UDR_REG;
     ed8:	ec e2       	ldi	r30, 0x2C	; 44
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRA_REG, RXC_BIT);
     ee0:	ab e2       	ldi	r26, 0x2B	; 43
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	eb e2       	ldi	r30, 0x2B	; 43
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8f 77       	andi	r24, 0x7F	; 127
     eec:	8c 93       	st	X, r24
	return local_u8Data;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <UART_vSendString>:

void UART_vSendString(u8 *Copy_u8Str){
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <UART_vSendString+0x6>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	0b c0       	rjmp	.+22     	; 0xf1e <UART_vSendString+0x26>
	while(*Copy_u8Str){
		UART_vSendData(*(Copy_u8Str++));
     f08:	e9 81       	ldd	r30, Y+1	; 0x01
     f0a:	fa 81       	ldd	r31, Y+2	; 0x02
     f0c:	20 81       	ld	r18, Z
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	82 2f       	mov	r24, r18
     f1a:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_vSendData>
	CLR_BIT(UCSRA_REG, RXC_BIT);
	return local_u8Data;
}

void UART_vSendString(u8 *Copy_u8Str){
	while(*Copy_u8Str){
     f1e:	e9 81       	ldd	r30, Y+1	; 0x01
     f20:	fa 81       	ldd	r31, Y+2	; 0x02
     f22:	80 81       	ld	r24, Z
     f24:	88 23       	and	r24, r24
     f26:	81 f7       	brne	.-32     	; 0xf08 <UART_vSendString+0x10>
		UART_vSendData(*(Copy_u8Str++));
	}
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <UART_vClearBuffer>:

void UART_vClearBuffer(){
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	0f 92       	push	r0
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
	u8 temp;
	temp = UDR_REG;
     f3c:	ec e2       	ldi	r30, 0x2C	; 44
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRA_REG, RXC_BIT);
     f44:	ab e2       	ldi	r26, 0x2B	; 43
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	eb e2       	ldi	r30, 0x2B	; 43
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 77       	andi	r24, 0x7F	; 127
     f50:	8c 93       	st	X, r24
}
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <TWI_vInit>:
/*************** Version : 1.0            **********************/
/***************************************************************/

#include "TWI_interface.h"

void TWI_vInit(){
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
	DIO_vPinInit(PORTC, PIN0, INPUT, LOW);
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	0e 94 83 14 	call	0x2906	; 0x2906 <DIO_vPinInit>
	DIO_vPinInit(PORTC, PIN1, INPUT, LOW);
     f6e:	82 e0       	ldi	r24, 0x02	; 2
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	0e 94 83 14 	call	0x2906	; 0x2906 <DIO_vPinInit>
	// TWBR Value
	TWBR_REG = ((F_CPU/SCL_CLOCK)-16)/2; // 8Mhz oscillator and 100Khz bus freq.
     f7a:	e0 e2       	ldi	r30, 0x20	; 32
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 e2       	ldi	r24, 0x20	; 32
     f80:	80 83       	st	Z, r24
	// Prescale value
	TWSR_REG = 0x00; // Set Prescaler to 1
     f82:	e1 e2       	ldi	r30, 0x21	; 33
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	10 82       	st	Z, r1
	// Set address (TWAR = 0x02)
	TWAR_REG = DEVICE_ADDR;
     f88:	e2 e2       	ldi	r30, 0x22	; 34
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 e5       	ldi	r24, 0x50	; 80
     f8e:	80 83       	st	Z, r24
	// Enable TWI
	TWCR_REG = (1<<TWEN);
     f90:	e6 e5       	ldi	r30, 0x56	; 86
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	84 e0       	ldi	r24, 0x04	; 4
     f96:	80 83       	st	Z, r24
}
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <TWI_vStart>:

void TWI_vStart(){
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG = (1<<TWINT);
	// Send Start Condition
	TWCR_REG |= (1<<TWSTA);
	// Enable TWI
	TWCR_REG |= (1<<TWEN);*/
	TWCR_REG = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     fa6:	e6 e5       	ldi	r30, 0x56	; 86
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	84 ea       	ldi	r24, 0xA4	; 164
     fac:	80 83       	st	Z, r24
	// Polling until flag is set
	while(!(GET_BIT(TWCR_REG, TWINT)));
     fae:	e6 e5       	ldi	r30, 0x56	; 86
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	88 23       	and	r24, r24
     fb6:	dc f7       	brge	.-10     	; 0xfae <TWI_vStart+0x10>
}
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <TWI_vStop>:

void TWI_vStop(){
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG = (1<<TWINT);
	// Send stop condition
	TWCR_REG |= (1<<TWSTO);
	// Enable TWI
	TWCR_REG |= (1<<TWEN);*/
	TWCR_REG = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     fc6:	e6 e5       	ldi	r30, 0x56	; 86
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	84 e9       	ldi	r24, 0x94	; 148
     fcc:	80 83       	st	Z, r24
}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <TWI_vWriteData>:

void TWI_vWriteData(u8 Copy_u8Data){
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	89 83       	std	Y+1, r24	; 0x01
	// Write data on TWI DR
	TWDR_REG = Copy_u8Data;
     fe0:	e3 e2       	ldi	r30, 0x23	; 35
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	80 83       	st	Z, r24
	TWCR_REG = (1<<TWINT);
	// Enable Ack
	TWCR_REG |= (1<<TWEA);
	// Enable TWI
	TWCR_REG |= (1<<TWEN);*/
	TWCR_REG = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     fe8:	e6 e5       	ldi	r30, 0x56	; 86
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	84 ec       	ldi	r24, 0xC4	; 196
     fee:	80 83       	st	Z, r24
	// Polling until flag is set
	while(!(GET_BIT(TWCR_REG, TWINT)));
     ff0:	e6 e5       	ldi	r30, 0x56	; 86
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	88 23       	and	r24, r24
     ff8:	dc f7       	brge	.-10     	; 0xff0 <TWI_vWriteData+0x1c>
}
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <TWI_u8ReadWithAck>:

u8 TWI_u8ReadWithAck(){
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	u8 Data;
	// Clear flag
	while(!(GET_BIT(TWCR_REG, TWINT)));
    100c:	e6 e5       	ldi	r30, 0x56	; 86
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 23       	and	r24, r24
    1014:	dc f7       	brge	.-10     	; 0x100c <TWI_u8ReadWithAck+0xa>
	// Enable Ack
	TWCR_REG |= (1<<TWEA);
    1016:	a6 e5       	ldi	r26, 0x56	; 86
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e6 e5       	ldi	r30, 0x56	; 86
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	80 64       	ori	r24, 0x40	; 64
    1022:	8c 93       	st	X, r24
	// Enable TWI
	TWCR_REG |= (1<<TWEN);
    1024:	a6 e5       	ldi	r26, 0x56	; 86
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e6 e5       	ldi	r30, 0x56	; 86
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	84 60       	ori	r24, 0x04	; 4
    1030:	8c 93       	st	X, r24
	// Poll until flag is set
	while(!(GET_BIT(TWCR_REG, TWINT)));
    1032:	e6 e5       	ldi	r30, 0x56	; 86
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	88 23       	and	r24, r24
    103a:	dc f7       	brge	.-10     	; 0x1032 <TWI_u8ReadWithAck+0x30>
	// Read received data
	Data = TWDR_REG;
    103c:	e3 e2       	ldi	r30, 0x23	; 35
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	89 83       	std	Y+1, r24	; 0x01
	return Data;
    1044:	89 81       	ldd	r24, Y+1	; 0x01
}
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <TWI_u8ReadWithNoAck>:

u8 TWI_u8ReadWithNoAck(){
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
	u8 Data;
	// Clear flag
	while(!(GET_BIT(TWCR_REG, TWINT)));
    1058:	e6 e5       	ldi	r30, 0x56	; 86
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	88 23       	and	r24, r24
    1060:	dc f7       	brge	.-10     	; 0x1058 <TWI_u8ReadWithNoAck+0xa>
	// Enable TWI
	CLR_BIT(TWCR_REG, TWEA);
    1062:	a6 e5       	ldi	r26, 0x56	; 86
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e6 e5       	ldi	r30, 0x56	; 86
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	8f 7b       	andi	r24, 0xBF	; 191
    106e:	8c 93       	st	X, r24
	TWCR_REG |= (1<<TWEN);
    1070:	a6 e5       	ldi	r26, 0x56	; 86
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e6 e5       	ldi	r30, 0x56	; 86
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	84 60       	ori	r24, 0x04	; 4
    107c:	8c 93       	st	X, r24
	// Poll until flag is set
	while(!(GET_BIT(TWCR_REG, TWINT)));
    107e:	e6 e5       	ldi	r30, 0x56	; 86
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	88 23       	and	r24, r24
    1086:	dc f7       	brge	.-10     	; 0x107e <TWI_u8ReadWithNoAck+0x30>
	// Read received data
	Data = TWDR_REG;
    1088:	e3 e2       	ldi	r30, 0x23	; 35
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	89 83       	std	Y+1, r24	; 0x01
	return Data;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
}
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <TWI_u8GetStatus>:

u8 TWI_u8GetStatus(){
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	0f 92       	push	r0
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	u8 Status;
	// Read status register (&0xF8)
	Status = TWSR_REG & 0xF8;
    10a4:	e1 e2       	ldi	r30, 0x21	; 33
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	88 7f       	andi	r24, 0xF8	; 248
    10ac:	89 83       	std	Y+1, r24	; 0x01
	return Status;
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <TMR_vInit>:

void __vector_5(void) __attribute__((signal));
extern TMR_cfg_t TIMER2;
u8 timer2_flag = 0;

void TMR_vInit(const TMR_cfg_t *TMR){
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <TMR_vInit+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <TMR_vInit+0x8>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <TMR_vInit+0x1a>
    10d0:	88 c2       	rjmp	.+1296   	; 0x15e2 <TMR_vInit+0x52a>
		switch(TMR->TMR_TimerChannel){
    10d2:	e9 81       	ldd	r30, Y+1	; 0x01
    10d4:	fa 81       	ldd	r31, Y+2	; 0x02
    10d6:	80 81       	ld	r24, Z
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3c 83       	std	Y+4, r19	; 0x04
    10de:	2b 83       	std	Y+3, r18	; 0x03
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	83 30       	cpi	r24, 0x03	; 3
    10e6:	91 05       	cpc	r25, r1
    10e8:	09 f4       	brne	.+2      	; 0x10ec <TMR_vInit+0x34>
    10ea:	27 c1       	rjmp	.+590    	; 0x133a <TMR_vInit+0x282>
    10ec:	2b 81       	ldd	r18, Y+3	; 0x03
    10ee:	3c 81       	ldd	r19, Y+4	; 0x04
    10f0:	24 30       	cpi	r18, 0x04	; 4
    10f2:	31 05       	cpc	r19, r1
    10f4:	8c f4       	brge	.+34     	; 0x1118 <TMR_vInit+0x60>
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	91 05       	cpc	r25, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <TMR_vInit+0x4a>
    1100:	70 c0       	rjmp	.+224    	; 0x11e2 <TMR_vInit+0x12a>
    1102:	2b 81       	ldd	r18, Y+3	; 0x03
    1104:	3c 81       	ldd	r19, Y+4	; 0x04
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	0c f0       	brlt	.+2      	; 0x110e <TMR_vInit+0x56>
    110c:	bd c0       	rjmp	.+378    	; 0x1288 <TMR_vInit+0x1d0>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	a1 f0       	breq	.+40     	; 0x113e <TMR_vInit+0x86>
    1116:	65 c2       	rjmp	.+1226   	; 0x15e2 <TMR_vInit+0x52a>
    1118:	2b 81       	ldd	r18, Y+3	; 0x03
    111a:	3c 81       	ldd	r19, Y+4	; 0x04
    111c:	25 30       	cpi	r18, 0x05	; 5
    111e:	31 05       	cpc	r19, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <TMR_vInit+0x6c>
    1122:	be c1       	rjmp	.+892    	; 0x14a0 <TMR_vInit+0x3e8>
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	85 30       	cpi	r24, 0x05	; 5
    112a:	91 05       	cpc	r25, r1
    112c:	0c f4       	brge	.+2      	; 0x1130 <TMR_vInit+0x78>
    112e:	5f c1       	rjmp	.+702    	; 0x13ee <TMR_vInit+0x336>
    1130:	2b 81       	ldd	r18, Y+3	; 0x03
    1132:	3c 81       	ldd	r19, Y+4	; 0x04
    1134:	26 30       	cpi	r18, 0x06	; 6
    1136:	31 05       	cpc	r19, r1
    1138:	09 f4       	brne	.+2      	; 0x113c <TMR_vInit+0x84>
    113a:	04 c2       	rjmp	.+1032   	; 0x1544 <TMR_vInit+0x48c>
    113c:	52 c2       	rjmp	.+1188   	; 0x15e2 <TMR_vInit+0x52a>
		case TIMER0_NORMAL:
			TCCR0_REG = (TCCR0_REG&0xB7);
    113e:	a3 e5       	ldi	r26, 0x53	; 83
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e3 e5       	ldi	r30, 0x53	; 83
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	87 7b       	andi	r24, 0xB7	; 183
    114a:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    114c:	e9 81       	ldd	r30, Y+1	; 0x01
    114e:	fa 81       	ldd	r31, Y+2	; 0x02
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	49 f4       	brne	.+18     	; 0x1168 <TMR_vInit+0xb0>
				TIMSK_REG = (TIMSK_REG&0xFC) | 0x01;
    1156:	a9 e5       	ldi	r26, 0x59	; 89
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e9 e5       	ldi	r30, 0x59	; 89
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8c 7f       	andi	r24, 0xFC	; 252
    1162:	81 60       	ori	r24, 0x01	; 1
    1164:	8c 93       	st	X, r24
    1166:	3d c2       	rjmp	.+1146   	; 0x15e2 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    1168:	e9 81       	ldd	r30, Y+1	; 0x01
    116a:	fa 81       	ldd	r31, Y+2	; 0x02
    116c:	82 81       	ldd	r24, Z+2	; 0x02
    116e:	88 23       	and	r24, r24
    1170:	09 f0       	breq	.+2      	; 0x1174 <TMR_vInit+0xbc>
    1172:	37 c2       	rjmp	.+1134   	; 0x15e2 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    1174:	e9 81       	ldd	r30, Y+1	; 0x01
    1176:	fa 81       	ldd	r31, Y+2	; 0x02
    1178:	83 81       	ldd	r24, Z+3	; 0x03
    117a:	88 23       	and	r24, r24
    117c:	41 f4       	brne	.+16     	; 0x118e <TMR_vInit+0xd6>
					TCCR0_REG = (TCCR0_REG & 0xCF);
    117e:	a3 e5       	ldi	r26, 0x53	; 83
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e3 e5       	ldi	r30, 0x53	; 83
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8f 7c       	andi	r24, 0xCF	; 207
    118a:	8c 93       	st	X, r24
    118c:	2a c2       	rjmp	.+1108   	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    118e:	e9 81       	ldd	r30, Y+1	; 0x01
    1190:	fa 81       	ldd	r31, Y+2	; 0x02
    1192:	83 81       	ldd	r24, Z+3	; 0x03
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	49 f4       	brne	.+18     	; 0x11aa <TMR_vInit+0xf2>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x10;
    1198:	a3 e5       	ldi	r26, 0x53	; 83
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e3 e5       	ldi	r30, 0x53	; 83
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8f 7c       	andi	r24, 0xCF	; 207
    11a4:	80 61       	ori	r24, 0x10	; 16
    11a6:	8c 93       	st	X, r24
    11a8:	1c c2       	rjmp	.+1080   	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    11aa:	e9 81       	ldd	r30, Y+1	; 0x01
    11ac:	fa 81       	ldd	r31, Y+2	; 0x02
    11ae:	83 81       	ldd	r24, Z+3	; 0x03
    11b0:	82 30       	cpi	r24, 0x02	; 2
    11b2:	49 f4       	brne	.+18     	; 0x11c6 <TMR_vInit+0x10e>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    11b4:	a3 e5       	ldi	r26, 0x53	; 83
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e3 e5       	ldi	r30, 0x53	; 83
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8f 7c       	andi	r24, 0xCF	; 207
    11c0:	80 62       	ori	r24, 0x20	; 32
    11c2:	8c 93       	st	X, r24
    11c4:	0e c2       	rjmp	.+1052   	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    11c6:	e9 81       	ldd	r30, Y+1	; 0x01
    11c8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ca:	83 81       	ldd	r24, Z+3	; 0x03
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <TMR_vInit+0x11a>
    11d0:	08 c2       	rjmp	.+1040   	; 0x15e2 <TMR_vInit+0x52a>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    11d2:	a3 e5       	ldi	r26, 0x53	; 83
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e3 e5       	ldi	r30, 0x53	; 83
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	80 63       	ori	r24, 0x30	; 48
    11de:	8c 93       	st	X, r24
    11e0:	00 c2       	rjmp	.+1024   	; 0x15e2 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER0_CTC:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x8;
    11e2:	a3 e5       	ldi	r26, 0x53	; 83
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e3 e5       	ldi	r30, 0x53	; 83
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	87 7b       	andi	r24, 0xB7	; 183
    11ee:	88 60       	ori	r24, 0x08	; 8
    11f0:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	82 81       	ldd	r24, Z+2	; 0x02
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	49 f4       	brne	.+18     	; 0x120e <TMR_vInit+0x156>
				TIMSK_REG = (TIMSK_REG&0xFC) | 0x02;
    11fc:	a9 e5       	ldi	r26, 0x59	; 89
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e9 e5       	ldi	r30, 0x59	; 89
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8c 7f       	andi	r24, 0xFC	; 252
    1208:	82 60       	ori	r24, 0x02	; 2
    120a:	8c 93       	st	X, r24
    120c:	ea c1       	rjmp	.+980    	; 0x15e2 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    120e:	e9 81       	ldd	r30, Y+1	; 0x01
    1210:	fa 81       	ldd	r31, Y+2	; 0x02
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	88 23       	and	r24, r24
    1216:	09 f0       	breq	.+2      	; 0x121a <TMR_vInit+0x162>
    1218:	e4 c1       	rjmp	.+968    	; 0x15e2 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    121a:	e9 81       	ldd	r30, Y+1	; 0x01
    121c:	fa 81       	ldd	r31, Y+2	; 0x02
    121e:	83 81       	ldd	r24, Z+3	; 0x03
    1220:	88 23       	and	r24, r24
    1222:	41 f4       	brne	.+16     	; 0x1234 <TMR_vInit+0x17c>
					TCCR0_REG = (TCCR0_REG & 0xCF);
    1224:	a3 e5       	ldi	r26, 0x53	; 83
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e3 e5       	ldi	r30, 0x53	; 83
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8f 7c       	andi	r24, 0xCF	; 207
    1230:	8c 93       	st	X, r24
    1232:	d7 c1       	rjmp	.+942    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    1234:	e9 81       	ldd	r30, Y+1	; 0x01
    1236:	fa 81       	ldd	r31, Y+2	; 0x02
    1238:	83 81       	ldd	r24, Z+3	; 0x03
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	49 f4       	brne	.+18     	; 0x1250 <TMR_vInit+0x198>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x10;
    123e:	a3 e5       	ldi	r26, 0x53	; 83
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e3 e5       	ldi	r30, 0x53	; 83
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8f 7c       	andi	r24, 0xCF	; 207
    124a:	80 61       	ori	r24, 0x10	; 16
    124c:	8c 93       	st	X, r24
    124e:	c9 c1       	rjmp	.+914    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    1250:	e9 81       	ldd	r30, Y+1	; 0x01
    1252:	fa 81       	ldd	r31, Y+2	; 0x02
    1254:	83 81       	ldd	r24, Z+3	; 0x03
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	49 f4       	brne	.+18     	; 0x126c <TMR_vInit+0x1b4>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    125a:	a3 e5       	ldi	r26, 0x53	; 83
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e3 e5       	ldi	r30, 0x53	; 83
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8f 7c       	andi	r24, 0xCF	; 207
    1266:	80 62       	ori	r24, 0x20	; 32
    1268:	8c 93       	st	X, r24
    126a:	bb c1       	rjmp	.+886    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    126c:	e9 81       	ldd	r30, Y+1	; 0x01
    126e:	fa 81       	ldd	r31, Y+2	; 0x02
    1270:	83 81       	ldd	r24, Z+3	; 0x03
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	09 f0       	breq	.+2      	; 0x1278 <TMR_vInit+0x1c0>
    1276:	b5 c1       	rjmp	.+874    	; 0x15e2 <TMR_vInit+0x52a>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    1278:	a3 e5       	ldi	r26, 0x53	; 83
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e3 e5       	ldi	r30, 0x53	; 83
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	80 63       	ori	r24, 0x30	; 48
    1284:	8c 93       	st	X, r24
    1286:	ad c1       	rjmp	.+858    	; 0x15e2 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_NORMAL:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    1288:	af e4       	ldi	r26, 0x4F	; 79
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ef e4       	ldi	r30, 0x4F	; 79
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8c 7f       	andi	r24, 0xFC	; 252
    1294:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    1296:	ae e4       	ldi	r26, 0x4E	; 78
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	ee e4       	ldi	r30, 0x4E	; 78
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	87 7e       	andi	r24, 0xE7	; 231
    12a2:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    12a4:	e9 81       	ldd	r30, Y+1	; 0x01
    12a6:	fa 81       	ldd	r31, Y+2	; 0x02
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	49 f4       	brne	.+18     	; 0x12c0 <TMR_vInit+0x208>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x04;
    12ae:	a9 e5       	ldi	r26, 0x59	; 89
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e9 e5       	ldi	r30, 0x59	; 89
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	83 7c       	andi	r24, 0xC3	; 195
    12ba:	84 60       	ori	r24, 0x04	; 4
    12bc:	8c 93       	st	X, r24
    12be:	91 c1       	rjmp	.+802    	; 0x15e2 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    12c0:	e9 81       	ldd	r30, Y+1	; 0x01
    12c2:	fa 81       	ldd	r31, Y+2	; 0x02
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	88 23       	and	r24, r24
    12c8:	09 f0       	breq	.+2      	; 0x12cc <TMR_vInit+0x214>
    12ca:	8b c1       	rjmp	.+790    	; 0x15e2 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    12cc:	e9 81       	ldd	r30, Y+1	; 0x01
    12ce:	fa 81       	ldd	r31, Y+2	; 0x02
    12d0:	83 81       	ldd	r24, Z+3	; 0x03
    12d2:	88 23       	and	r24, r24
    12d4:	41 f4       	brne	.+16     	; 0x12e6 <TMR_vInit+0x22e>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
    12d6:	af e4       	ldi	r26, 0x4F	; 79
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	ef e4       	ldi	r30, 0x4F	; 79
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8f 7c       	andi	r24, 0xCF	; 207
    12e2:	8c 93       	st	X, r24
    12e4:	7e c1       	rjmp	.+764    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    12e6:	e9 81       	ldd	r30, Y+1	; 0x01
    12e8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ea:	83 81       	ldd	r24, Z+3	; 0x03
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	49 f4       	brne	.+18     	; 0x1302 <TMR_vInit+0x24a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
    12f0:	af e4       	ldi	r26, 0x4F	; 79
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ef e4       	ldi	r30, 0x4F	; 79
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8f 7c       	andi	r24, 0xCF	; 207
    12fc:	80 61       	ori	r24, 0x10	; 16
    12fe:	8c 93       	st	X, r24
    1300:	70 c1       	rjmp	.+736    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    1302:	e9 81       	ldd	r30, Y+1	; 0x01
    1304:	fa 81       	ldd	r31, Y+2	; 0x02
    1306:	83 81       	ldd	r24, Z+3	; 0x03
    1308:	82 30       	cpi	r24, 0x02	; 2
    130a:	49 f4       	brne	.+18     	; 0x131e <TMR_vInit+0x266>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    130c:	af e4       	ldi	r26, 0x4F	; 79
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ef e4       	ldi	r30, 0x4F	; 79
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8f 7c       	andi	r24, 0xCF	; 207
    1318:	80 62       	ori	r24, 0x20	; 32
    131a:	8c 93       	st	X, r24
    131c:	62 c1       	rjmp	.+708    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    131e:	e9 81       	ldd	r30, Y+1	; 0x01
    1320:	fa 81       	ldd	r31, Y+2	; 0x02
    1322:	83 81       	ldd	r24, Z+3	; 0x03
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	09 f0       	breq	.+2      	; 0x132a <TMR_vInit+0x272>
    1328:	5c c1       	rjmp	.+696    	; 0x15e2 <TMR_vInit+0x52a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    132a:	af e4       	ldi	r26, 0x4F	; 79
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	ef e4       	ldi	r30, 0x4F	; 79
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	80 63       	ori	r24, 0x30	; 48
    1336:	8c 93       	st	X, r24
    1338:	54 c1       	rjmp	.+680    	; 0x15e2 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_CTC_OCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    133a:	af e4       	ldi	r26, 0x4F	; 79
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	ef e4       	ldi	r30, 0x4F	; 79
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	8c 7f       	andi	r24, 0xFC	; 252
    1346:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x08;
    1348:	ae e4       	ldi	r26, 0x4E	; 78
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ee e4       	ldi	r30, 0x4E	; 78
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	87 7e       	andi	r24, 0xE7	; 231
    1354:	88 60       	ori	r24, 0x08	; 8
    1356:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    1358:	e9 81       	ldd	r30, Y+1	; 0x01
    135a:	fa 81       	ldd	r31, Y+2	; 0x02
    135c:	82 81       	ldd	r24, Z+2	; 0x02
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	49 f4       	brne	.+18     	; 0x1374 <TMR_vInit+0x2bc>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x18;
    1362:	a9 e5       	ldi	r26, 0x59	; 89
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e9 e5       	ldi	r30, 0x59	; 89
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	83 7c       	andi	r24, 0xC3	; 195
    136e:	88 61       	ori	r24, 0x18	; 24
    1370:	8c 93       	st	X, r24
    1372:	37 c1       	rjmp	.+622    	; 0x15e2 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    1374:	e9 81       	ldd	r30, Y+1	; 0x01
    1376:	fa 81       	ldd	r31, Y+2	; 0x02
    1378:	82 81       	ldd	r24, Z+2	; 0x02
    137a:	88 23       	and	r24, r24
    137c:	09 f0       	breq	.+2      	; 0x1380 <TMR_vInit+0x2c8>
    137e:	31 c1       	rjmp	.+610    	; 0x15e2 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    1380:	e9 81       	ldd	r30, Y+1	; 0x01
    1382:	fa 81       	ldd	r31, Y+2	; 0x02
    1384:	83 81       	ldd	r24, Z+3	; 0x03
    1386:	88 23       	and	r24, r24
    1388:	41 f4       	brne	.+16     	; 0x139a <TMR_vInit+0x2e2>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
    138a:	af e4       	ldi	r26, 0x4F	; 79
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	ef e4       	ldi	r30, 0x4F	; 79
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8f 7c       	andi	r24, 0xCF	; 207
    1396:	8c 93       	st	X, r24
    1398:	24 c1       	rjmp	.+584    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    139a:	e9 81       	ldd	r30, Y+1	; 0x01
    139c:	fa 81       	ldd	r31, Y+2	; 0x02
    139e:	83 81       	ldd	r24, Z+3	; 0x03
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	49 f4       	brne	.+18     	; 0x13b6 <TMR_vInit+0x2fe>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
    13a4:	af e4       	ldi	r26, 0x4F	; 79
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ef e4       	ldi	r30, 0x4F	; 79
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8f 7c       	andi	r24, 0xCF	; 207
    13b0:	80 61       	ori	r24, 0x10	; 16
    13b2:	8c 93       	st	X, r24
    13b4:	16 c1       	rjmp	.+556    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    13b6:	e9 81       	ldd	r30, Y+1	; 0x01
    13b8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ba:	83 81       	ldd	r24, Z+3	; 0x03
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	49 f4       	brne	.+18     	; 0x13d2 <TMR_vInit+0x31a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    13c0:	af e4       	ldi	r26, 0x4F	; 79
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	ef e4       	ldi	r30, 0x4F	; 79
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8f 7c       	andi	r24, 0xCF	; 207
    13cc:	80 62       	ori	r24, 0x20	; 32
    13ce:	8c 93       	st	X, r24
    13d0:	08 c1       	rjmp	.+528    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    13d2:	e9 81       	ldd	r30, Y+1	; 0x01
    13d4:	fa 81       	ldd	r31, Y+2	; 0x02
    13d6:	83 81       	ldd	r24, Z+3	; 0x03
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	09 f0       	breq	.+2      	; 0x13de <TMR_vInit+0x326>
    13dc:	02 c1       	rjmp	.+516    	; 0x15e2 <TMR_vInit+0x52a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    13de:	af e4       	ldi	r26, 0x4F	; 79
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ef e4       	ldi	r30, 0x4F	; 79
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	80 63       	ori	r24, 0x30	; 48
    13ea:	8c 93       	st	X, r24
    13ec:	fa c0       	rjmp	.+500    	; 0x15e2 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_CTC_ICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    13ee:	af e4       	ldi	r26, 0x4F	; 79
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	ef e4       	ldi	r30, 0x4F	; 79
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	8c 7f       	andi	r24, 0xFC	; 252
    13fa:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    13fc:	ae e4       	ldi	r26, 0x4E	; 78
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ee e4       	ldi	r30, 0x4E	; 78
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	88 61       	ori	r24, 0x18	; 24
    1408:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    140a:	e9 81       	ldd	r30, Y+1	; 0x01
    140c:	fa 81       	ldd	r31, Y+2	; 0x02
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	49 f4       	brne	.+18     	; 0x1426 <TMR_vInit+0x36e>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x18;
    1414:	a9 e5       	ldi	r26, 0x59	; 89
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e9 e5       	ldi	r30, 0x59	; 89
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	83 7c       	andi	r24, 0xC3	; 195
    1420:	88 61       	ori	r24, 0x18	; 24
    1422:	8c 93       	st	X, r24
    1424:	de c0       	rjmp	.+444    	; 0x15e2 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	88 23       	and	r24, r24
    142e:	09 f0       	breq	.+2      	; 0x1432 <TMR_vInit+0x37a>
    1430:	d8 c0       	rjmp	.+432    	; 0x15e2 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    1432:	e9 81       	ldd	r30, Y+1	; 0x01
    1434:	fa 81       	ldd	r31, Y+2	; 0x02
    1436:	83 81       	ldd	r24, Z+3	; 0x03
    1438:	88 23       	and	r24, r24
    143a:	41 f4       	brne	.+16     	; 0x144c <TMR_vInit+0x394>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
    143c:	af e4       	ldi	r26, 0x4F	; 79
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ef e4       	ldi	r30, 0x4F	; 79
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8f 7c       	andi	r24, 0xCF	; 207
    1448:	8c 93       	st	X, r24
    144a:	cb c0       	rjmp	.+406    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    144c:	e9 81       	ldd	r30, Y+1	; 0x01
    144e:	fa 81       	ldd	r31, Y+2	; 0x02
    1450:	83 81       	ldd	r24, Z+3	; 0x03
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	49 f4       	brne	.+18     	; 0x1468 <TMR_vInit+0x3b0>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
    1456:	af e4       	ldi	r26, 0x4F	; 79
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ef e4       	ldi	r30, 0x4F	; 79
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	8f 7c       	andi	r24, 0xCF	; 207
    1462:	80 61       	ori	r24, 0x10	; 16
    1464:	8c 93       	st	X, r24
    1466:	bd c0       	rjmp	.+378    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    1468:	e9 81       	ldd	r30, Y+1	; 0x01
    146a:	fa 81       	ldd	r31, Y+2	; 0x02
    146c:	83 81       	ldd	r24, Z+3	; 0x03
    146e:	82 30       	cpi	r24, 0x02	; 2
    1470:	49 f4       	brne	.+18     	; 0x1484 <TMR_vInit+0x3cc>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1472:	af e4       	ldi	r26, 0x4F	; 79
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ef e4       	ldi	r30, 0x4F	; 79
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	8f 7c       	andi	r24, 0xCF	; 207
    147e:	80 62       	ori	r24, 0x20	; 32
    1480:	8c 93       	st	X, r24
    1482:	af c0       	rjmp	.+350    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    1484:	e9 81       	ldd	r30, Y+1	; 0x01
    1486:	fa 81       	ldd	r31, Y+2	; 0x02
    1488:	83 81       	ldd	r24, Z+3	; 0x03
    148a:	83 30       	cpi	r24, 0x03	; 3
    148c:	09 f0       	breq	.+2      	; 0x1490 <TMR_vInit+0x3d8>
    148e:	a9 c0       	rjmp	.+338    	; 0x15e2 <TMR_vInit+0x52a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1490:	af e4       	ldi	r26, 0x4F	; 79
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ef e4       	ldi	r30, 0x4F	; 79
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	80 63       	ori	r24, 0x30	; 48
    149c:	8c 93       	st	X, r24
    149e:	a1 c0       	rjmp	.+322    	; 0x15e2 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_NORMAL:
			TCCR2_REG = (TCCR2_REG&0xB7);
    14a0:	a5 e4       	ldi	r26, 0x45	; 69
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e5 e4       	ldi	r30, 0x45	; 69
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	87 7b       	andi	r24, 0xB7	; 183
    14ac:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    14ae:	e9 81       	ldd	r30, Y+1	; 0x01
    14b0:	fa 81       	ldd	r31, Y+2	; 0x02
    14b2:	82 81       	ldd	r24, Z+2	; 0x02
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	49 f4       	brne	.+18     	; 0x14ca <TMR_vInit+0x412>
				TIMSK_REG = (TIMSK_REG&0x3F) | 0x40;
    14b8:	a9 e5       	ldi	r26, 0x59	; 89
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e9 e5       	ldi	r30, 0x59	; 89
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	8f 73       	andi	r24, 0x3F	; 63
    14c4:	80 64       	ori	r24, 0x40	; 64
    14c6:	8c 93       	st	X, r24
    14c8:	8c c0       	rjmp	.+280    	; 0x15e2 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    14ca:	e9 81       	ldd	r30, Y+1	; 0x01
    14cc:	fa 81       	ldd	r31, Y+2	; 0x02
    14ce:	82 81       	ldd	r24, Z+2	; 0x02
    14d0:	88 23       	and	r24, r24
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <TMR_vInit+0x41e>
    14d4:	86 c0       	rjmp	.+268    	; 0x15e2 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    14d6:	e9 81       	ldd	r30, Y+1	; 0x01
    14d8:	fa 81       	ldd	r31, Y+2	; 0x02
    14da:	83 81       	ldd	r24, Z+3	; 0x03
    14dc:	88 23       	and	r24, r24
    14de:	41 f4       	brne	.+16     	; 0x14f0 <TMR_vInit+0x438>
					TCCR2_REG = (TCCR2_REG & 0xCF);
    14e0:	a5 e4       	ldi	r26, 0x45	; 69
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e4       	ldi	r30, 0x45	; 69
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 7c       	andi	r24, 0xCF	; 207
    14ec:	8c 93       	st	X, r24
    14ee:	79 c0       	rjmp	.+242    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    14f0:	e9 81       	ldd	r30, Y+1	; 0x01
    14f2:	fa 81       	ldd	r31, Y+2	; 0x02
    14f4:	83 81       	ldd	r24, Z+3	; 0x03
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	49 f4       	brne	.+18     	; 0x150c <TMR_vInit+0x454>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x10;
    14fa:	a5 e4       	ldi	r26, 0x45	; 69
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e5 e4       	ldi	r30, 0x45	; 69
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8f 7c       	andi	r24, 0xCF	; 207
    1506:	80 61       	ori	r24, 0x10	; 16
    1508:	8c 93       	st	X, r24
    150a:	6b c0       	rjmp	.+214    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    150c:	e9 81       	ldd	r30, Y+1	; 0x01
    150e:	fa 81       	ldd	r31, Y+2	; 0x02
    1510:	83 81       	ldd	r24, Z+3	; 0x03
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	49 f4       	brne	.+18     	; 0x1528 <TMR_vInit+0x470>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x20;
    1516:	a5 e4       	ldi	r26, 0x45	; 69
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e5 e4       	ldi	r30, 0x45	; 69
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8f 7c       	andi	r24, 0xCF	; 207
    1522:	80 62       	ori	r24, 0x20	; 32
    1524:	8c 93       	st	X, r24
    1526:	5d c0       	rjmp	.+186    	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    1528:	e9 81       	ldd	r30, Y+1	; 0x01
    152a:	fa 81       	ldd	r31, Y+2	; 0x02
    152c:	83 81       	ldd	r24, Z+3	; 0x03
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	09 f0       	breq	.+2      	; 0x1534 <TMR_vInit+0x47c>
    1532:	57 c0       	rjmp	.+174    	; 0x15e2 <TMR_vInit+0x52a>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x30;
    1534:	a5 e4       	ldi	r26, 0x45	; 69
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e5 e4       	ldi	r30, 0x45	; 69
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 63       	ori	r24, 0x30	; 48
    1540:	8c 93       	st	X, r24
    1542:	4f c0       	rjmp	.+158    	; 0x15e2 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_CTC:
			TCCR2_REG = (TCCR2_REG&0xB7);
    1544:	a5 e4       	ldi	r26, 0x45	; 69
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e5 e4       	ldi	r30, 0x45	; 69
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	87 7b       	andi	r24, 0xB7	; 183
    1550:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    1552:	e9 81       	ldd	r30, Y+1	; 0x01
    1554:	fa 81       	ldd	r31, Y+2	; 0x02
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	49 f4       	brne	.+18     	; 0x156e <TMR_vInit+0x4b6>
				TIMSK_REG = (TIMSK_REG&0x3F) | 0x80;
    155c:	a9 e5       	ldi	r26, 0x59	; 89
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e9 e5       	ldi	r30, 0x59	; 89
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	8f 73       	andi	r24, 0x3F	; 63
    1568:	80 68       	ori	r24, 0x80	; 128
    156a:	8c 93       	st	X, r24
    156c:	3a c0       	rjmp	.+116    	; 0x15e2 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    156e:	e9 81       	ldd	r30, Y+1	; 0x01
    1570:	fa 81       	ldd	r31, Y+2	; 0x02
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	88 23       	and	r24, r24
    1576:	a9 f5       	brne	.+106    	; 0x15e2 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    1578:	e9 81       	ldd	r30, Y+1	; 0x01
    157a:	fa 81       	ldd	r31, Y+2	; 0x02
    157c:	83 81       	ldd	r24, Z+3	; 0x03
    157e:	88 23       	and	r24, r24
    1580:	41 f4       	brne	.+16     	; 0x1592 <TMR_vInit+0x4da>
					TCCR2_REG = (TCCR2_REG & 0xCF);
    1582:	a5 e4       	ldi	r26, 0x45	; 69
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e4       	ldi	r30, 0x45	; 69
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8f 7c       	andi	r24, 0xCF	; 207
    158e:	8c 93       	st	X, r24
    1590:	28 c0       	rjmp	.+80     	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    1592:	e9 81       	ldd	r30, Y+1	; 0x01
    1594:	fa 81       	ldd	r31, Y+2	; 0x02
    1596:	83 81       	ldd	r24, Z+3	; 0x03
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	49 f4       	brne	.+18     	; 0x15ae <TMR_vInit+0x4f6>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x10;
    159c:	a5 e4       	ldi	r26, 0x45	; 69
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e5 e4       	ldi	r30, 0x45	; 69
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	8f 7c       	andi	r24, 0xCF	; 207
    15a8:	80 61       	ori	r24, 0x10	; 16
    15aa:	8c 93       	st	X, r24
    15ac:	1a c0       	rjmp	.+52     	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    15ae:	e9 81       	ldd	r30, Y+1	; 0x01
    15b0:	fa 81       	ldd	r31, Y+2	; 0x02
    15b2:	83 81       	ldd	r24, Z+3	; 0x03
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	49 f4       	brne	.+18     	; 0x15ca <TMR_vInit+0x512>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x20;
    15b8:	a5 e4       	ldi	r26, 0x45	; 69
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e5 e4       	ldi	r30, 0x45	; 69
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8f 7c       	andi	r24, 0xCF	; 207
    15c4:	80 62       	ori	r24, 0x20	; 32
    15c6:	8c 93       	st	X, r24
    15c8:	0c c0       	rjmp	.+24     	; 0x15e2 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    15ca:	e9 81       	ldd	r30, Y+1	; 0x01
    15cc:	fa 81       	ldd	r31, Y+2	; 0x02
    15ce:	83 81       	ldd	r24, Z+3	; 0x03
    15d0:	83 30       	cpi	r24, 0x03	; 3
    15d2:	39 f4       	brne	.+14     	; 0x15e2 <TMR_vInit+0x52a>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x30;
    15d4:	a5 e4       	ldi	r26, 0x45	; 69
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e5 e4       	ldi	r30, 0x45	; 69
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	80 63       	ori	r24, 0x30	; 48
    15e0:	8c 93       	st	X, r24
			else{ /* Do Nothing */ }
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <TMR_vStartTimer>:

void TMR_vStartTimer(const TMR_cfg_t *TMR){
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	2a 97       	sbiw	r28, 0x0a	; 10
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	09 f4       	brne	.+2      	; 0x1612 <TMR_vStartTimer+0x22>
    1610:	98 c1       	rjmp	.+816    	; 0x1942 <TMR_vStartTimer+0x352>
		switch(TMR->TMR_TimerChannel){
    1612:	e9 81       	ldd	r30, Y+1	; 0x01
    1614:	fa 81       	ldd	r31, Y+2	; 0x02
    1616:	80 81       	ld	r24, Z
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	3a 87       	std	Y+10, r19	; 0x0a
    161e:	29 87       	std	Y+9, r18	; 0x09
    1620:	89 85       	ldd	r24, Y+9	; 0x09
    1622:	9a 85       	ldd	r25, Y+10	; 0x0a
    1624:	85 30       	cpi	r24, 0x05	; 5
    1626:	91 05       	cpc	r25, r1
    1628:	64 f4       	brge	.+24     	; 0x1642 <TMR_vStartTimer+0x52>
    162a:	29 85       	ldd	r18, Y+9	; 0x09
    162c:	3a 85       	ldd	r19, Y+10	; 0x0a
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	0c f0       	brlt	.+2      	; 0x1636 <TMR_vStartTimer+0x46>
    1634:	8b c0       	rjmp	.+278    	; 0x174c <TMR_vStartTimer+0x15c>
    1636:	89 85       	ldd	r24, Y+9	; 0x09
    1638:	9a 85       	ldd	r25, Y+10	; 0x0a
    163a:	99 23       	and	r25, r25
    163c:	0c f4       	brge	.+2      	; 0x1640 <TMR_vStartTimer+0x50>
    163e:	81 c1       	rjmp	.+770    	; 0x1942 <TMR_vStartTimer+0x352>
    1640:	07 c0       	rjmp	.+14     	; 0x1650 <TMR_vStartTimer+0x60>
    1642:	29 85       	ldd	r18, Y+9	; 0x09
    1644:	3a 85       	ldd	r19, Y+10	; 0x0a
    1646:	27 30       	cpi	r18, 0x07	; 7
    1648:	31 05       	cpc	r19, r1
    164a:	0c f0       	brlt	.+2      	; 0x164e <TMR_vStartTimer+0x5e>
    164c:	7a c1       	rjmp	.+756    	; 0x1942 <TMR_vStartTimer+0x352>
    164e:	fc c0       	rjmp	.+504    	; 0x1848 <TMR_vStartTimer+0x258>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			switch(TMR->TMR_Prescale){
    1650:	e9 81       	ldd	r30, Y+1	; 0x01
    1652:	fa 81       	ldd	r31, Y+2	; 0x02
    1654:	81 81       	ldd	r24, Z+1	; 0x01
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	38 87       	std	Y+8, r19	; 0x08
    165c:	2f 83       	std	Y+7, r18	; 0x07
    165e:	8f 81       	ldd	r24, Y+7	; 0x07
    1660:	98 85       	ldd	r25, Y+8	; 0x08
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	91 05       	cpc	r25, r1
    1666:	09 f4       	brne	.+2      	; 0x166a <TMR_vStartTimer+0x7a>
    1668:	45 c0       	rjmp	.+138    	; 0x16f4 <TMR_vStartTimer+0x104>
    166a:	2f 81       	ldd	r18, Y+7	; 0x07
    166c:	38 85       	ldd	r19, Y+8	; 0x08
    166e:	24 30       	cpi	r18, 0x04	; 4
    1670:	31 05       	cpc	r19, r1
    1672:	7c f4       	brge	.+30     	; 0x1692 <TMR_vStartTimer+0xa2>
    1674:	8f 81       	ldd	r24, Y+7	; 0x07
    1676:	98 85       	ldd	r25, Y+8	; 0x08
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	91 05       	cpc	r25, r1
    167c:	49 f1       	breq	.+82     	; 0x16d0 <TMR_vStartTimer+0xe0>
    167e:	2f 81       	ldd	r18, Y+7	; 0x07
    1680:	38 85       	ldd	r19, Y+8	; 0x08
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	6c f5       	brge	.+90     	; 0x16e2 <TMR_vStartTimer+0xf2>
    1688:	8f 81       	ldd	r24, Y+7	; 0x07
    168a:	98 85       	ldd	r25, Y+8	; 0x08
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	c1 f0       	breq	.+48     	; 0x16c0 <TMR_vStartTimer+0xd0>
    1690:	58 c1       	rjmp	.+688    	; 0x1942 <TMR_vStartTimer+0x352>
    1692:	2f 81       	ldd	r18, Y+7	; 0x07
    1694:	38 85       	ldd	r19, Y+8	; 0x08
    1696:	25 30       	cpi	r18, 0x05	; 5
    1698:	31 05       	cpc	r19, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <TMR_vStartTimer+0xae>
    169c:	3d c0       	rjmp	.+122    	; 0x1718 <TMR_vStartTimer+0x128>
    169e:	8f 81       	ldd	r24, Y+7	; 0x07
    16a0:	98 85       	ldd	r25, Y+8	; 0x08
    16a2:	85 30       	cpi	r24, 0x05	; 5
    16a4:	91 05       	cpc	r25, r1
    16a6:	7c f1       	brlt	.+94     	; 0x1706 <TMR_vStartTimer+0x116>
    16a8:	2f 81       	ldd	r18, Y+7	; 0x07
    16aa:	38 85       	ldd	r19, Y+8	; 0x08
    16ac:	26 30       	cpi	r18, 0x06	; 6
    16ae:	31 05       	cpc	r19, r1
    16b0:	e1 f1       	breq	.+120    	; 0x172a <TMR_vStartTimer+0x13a>
    16b2:	8f 81       	ldd	r24, Y+7	; 0x07
    16b4:	98 85       	ldd	r25, Y+8	; 0x08
    16b6:	87 30       	cpi	r24, 0x07	; 7
    16b8:	91 05       	cpc	r25, r1
    16ba:	09 f4       	brne	.+2      	; 0x16be <TMR_vStartTimer+0xce>
    16bc:	3f c0       	rjmp	.+126    	; 0x173c <TMR_vStartTimer+0x14c>
    16be:	41 c1       	rjmp	.+642    	; 0x1942 <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR0_REG = (TCCR0_REG&0xF8);
    16c0:	a3 e5       	ldi	r26, 0x53	; 83
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e3 e5       	ldi	r30, 0x53	; 83
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	88 7f       	andi	r24, 0xF8	; 248
    16cc:	8c 93       	st	X, r24
    16ce:	39 c1       	rjmp	.+626    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR0_REG = (TCCR0_REG&0xF8) | 1;
    16d0:	a3 e5       	ldi	r26, 0x53	; 83
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e3 e5       	ldi	r30, 0x53	; 83
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	88 7f       	andi	r24, 0xF8	; 248
    16dc:	81 60       	ori	r24, 0x01	; 1
    16de:	8c 93       	st	X, r24
    16e0:	30 c1       	rjmp	.+608    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR0_REG = (TCCR0_REG&0xF8) | 2;
    16e2:	a3 e5       	ldi	r26, 0x53	; 83
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e3 e5       	ldi	r30, 0x53	; 83
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	88 7f       	andi	r24, 0xF8	; 248
    16ee:	82 60       	ori	r24, 0x02	; 2
    16f0:	8c 93       	st	X, r24
    16f2:	27 c1       	rjmp	.+590    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR0_REG = (TCCR0_REG&0xF8) | 3;
    16f4:	a3 e5       	ldi	r26, 0x53	; 83
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e3 e5       	ldi	r30, 0x53	; 83
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	88 7f       	andi	r24, 0xF8	; 248
    1700:	83 60       	ori	r24, 0x03	; 3
    1702:	8c 93       	st	X, r24
    1704:	1e c1       	rjmp	.+572    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR0_REG = (TCCR0_REG&0xF8) | 4;
    1706:	a3 e5       	ldi	r26, 0x53	; 83
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e3 e5       	ldi	r30, 0x53	; 83
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	88 7f       	andi	r24, 0xF8	; 248
    1712:	84 60       	ori	r24, 0x04	; 4
    1714:	8c 93       	st	X, r24
    1716:	15 c1       	rjmp	.+554    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR0_REG = (TCCR0_REG&0xF8) | 5;
    1718:	a3 e5       	ldi	r26, 0x53	; 83
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e3 e5       	ldi	r30, 0x53	; 83
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	88 7f       	andi	r24, 0xF8	; 248
    1724:	85 60       	ori	r24, 0x05	; 5
    1726:	8c 93       	st	X, r24
    1728:	0c c1       	rjmp	.+536    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_FALLING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 6;
    172a:	a3 e5       	ldi	r26, 0x53	; 83
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e3 e5       	ldi	r30, 0x53	; 83
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	88 7f       	andi	r24, 0xF8	; 248
    1736:	86 60       	ori	r24, 0x06	; 6
    1738:	8c 93       	st	X, r24
    173a:	03 c1       	rjmp	.+518    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_RISING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 7;
    173c:	a3 e5       	ldi	r26, 0x53	; 83
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e3 e5       	ldi	r30, 0x53	; 83
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	87 60       	ori	r24, 0x07	; 7
    1748:	8c 93       	st	X, r24
    174a:	fb c0       	rjmp	.+502    	; 0x1942 <TMR_vStartTimer+0x352>
			}
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			switch(TMR->TMR_Prescale){
    174c:	e9 81       	ldd	r30, Y+1	; 0x01
    174e:	fa 81       	ldd	r31, Y+2	; 0x02
    1750:	81 81       	ldd	r24, Z+1	; 0x01
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	3e 83       	std	Y+6, r19	; 0x06
    1758:	2d 83       	std	Y+5, r18	; 0x05
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	83 30       	cpi	r24, 0x03	; 3
    1760:	91 05       	cpc	r25, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <TMR_vStartTimer+0x176>
    1764:	45 c0       	rjmp	.+138    	; 0x17f0 <TMR_vStartTimer+0x200>
    1766:	2d 81       	ldd	r18, Y+5	; 0x05
    1768:	3e 81       	ldd	r19, Y+6	; 0x06
    176a:	24 30       	cpi	r18, 0x04	; 4
    176c:	31 05       	cpc	r19, r1
    176e:	7c f4       	brge	.+30     	; 0x178e <TMR_vStartTimer+0x19e>
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	9e 81       	ldd	r25, Y+6	; 0x06
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	91 05       	cpc	r25, r1
    1778:	49 f1       	breq	.+82     	; 0x17cc <TMR_vStartTimer+0x1dc>
    177a:	2d 81       	ldd	r18, Y+5	; 0x05
    177c:	3e 81       	ldd	r19, Y+6	; 0x06
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	6c f5       	brge	.+90     	; 0x17de <TMR_vStartTimer+0x1ee>
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	c1 f0       	breq	.+48     	; 0x17bc <TMR_vStartTimer+0x1cc>
    178c:	da c0       	rjmp	.+436    	; 0x1942 <TMR_vStartTimer+0x352>
    178e:	2d 81       	ldd	r18, Y+5	; 0x05
    1790:	3e 81       	ldd	r19, Y+6	; 0x06
    1792:	25 30       	cpi	r18, 0x05	; 5
    1794:	31 05       	cpc	r19, r1
    1796:	09 f4       	brne	.+2      	; 0x179a <TMR_vStartTimer+0x1aa>
    1798:	3d c0       	rjmp	.+122    	; 0x1814 <TMR_vStartTimer+0x224>
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	85 30       	cpi	r24, 0x05	; 5
    17a0:	91 05       	cpc	r25, r1
    17a2:	7c f1       	brlt	.+94     	; 0x1802 <TMR_vStartTimer+0x212>
    17a4:	2d 81       	ldd	r18, Y+5	; 0x05
    17a6:	3e 81       	ldd	r19, Y+6	; 0x06
    17a8:	26 30       	cpi	r18, 0x06	; 6
    17aa:	31 05       	cpc	r19, r1
    17ac:	e1 f1       	breq	.+120    	; 0x1826 <TMR_vStartTimer+0x236>
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	9e 81       	ldd	r25, Y+6	; 0x06
    17b2:	87 30       	cpi	r24, 0x07	; 7
    17b4:	91 05       	cpc	r25, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <TMR_vStartTimer+0x1ca>
    17b8:	3f c0       	rjmp	.+126    	; 0x1838 <TMR_vStartTimer+0x248>
    17ba:	c3 c0       	rjmp	.+390    	; 0x1942 <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR1B_REG = (TCCR1B_REG&0xF8);
    17bc:	ae e4       	ldi	r26, 0x4E	; 78
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	ee e4       	ldi	r30, 0x4E	; 78
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	88 7f       	andi	r24, 0xF8	; 248
    17c8:	8c 93       	st	X, r24
    17ca:	bb c0       	rjmp	.+374    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 1;
    17cc:	ae e4       	ldi	r26, 0x4E	; 78
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ee e4       	ldi	r30, 0x4E	; 78
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	88 7f       	andi	r24, 0xF8	; 248
    17d8:	81 60       	ori	r24, 0x01	; 1
    17da:	8c 93       	st	X, r24
    17dc:	b2 c0       	rjmp	.+356    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 2;
    17de:	ae e4       	ldi	r26, 0x4E	; 78
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	ee e4       	ldi	r30, 0x4E	; 78
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	88 7f       	andi	r24, 0xF8	; 248
    17ea:	82 60       	ori	r24, 0x02	; 2
    17ec:	8c 93       	st	X, r24
    17ee:	a9 c0       	rjmp	.+338    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 3;
    17f0:	ae e4       	ldi	r26, 0x4E	; 78
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	ee e4       	ldi	r30, 0x4E	; 78
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	88 7f       	andi	r24, 0xF8	; 248
    17fc:	83 60       	ori	r24, 0x03	; 3
    17fe:	8c 93       	st	X, r24
    1800:	a0 c0       	rjmp	.+320    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 4;
    1802:	ae e4       	ldi	r26, 0x4E	; 78
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	ee e4       	ldi	r30, 0x4E	; 78
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	88 7f       	andi	r24, 0xF8	; 248
    180e:	84 60       	ori	r24, 0x04	; 4
    1810:	8c 93       	st	X, r24
    1812:	97 c0       	rjmp	.+302    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 5;
    1814:	ae e4       	ldi	r26, 0x4E	; 78
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	ee e4       	ldi	r30, 0x4E	; 78
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	88 7f       	andi	r24, 0xF8	; 248
    1820:	85 60       	ori	r24, 0x05	; 5
    1822:	8c 93       	st	X, r24
    1824:	8e c0       	rjmp	.+284    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_FALLING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 6;
    1826:	ae e4       	ldi	r26, 0x4E	; 78
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	ee e4       	ldi	r30, 0x4E	; 78
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	88 7f       	andi	r24, 0xF8	; 248
    1832:	86 60       	ori	r24, 0x06	; 6
    1834:	8c 93       	st	X, r24
    1836:	85 c0       	rjmp	.+266    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_RISING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 7;
    1838:	ae e4       	ldi	r26, 0x4E	; 78
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	ee e4       	ldi	r30, 0x4E	; 78
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	87 60       	ori	r24, 0x07	; 7
    1844:	8c 93       	st	X, r24
    1846:	7d c0       	rjmp	.+250    	; 0x1942 <TMR_vStartTimer+0x352>
			default: /* Do Nothing */ break;
			}
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			switch(TMR->TMR_Prescale){
    1848:	e9 81       	ldd	r30, Y+1	; 0x01
    184a:	fa 81       	ldd	r31, Y+2	; 0x02
    184c:	81 81       	ldd	r24, Z+1	; 0x01
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	3c 83       	std	Y+4, r19	; 0x04
    1854:	2b 83       	std	Y+3, r18	; 0x03
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	83 30       	cpi	r24, 0x03	; 3
    185c:	91 05       	cpc	r25, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <TMR_vStartTimer+0x272>
    1860:	4e c0       	rjmp	.+156    	; 0x18fe <TMR_vStartTimer+0x30e>
    1862:	2b 81       	ldd	r18, Y+3	; 0x03
    1864:	3c 81       	ldd	r19, Y+4	; 0x04
    1866:	24 30       	cpi	r18, 0x04	; 4
    1868:	31 05       	cpc	r19, r1
    186a:	7c f4       	brge	.+30     	; 0x188a <TMR_vStartTimer+0x29a>
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	91 05       	cpc	r25, r1
    1874:	49 f1       	breq	.+82     	; 0x18c8 <TMR_vStartTimer+0x2d8>
    1876:	2b 81       	ldd	r18, Y+3	; 0x03
    1878:	3c 81       	ldd	r19, Y+4	; 0x04
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	6c f5       	brge	.+90     	; 0x18da <TMR_vStartTimer+0x2ea>
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	c1 f0       	breq	.+48     	; 0x18b8 <TMR_vStartTimer+0x2c8>
    1888:	5c c0       	rjmp	.+184    	; 0x1942 <TMR_vStartTimer+0x352>
    188a:	2b 81       	ldd	r18, Y+3	; 0x03
    188c:	3c 81       	ldd	r19, Y+4	; 0x04
    188e:	25 30       	cpi	r18, 0x05	; 5
    1890:	31 05       	cpc	r19, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <TMR_vStartTimer+0x2a6>
    1894:	4f c0       	rjmp	.+158    	; 0x1934 <TMR_vStartTimer+0x344>
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	85 30       	cpi	r24, 0x05	; 5
    189c:	91 05       	cpc	r25, r1
    189e:	0c f4       	brge	.+2      	; 0x18a2 <TMR_vStartTimer+0x2b2>
    18a0:	40 c0       	rjmp	.+128    	; 0x1922 <TMR_vStartTimer+0x332>
    18a2:	2b 81       	ldd	r18, Y+3	; 0x03
    18a4:	3c 81       	ldd	r19, Y+4	; 0x04
    18a6:	28 30       	cpi	r18, 0x08	; 8
    18a8:	31 05       	cpc	r19, r1
    18aa:	01 f1       	breq	.+64     	; 0x18ec <TMR_vStartTimer+0x2fc>
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	89 30       	cpi	r24, 0x09	; 9
    18b2:	91 05       	cpc	r25, r1
    18b4:	69 f1       	breq	.+90     	; 0x1910 <TMR_vStartTimer+0x320>
    18b6:	45 c0       	rjmp	.+138    	; 0x1942 <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR2_REG = (TCCR2_REG&0xF8);
    18b8:	a5 e4       	ldi	r26, 0x45	; 69
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e5 e4       	ldi	r30, 0x45	; 69
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	88 7f       	andi	r24, 0xF8	; 248
    18c4:	8c 93       	st	X, r24
    18c6:	3d c0       	rjmp	.+122    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR2_REG = (TCCR2_REG&0xF8) | 1;
    18c8:	a5 e4       	ldi	r26, 0x45	; 69
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e4       	ldi	r30, 0x45	; 69
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	88 7f       	andi	r24, 0xF8	; 248
    18d4:	81 60       	ori	r24, 0x01	; 1
    18d6:	8c 93       	st	X, r24
    18d8:	34 c0       	rjmp	.+104    	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR2_REG = (TCCR2_REG&0xF8) | 2;
    18da:	a5 e4       	ldi	r26, 0x45	; 69
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e5 e4       	ldi	r30, 0x45	; 69
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	88 7f       	andi	r24, 0xF8	; 248
    18e6:	82 60       	ori	r24, 0x02	; 2
    18e8:	8c 93       	st	X, r24
    18ea:	2b c0       	rjmp	.+86     	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_32:
				TCCR2_REG = (TCCR2_REG&0xF8) | 3;
    18ec:	a5 e4       	ldi	r26, 0x45	; 69
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e5 e4       	ldi	r30, 0x45	; 69
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	88 7f       	andi	r24, 0xF8	; 248
    18f8:	83 60       	ori	r24, 0x03	; 3
    18fa:	8c 93       	st	X, r24
    18fc:	22 c0       	rjmp	.+68     	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR2_REG = (TCCR2_REG&0xF8) | 4;
    18fe:	a5 e4       	ldi	r26, 0x45	; 69
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e5 e4       	ldi	r30, 0x45	; 69
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	88 7f       	andi	r24, 0xF8	; 248
    190a:	84 60       	ori	r24, 0x04	; 4
    190c:	8c 93       	st	X, r24
    190e:	19 c0       	rjmp	.+50     	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_128:
				TCCR2_REG = (TCCR2_REG&0xF8) | 5;
    1910:	a5 e4       	ldi	r26, 0x45	; 69
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e5 e4       	ldi	r30, 0x45	; 69
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	88 7f       	andi	r24, 0xF8	; 248
    191c:	85 60       	ori	r24, 0x05	; 5
    191e:	8c 93       	st	X, r24
    1920:	10 c0       	rjmp	.+32     	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR2_REG = (TCCR2_REG&0xF8) | 6;
    1922:	a5 e4       	ldi	r26, 0x45	; 69
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e5 e4       	ldi	r30, 0x45	; 69
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	88 7f       	andi	r24, 0xF8	; 248
    192e:	86 60       	ori	r24, 0x06	; 6
    1930:	8c 93       	st	X, r24
    1932:	07 c0       	rjmp	.+14     	; 0x1942 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR2_REG = (TCCR2_REG&0xF8) | 7;
    1934:	a5 e4       	ldi	r26, 0x45	; 69
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e5 e4       	ldi	r30, 0x45	; 69
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	87 60       	ori	r24, 0x07	; 7
    1940:	8c 93       	st	X, r24
			}
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    1942:	2a 96       	adiw	r28, 0x0a	; 10
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <TMR_vStop>:

void TMR_vStop(const TMR_cfg_t *TMR){
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	00 d0       	rcall	.+0      	; 0x195a <TMR_vStop+0x6>
    195a:	00 d0       	rcall	.+0      	; 0x195c <TMR_vStop+0x8>
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	9a 81       	ldd	r25, Y+2	; 0x02
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	99 f1       	breq	.+102    	; 0x19d2 <TMR_vStop+0x7e>
		switch(TMR->TMR_TimerChannel){
    196c:	e9 81       	ldd	r30, Y+1	; 0x01
    196e:	fa 81       	ldd	r31, Y+2	; 0x02
    1970:	80 81       	ld	r24, Z
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	3c 83       	std	Y+4, r19	; 0x04
    1978:	2b 83       	std	Y+3, r18	; 0x03
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	85 30       	cpi	r24, 0x05	; 5
    1980:	91 05       	cpc	r25, r1
    1982:	54 f4       	brge	.+20     	; 0x1998 <TMR_vStop+0x44>
    1984:	2b 81       	ldd	r18, Y+3	; 0x03
    1986:	3c 81       	ldd	r19, Y+4	; 0x04
    1988:	22 30       	cpi	r18, 0x02	; 2
    198a:	31 05       	cpc	r19, r1
    198c:	9c f4       	brge	.+38     	; 0x19b4 <TMR_vStop+0x60>
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	99 23       	and	r25, r25
    1994:	f4 f0       	brlt	.+60     	; 0x19d2 <TMR_vStop+0x7e>
    1996:	06 c0       	rjmp	.+12     	; 0x19a4 <TMR_vStop+0x50>
    1998:	2b 81       	ldd	r18, Y+3	; 0x03
    199a:	3c 81       	ldd	r19, Y+4	; 0x04
    199c:	27 30       	cpi	r18, 0x07	; 7
    199e:	31 05       	cpc	r19, r1
    19a0:	c4 f4       	brge	.+48     	; 0x19d2 <TMR_vStop+0x7e>
    19a2:	10 c0       	rjmp	.+32     	; 0x19c4 <TMR_vStop+0x70>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			TCCR0_REG &= 0xF8;
    19a4:	a3 e5       	ldi	r26, 0x53	; 83
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e3 e5       	ldi	r30, 0x53	; 83
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	88 7f       	andi	r24, 0xF8	; 248
    19b0:	8c 93       	st	X, r24
    19b2:	0f c0       	rjmp	.+30     	; 0x19d2 <TMR_vStop+0x7e>
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			TCCR1B_REG &= 0xF8;
    19b4:	ae e4       	ldi	r26, 0x4E	; 78
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	ee e4       	ldi	r30, 0x4E	; 78
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	88 7f       	andi	r24, 0xF8	; 248
    19c0:	8c 93       	st	X, r24
    19c2:	07 c0       	rjmp	.+14     	; 0x19d2 <TMR_vStop+0x7e>
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			TCCR2_REG &= 0xF8;
    19c4:	a5 e4       	ldi	r26, 0x45	; 69
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e5 e4       	ldi	r30, 0x45	; 69
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	88 7f       	andi	r24, 0xF8	; 248
    19d0:	8c 93       	st	X, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <TMR_vSetICRValue>:

void TMR_vSetICRValue(const TMR_cfg_t *TMR, u16 Copy_u16ICRValue){
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <TMR_vSetICRValue+0x6>
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <TMR_vSetICRValue+0x8>
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	9a 83       	std	Y+2, r25	; 0x02
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	7c 83       	std	Y+4, r23	; 0x04
    19f2:	6b 83       	std	Y+3, r22	; 0x03
	if(TMR != NULL){
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	9a 81       	ldd	r25, Y+2	; 0x02
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	79 f0       	breq	.+30     	; 0x1a1a <TMR_vSetICRValue+0x3a>
		switch(TMR->TMR_TimerChannel){
    19fc:	e9 81       	ldd	r30, Y+1	; 0x01
    19fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1a00:	80 81       	ld	r24, Z
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	02 97       	sbiw	r24, 0x02	; 2
    1a08:	83 30       	cpi	r24, 0x03	; 3
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	30 f4       	brcc	.+12     	; 0x1a1a <TMR_vSetICRValue+0x3a>

		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			ICR1_REG = Copy_u16ICRValue;
    1a0e:	e6 e4       	ldi	r30, 0x46	; 70
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <TMR_vSetOCRValue>:

void TMR_vSetOCRValue(const TMR_cfg_t *TMR, u16 Copy_u16OCRValue){
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <TMR_vSetOCRValue+0x6>
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <TMR_vSetOCRValue+0x8>
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <TMR_vSetOCRValue+0xa>
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	7c 83       	std	Y+4, r23	; 0x04
    1a3c:	6b 83       	std	Y+3, r22	; 0x03
	if(TMR != NULL){
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	61 f1       	breq	.+88     	; 0x1a9e <TMR_vSetOCRValue+0x76>
		switch(TMR->TMR_TimerChannel){
    1a46:	e9 81       	ldd	r30, Y+1	; 0x01
    1a48:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4a:	80 81       	ld	r24, Z
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	3e 83       	std	Y+6, r19	; 0x06
    1a52:	2d 83       	std	Y+5, r18	; 0x05
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	85 30       	cpi	r24, 0x05	; 5
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	54 f4       	brge	.+20     	; 0x1a72 <TMR_vSetOCRValue+0x4a>
    1a5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a60:	3e 81       	ldd	r19, Y+6	; 0x06
    1a62:	22 30       	cpi	r18, 0x02	; 2
    1a64:	31 05       	cpc	r19, r1
    1a66:	84 f4       	brge	.+32     	; 0x1a88 <TMR_vSetOCRValue+0x60>
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6c:	99 23       	and	r25, r25
    1a6e:	bc f0       	brlt	.+46     	; 0x1a9e <TMR_vSetOCRValue+0x76>
    1a70:	06 c0       	rjmp	.+12     	; 0x1a7e <TMR_vSetOCRValue+0x56>
    1a72:	2d 81       	ldd	r18, Y+5	; 0x05
    1a74:	3e 81       	ldd	r19, Y+6	; 0x06
    1a76:	27 30       	cpi	r18, 0x07	; 7
    1a78:	31 05       	cpc	r19, r1
    1a7a:	8c f4       	brge	.+34     	; 0x1a9e <TMR_vSetOCRValue+0x76>
    1a7c:	0c c0       	rjmp	.+24     	; 0x1a96 <TMR_vSetOCRValue+0x6e>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			OCR0_REG = (u8)Copy_u16OCRValue;
    1a7e:	ec e5       	ldi	r30, 0x5C	; 92
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	80 83       	st	Z, r24
    1a86:	0b c0       	rjmp	.+22     	; 0x1a9e <TMR_vSetOCRValue+0x76>
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			OCR1A_REG = Copy_u16OCRValue;
    1a88:	ea e4       	ldi	r30, 0x4A	; 74
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	91 83       	std	Z+1, r25	; 0x01
    1a92:	80 83       	st	Z, r24
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <TMR_vSetOCRValue+0x76>
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			OCR2_REG = (u8)Copy_u16OCRValue;
    1a96:	e3 e4       	ldi	r30, 0x43	; 67
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    1a9e:	26 96       	adiw	r28, 0x06	; 6
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void){
    1ab0:	1f 92       	push	r1
    1ab2:	0f 92       	push	r0
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	0f 92       	push	r0
    1ab8:	11 24       	eor	r1, r1
    1aba:	2f 93       	push	r18
    1abc:	3f 93       	push	r19
    1abe:	4f 93       	push	r20
    1ac0:	5f 93       	push	r21
    1ac2:	6f 93       	push	r22
    1ac4:	7f 93       	push	r23
    1ac6:	8f 93       	push	r24
    1ac8:	9f 93       	push	r25
    1aca:	af 93       	push	r26
    1acc:	bf 93       	push	r27
    1ace:	ef 93       	push	r30
    1ad0:	ff 93       	push	r31
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <__vector_5+0x28>
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
	static u8 timer2_inner_counter = 0;
	static u8 timer2_seconds = 10;
	u8 preload_value = 124;
    1adc:	8c e7       	ldi	r24, 0x7C	; 124
    1ade:	8a 83       	std	Y+2, r24	; 0x02
	u8 overflow_max = 31;
    1ae0:	8f e1       	ldi	r24, 0x1F	; 31
    1ae2:	89 83       	std	Y+1, r24	; 0x01
	timer2_inner_counter++;
    1ae4:	80 91 fb 06 	lds	r24, 0x06FB
    1ae8:	8f 5f       	subi	r24, 0xFF	; 255
    1aea:	80 93 fb 06 	sts	0x06FB, r24
	if(timer2_inner_counter == overflow_max){
    1aee:	90 91 fb 06 	lds	r25, 0x06FB
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	98 17       	cp	r25, r24
    1af6:	a1 f4       	brne	.+40     	; 0x1b20 <__vector_5+0x70>
		UART_vSendData(timer2_seconds+47);
    1af8:	80 91 2b 06 	lds	r24, 0x062B
    1afc:	81 5d       	subi	r24, 0xD1	; 209
    1afe:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_vSendData>
		UART_vSendString((u8*)" seconds remaining!\n\r");
    1b02:	80 e6       	ldi	r24, 0x60	; 96
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
		timer2_inner_counter = 0;
    1b0a:	10 92 fb 06 	sts	0x06FB, r1
		TCNT2_REG = preload_value;
    1b0e:	e4 e4       	ldi	r30, 0x44	; 68
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	80 83       	st	Z, r24
		timer2_seconds--;
    1b16:	80 91 2b 06 	lds	r24, 0x062B
    1b1a:	81 50       	subi	r24, 0x01	; 1
    1b1c:	80 93 2b 06 	sts	0x062B, r24
	}
	if(timer2_seconds == 0){
    1b20:	80 91 2b 06 	lds	r24, 0x062B
    1b24:	88 23       	and	r24, r24
    1b26:	71 f4       	brne	.+28     	; 0x1b44 <__vector_5+0x94>
		UART_vSendString((u8*)"\n\r\n\r");
    1b28:	86 e7       	ldi	r24, 0x76	; 118
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
		timer2_seconds = 10;
    1b30:	8a e0       	ldi	r24, 0x0A	; 10
    1b32:	80 93 2b 06 	sts	0x062B, r24
		TMR_vStop(&TIMER2);
    1b36:	85 ef       	ldi	r24, 0xF5	; 245
    1b38:	96 e0       	ldi	r25, 0x06	; 6
    1b3a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TMR_vStop>
		timer2_flag = FLAG_ON;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	80 93 fa 06 	sts	0x06FA, r24
	}
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	ff 91       	pop	r31
    1b4e:	ef 91       	pop	r30
    1b50:	bf 91       	pop	r27
    1b52:	af 91       	pop	r26
    1b54:	9f 91       	pop	r25
    1b56:	8f 91       	pop	r24
    1b58:	7f 91       	pop	r23
    1b5a:	6f 91       	pop	r22
    1b5c:	5f 91       	pop	r21
    1b5e:	4f 91       	pop	r20
    1b60:	3f 91       	pop	r19
    1b62:	2f 91       	pop	r18
    1b64:	0f 90       	pop	r0
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	0f 90       	pop	r0
    1b6a:	1f 90       	pop	r1
    1b6c:	18 95       	reti

00001b6e <PWM_vInit>:
/*************** Version : 1.0            **********************/
/***************************************************************/

#include "PWM_interface.h"

void PWM_vInit(const PWM_cfg_t *PWM){
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <PWM_vInit+0x6>
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <PWM_vInit+0x8>
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <PWM_vInit+0x1a>
    1b86:	2d c4       	rjmp	.+2138   	; 0x23e2 <PWM_vInit+0x874>
		/* Set PWM Mode */
		switch(PWM->PWM_TimerChannel){
    1b88:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8c:	80 81       	ld	r24, Z
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	3c 83       	std	Y+4, r19	; 0x04
    1b94:	2b 83       	std	Y+3, r18	; 0x03
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	87 30       	cpi	r24, 0x07	; 7
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <PWM_vInit+0x34>
    1ba0:	04 c2       	rjmp	.+1032   	; 0x1faa <PWM_vInit+0x43c>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	28 30       	cpi	r18, 0x08	; 8
    1ba8:	31 05       	cpc	r19, r1
    1baa:	54 f5       	brge	.+84     	; 0x1c00 <PWM_vInit+0x92>
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	83 30       	cpi	r24, 0x03	; 3
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <PWM_vInit+0x4a>
    1bb6:	00 c1       	rjmp	.+512    	; 0x1db8 <PWM_vInit+0x24a>
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	24 30       	cpi	r18, 0x04	; 4
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	94 f4       	brge	.+36     	; 0x1be6 <PWM_vInit+0x78>
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	91 05       	cpc	r25, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <PWM_vInit+0x60>
    1bcc:	81 c0       	rjmp	.+258    	; 0x1cd0 <PWM_vInit+0x162>
    1bce:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd2:	22 30       	cpi	r18, 0x02	; 2
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	0c f0       	brlt	.+2      	; 0x1bda <PWM_vInit+0x6c>
    1bd8:	b1 c0       	rjmp	.+354    	; 0x1d3c <PWM_vInit+0x1ce>
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <PWM_vInit+0x76>
    1be2:	3f c0       	rjmp	.+126    	; 0x1c62 <PWM_vInit+0xf4>
    1be4:	fe c3       	rjmp	.+2044   	; 0x23e2 <PWM_vInit+0x874>
    1be6:	2b 81       	ldd	r18, Y+3	; 0x03
    1be8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bea:	25 30       	cpi	r18, 0x05	; 5
    1bec:	31 05       	cpc	r19, r1
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <PWM_vInit+0x84>
    1bf0:	5e c1       	rjmp	.+700    	; 0x1eae <PWM_vInit+0x340>
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	86 30       	cpi	r24, 0x06	; 6
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	0c f0       	brlt	.+2      	; 0x1bfe <PWM_vInit+0x90>
    1bfc:	97 c1       	rjmp	.+814    	; 0x1f2c <PWM_vInit+0x3be>
    1bfe:	1a c1       	rjmp	.+564    	; 0x1e34 <PWM_vInit+0x2c6>
    1c00:	2b 81       	ldd	r18, Y+3	; 0x03
    1c02:	3c 81       	ldd	r19, Y+4	; 0x04
    1c04:	2b 30       	cpi	r18, 0x0B	; 11
    1c06:	31 05       	cpc	r19, r1
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <PWM_vInit+0x9e>
    1c0a:	c9 c2       	rjmp	.+1426   	; 0x219e <PWM_vInit+0x630>
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	8c 30       	cpi	r24, 0x0C	; 12
    1c12:	91 05       	cpc	r25, r1
    1c14:	6c f4       	brge	.+26     	; 0x1c30 <PWM_vInit+0xc2>
    1c16:	2b 81       	ldd	r18, Y+3	; 0x03
    1c18:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1a:	29 30       	cpi	r18, 0x09	; 9
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <PWM_vInit+0xb4>
    1c20:	40 c2       	rjmp	.+1152   	; 0x20a2 <PWM_vInit+0x534>
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	8a 30       	cpi	r24, 0x0A	; 10
    1c28:	91 05       	cpc	r25, r1
    1c2a:	0c f0       	brlt	.+2      	; 0x1c2e <PWM_vInit+0xc0>
    1c2c:	79 c2       	rjmp	.+1266   	; 0x2120 <PWM_vInit+0x5b2>
    1c2e:	fb c1       	rjmp	.+1014   	; 0x2026 <PWM_vInit+0x4b8>
    1c30:	2b 81       	ldd	r18, Y+3	; 0x03
    1c32:	3c 81       	ldd	r19, Y+4	; 0x04
    1c34:	2d 30       	cpi	r18, 0x0D	; 13
    1c36:	31 05       	cpc	r19, r1
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <PWM_vInit+0xce>
    1c3a:	2d c3       	rjmp	.+1626   	; 0x2296 <PWM_vInit+0x728>
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	8d 30       	cpi	r24, 0x0D	; 13
    1c42:	91 05       	cpc	r25, r1
    1c44:	0c f4       	brge	.+2      	; 0x1c48 <PWM_vInit+0xda>
    1c46:	e9 c2       	rjmp	.+1490   	; 0x221a <PWM_vInit+0x6ac>
    1c48:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4c:	2e 30       	cpi	r18, 0x0E	; 14
    1c4e:	31 05       	cpc	r19, r1
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <PWM_vInit+0xe6>
    1c52:	5e c3       	rjmp	.+1724   	; 0x2310 <PWM_vInit+0x7a2>
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	8f 30       	cpi	r24, 0x0F	; 15
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <PWM_vInit+0xf2>
    1c5e:	8e c3       	rjmp	.+1820   	; 0x237c <PWM_vInit+0x80e>
    1c60:	c0 c3       	rjmp	.+1920   	; 0x23e2 <PWM_vInit+0x874>
		case TIMER0_PhaseCorrect:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x40;
    1c62:	a3 e5       	ldi	r26, 0x53	; 83
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e3 e5       	ldi	r30, 0x53	; 83
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	87 7b       	andi	r24, 0xB7	; 183
    1c6e:	80 64       	ori	r24, 0x40	; 64
    1c70:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	41 f4       	brne	.+16     	; 0x1c8c <PWM_vInit+0x11e>
				TIMSK_REG |= 0x03;
    1c7c:	a9 e5       	ldi	r26, 0x59	; 89
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e9 e5       	ldi	r30, 0x59	; 89
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	83 60       	ori	r24, 0x03	; 3
    1c88:	8c 93       	st	X, r24
    1c8a:	ab c3       	rjmp	.+1878   	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	88 23       	and	r24, r24
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <PWM_vInit+0x12a>
    1c96:	a5 c3       	rjmp	.+1866   	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1c98:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9c:	83 81       	ldd	r24, Z+3	; 0x03
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	49 f4       	brne	.+18     	; 0x1cb4 <PWM_vInit+0x146>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    1ca2:	a3 e5       	ldi	r26, 0x53	; 83
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e3 e5       	ldi	r30, 0x53	; 83
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	8f 7c       	andi	r24, 0xCF	; 207
    1cae:	80 62       	ori	r24, 0x20	; 32
    1cb0:	8c 93       	st	X, r24
    1cb2:	97 c3       	rjmp	.+1838   	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb8:	83 81       	ldd	r24, Z+3	; 0x03
    1cba:	88 23       	and	r24, r24
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <PWM_vInit+0x152>
    1cbe:	91 c3       	rjmp	.+1826   	; 0x23e2 <PWM_vInit+0x874>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    1cc0:	a3 e5       	ldi	r26, 0x53	; 83
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e3 e5       	ldi	r30, 0x53	; 83
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	80 63       	ori	r24, 0x30	; 48
    1ccc:	8c 93       	st	X, r24
    1cce:	89 c3       	rjmp	.+1810   	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER0_FastPWM:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x48;
    1cd0:	a3 e5       	ldi	r26, 0x53	; 83
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e3 e5       	ldi	r30, 0x53	; 83
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	88 64       	ori	r24, 0x48	; 72
    1cdc:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1cde:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	41 f4       	brne	.+16     	; 0x1cf8 <PWM_vInit+0x18a>
				TIMSK_REG |= 0x03;
    1ce8:	a9 e5       	ldi	r26, 0x59	; 89
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e9 e5       	ldi	r30, 0x59	; 89
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	83 60       	ori	r24, 0x03	; 3
    1cf4:	8c 93       	st	X, r24
    1cf6:	75 c3       	rjmp	.+1770   	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfc:	82 81       	ldd	r24, Z+2	; 0x02
    1cfe:	88 23       	and	r24, r24
    1d00:	09 f0       	breq	.+2      	; 0x1d04 <PWM_vInit+0x196>
    1d02:	6f c3       	rjmp	.+1758   	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1d04:	e9 81       	ldd	r30, Y+1	; 0x01
    1d06:	fa 81       	ldd	r31, Y+2	; 0x02
    1d08:	83 81       	ldd	r24, Z+3	; 0x03
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	49 f4       	brne	.+18     	; 0x1d20 <PWM_vInit+0x1b2>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    1d0e:	a3 e5       	ldi	r26, 0x53	; 83
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e3 e5       	ldi	r30, 0x53	; 83
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	8f 7c       	andi	r24, 0xCF	; 207
    1d1a:	80 62       	ori	r24, 0x20	; 32
    1d1c:	8c 93       	st	X, r24
    1d1e:	61 c3       	rjmp	.+1730   	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1d20:	e9 81       	ldd	r30, Y+1	; 0x01
    1d22:	fa 81       	ldd	r31, Y+2	; 0x02
    1d24:	83 81       	ldd	r24, Z+3	; 0x03
    1d26:	88 23       	and	r24, r24
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <PWM_vInit+0x1be>
    1d2a:	5b c3       	rjmp	.+1718   	; 0x23e2 <PWM_vInit+0x874>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    1d2c:	a3 e5       	ldi	r26, 0x53	; 83
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e3 e5       	ldi	r30, 0x53	; 83
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	80 63       	ori	r24, 0x30	; 48
    1d38:	8c 93       	st	X, r24
    1d3a:	53 c3       	rjmp	.+1702   	; 0x23e2 <PWM_vInit+0x874>
			/*
			 * WGM10 WGM11 bit 0,1 in TCCR1A
			 * WGM12 WGM13 bit 3,4 in TCCR1B
			 */
		case TIMER1_Phase8:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    1d3c:	af e4       	ldi	r26, 0x4F	; 79
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	ef e4       	ldi	r30, 0x4F	; 79
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	8c 7f       	andi	r24, 0xFC	; 252
    1d48:	81 60       	ori	r24, 0x01	; 1
    1d4a:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    1d4c:	ae e4       	ldi	r26, 0x4E	; 78
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ee e4       	ldi	r30, 0x4E	; 78
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	87 7e       	andi	r24, 0xE7	; 231
    1d58:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1d5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	81 30       	cpi	r24, 0x01	; 1
    1d62:	41 f4       	brne	.+16     	; 0x1d74 <PWM_vInit+0x206>
				TIMSK_REG |= 0x3C;
    1d64:	a9 e5       	ldi	r26, 0x59	; 89
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e9 e5       	ldi	r30, 0x59	; 89
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	8c 63       	ori	r24, 0x3C	; 60
    1d70:	8c 93       	st	X, r24
    1d72:	37 c3       	rjmp	.+1646   	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	88 23       	and	r24, r24
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <PWM_vInit+0x212>
    1d7e:	31 c3       	rjmp	.+1634   	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1d80:	e9 81       	ldd	r30, Y+1	; 0x01
    1d82:	fa 81       	ldd	r31, Y+2	; 0x02
    1d84:	83 81       	ldd	r24, Z+3	; 0x03
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	49 f4       	brne	.+18     	; 0x1d9c <PWM_vInit+0x22e>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1d8a:	af e4       	ldi	r26, 0x4F	; 79
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ef e4       	ldi	r30, 0x4F	; 79
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	8f 7c       	andi	r24, 0xCF	; 207
    1d96:	80 62       	ori	r24, 0x20	; 32
    1d98:	8c 93       	st	X, r24
    1d9a:	23 c3       	rjmp	.+1606   	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1d9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1da0:	83 81       	ldd	r24, Z+3	; 0x03
    1da2:	88 23       	and	r24, r24
    1da4:	09 f0       	breq	.+2      	; 0x1da8 <PWM_vInit+0x23a>
    1da6:	1d c3       	rjmp	.+1594   	; 0x23e2 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1da8:	af e4       	ldi	r26, 0x4F	; 79
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	ef e4       	ldi	r30, 0x4F	; 79
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	80 63       	ori	r24, 0x30	; 48
    1db4:	8c 93       	st	X, r24
    1db6:	15 c3       	rjmp	.+1578   	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Phase9:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    1db8:	af e4       	ldi	r26, 0x4F	; 79
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	ef e4       	ldi	r30, 0x4F	; 79
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8c 7f       	andi	r24, 0xFC	; 252
    1dc4:	82 60       	ori	r24, 0x02	; 2
    1dc6:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    1dc8:	ae e4       	ldi	r26, 0x4E	; 78
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	ee e4       	ldi	r30, 0x4E	; 78
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	87 7e       	andi	r24, 0xE7	; 231
    1dd4:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1dd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	41 f4       	brne	.+16     	; 0x1df0 <PWM_vInit+0x282>
				TIMSK_REG |= 0x3C;
    1de0:	a9 e5       	ldi	r26, 0x59	; 89
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e9 e5       	ldi	r30, 0x59	; 89
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	8c 63       	ori	r24, 0x3C	; 60
    1dec:	8c 93       	st	X, r24
    1dee:	f9 c2       	rjmp	.+1522   	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1df0:	e9 81       	ldd	r30, Y+1	; 0x01
    1df2:	fa 81       	ldd	r31, Y+2	; 0x02
    1df4:	82 81       	ldd	r24, Z+2	; 0x02
    1df6:	88 23       	and	r24, r24
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <PWM_vInit+0x28e>
    1dfa:	f3 c2       	rjmp	.+1510   	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1dfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1e00:	83 81       	ldd	r24, Z+3	; 0x03
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	49 f4       	brne	.+18     	; 0x1e18 <PWM_vInit+0x2aa>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1e06:	af e4       	ldi	r26, 0x4F	; 79
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	ef e4       	ldi	r30, 0x4F	; 79
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	8f 7c       	andi	r24, 0xCF	; 207
    1e12:	80 62       	ori	r24, 0x20	; 32
    1e14:	8c 93       	st	X, r24
    1e16:	e5 c2       	rjmp	.+1482   	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1e18:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1c:	83 81       	ldd	r24, Z+3	; 0x03
    1e1e:	88 23       	and	r24, r24
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <PWM_vInit+0x2b6>
    1e22:	df c2       	rjmp	.+1470   	; 0x23e2 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1e24:	af e4       	ldi	r26, 0x4F	; 79
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	ef e4       	ldi	r30, 0x4F	; 79
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	80 63       	ori	r24, 0x30	; 48
    1e30:	8c 93       	st	X, r24
    1e32:	d7 c2       	rjmp	.+1454   	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Phase10:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    1e34:	af e4       	ldi	r26, 0x4F	; 79
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	ef e4       	ldi	r30, 0x4F	; 79
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	83 60       	ori	r24, 0x03	; 3
    1e40:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    1e42:	ae e4       	ldi	r26, 0x4E	; 78
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	ee e4       	ldi	r30, 0x4E	; 78
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	87 7e       	andi	r24, 0xE7	; 231
    1e4e:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1e50:	e9 81       	ldd	r30, Y+1	; 0x01
    1e52:	fa 81       	ldd	r31, Y+2	; 0x02
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	81 30       	cpi	r24, 0x01	; 1
    1e58:	41 f4       	brne	.+16     	; 0x1e6a <PWM_vInit+0x2fc>
				TIMSK_REG |= 0x3C;
    1e5a:	a9 e5       	ldi	r26, 0x59	; 89
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e9 e5       	ldi	r30, 0x59	; 89
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8c 63       	ori	r24, 0x3C	; 60
    1e66:	8c 93       	st	X, r24
    1e68:	bc c2       	rjmp	.+1400   	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1e6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	88 23       	and	r24, r24
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <PWM_vInit+0x308>
    1e74:	b6 c2       	rjmp	.+1388   	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1e76:	e9 81       	ldd	r30, Y+1	; 0x01
    1e78:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7a:	83 81       	ldd	r24, Z+3	; 0x03
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	49 f4       	brne	.+18     	; 0x1e92 <PWM_vInit+0x324>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1e80:	af e4       	ldi	r26, 0x4F	; 79
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	ef e4       	ldi	r30, 0x4F	; 79
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	8f 7c       	andi	r24, 0xCF	; 207
    1e8c:	80 62       	ori	r24, 0x20	; 32
    1e8e:	8c 93       	st	X, r24
    1e90:	a8 c2       	rjmp	.+1360   	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1e92:	e9 81       	ldd	r30, Y+1	; 0x01
    1e94:	fa 81       	ldd	r31, Y+2	; 0x02
    1e96:	83 81       	ldd	r24, Z+3	; 0x03
    1e98:	88 23       	and	r24, r24
    1e9a:	09 f0       	breq	.+2      	; 0x1e9e <PWM_vInit+0x330>
    1e9c:	a2 c2       	rjmp	.+1348   	; 0x23e2 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1e9e:	af e4       	ldi	r26, 0x4F	; 79
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	ef e4       	ldi	r30, 0x4F	; 79
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	80 63       	ori	r24, 0x30	; 48
    1eaa:	8c 93       	st	X, r24
    1eac:	9a c2       	rjmp	.+1332   	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast8:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    1eae:	af e4       	ldi	r26, 0x4F	; 79
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	ef e4       	ldi	r30, 0x4F	; 79
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	8c 7f       	andi	r24, 0xFC	; 252
    1eba:	81 60       	ori	r24, 0x01	; 1
    1ebc:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    1ebe:	ae e4       	ldi	r26, 0x4E	; 78
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	ee e4       	ldi	r30, 0x4E	; 78
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	87 7e       	andi	r24, 0xE7	; 231
    1eca:	88 60       	ori	r24, 0x08	; 8
    1ecc:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1ece:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	41 f4       	brne	.+16     	; 0x1ee8 <PWM_vInit+0x37a>
				TIMSK_REG |= 0x3C;
    1ed8:	a9 e5       	ldi	r26, 0x59	; 89
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e9 e5       	ldi	r30, 0x59	; 89
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8c 63       	ori	r24, 0x3C	; 60
    1ee4:	8c 93       	st	X, r24
    1ee6:	7d c2       	rjmp	.+1274   	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eea:	fa 81       	ldd	r31, Y+2	; 0x02
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	88 23       	and	r24, r24
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <PWM_vInit+0x386>
    1ef2:	77 c2       	rjmp	.+1262   	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef8:	83 81       	ldd	r24, Z+3	; 0x03
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	49 f4       	brne	.+18     	; 0x1f10 <PWM_vInit+0x3a2>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1efe:	af e4       	ldi	r26, 0x4F	; 79
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	ef e4       	ldi	r30, 0x4F	; 79
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	8f 7c       	andi	r24, 0xCF	; 207
    1f0a:	80 62       	ori	r24, 0x20	; 32
    1f0c:	8c 93       	st	X, r24
    1f0e:	69 c2       	rjmp	.+1234   	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1f10:	e9 81       	ldd	r30, Y+1	; 0x01
    1f12:	fa 81       	ldd	r31, Y+2	; 0x02
    1f14:	83 81       	ldd	r24, Z+3	; 0x03
    1f16:	88 23       	and	r24, r24
    1f18:	09 f0       	breq	.+2      	; 0x1f1c <PWM_vInit+0x3ae>
    1f1a:	63 c2       	rjmp	.+1222   	; 0x23e2 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1f1c:	af e4       	ldi	r26, 0x4F	; 79
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	ef e4       	ldi	r30, 0x4F	; 79
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	80 63       	ori	r24, 0x30	; 48
    1f28:	8c 93       	st	X, r24
    1f2a:	5b c2       	rjmp	.+1206   	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast9:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    1f2c:	af e4       	ldi	r26, 0x4F	; 79
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ef e4       	ldi	r30, 0x4F	; 79
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	8c 7f       	andi	r24, 0xFC	; 252
    1f38:	82 60       	ori	r24, 0x02	; 2
    1f3a:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    1f3c:	ae e4       	ldi	r26, 0x4E	; 78
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	ee e4       	ldi	r30, 0x4E	; 78
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	87 7e       	andi	r24, 0xE7	; 231
    1f48:	88 60       	ori	r24, 0x08	; 8
    1f4a:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	41 f4       	brne	.+16     	; 0x1f66 <PWM_vInit+0x3f8>
				TIMSK_REG |= 0x3C;
    1f56:	a9 e5       	ldi	r26, 0x59	; 89
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e9 e5       	ldi	r30, 0x59	; 89
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	8c 63       	ori	r24, 0x3C	; 60
    1f62:	8c 93       	st	X, r24
    1f64:	3e c2       	rjmp	.+1148   	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1f66:	e9 81       	ldd	r30, Y+1	; 0x01
    1f68:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	88 23       	and	r24, r24
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <PWM_vInit+0x404>
    1f70:	38 c2       	rjmp	.+1136   	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1f72:	e9 81       	ldd	r30, Y+1	; 0x01
    1f74:	fa 81       	ldd	r31, Y+2	; 0x02
    1f76:	83 81       	ldd	r24, Z+3	; 0x03
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	49 f4       	brne	.+18     	; 0x1f8e <PWM_vInit+0x420>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1f7c:	af e4       	ldi	r26, 0x4F	; 79
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	ef e4       	ldi	r30, 0x4F	; 79
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	8f 7c       	andi	r24, 0xCF	; 207
    1f88:	80 62       	ori	r24, 0x20	; 32
    1f8a:	8c 93       	st	X, r24
    1f8c:	2a c2       	rjmp	.+1108   	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1f8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f90:	fa 81       	ldd	r31, Y+2	; 0x02
    1f92:	83 81       	ldd	r24, Z+3	; 0x03
    1f94:	88 23       	and	r24, r24
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <PWM_vInit+0x42c>
    1f98:	24 c2       	rjmp	.+1096   	; 0x23e2 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1f9a:	af e4       	ldi	r26, 0x4F	; 79
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	ef e4       	ldi	r30, 0x4F	; 79
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	80 63       	ori	r24, 0x30	; 48
    1fa6:	8c 93       	st	X, r24
    1fa8:	1c c2       	rjmp	.+1080   	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast10:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    1faa:	af e4       	ldi	r26, 0x4F	; 79
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	ef e4       	ldi	r30, 0x4F	; 79
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	83 60       	ori	r24, 0x03	; 3
    1fb6:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    1fb8:	ae e4       	ldi	r26, 0x4E	; 78
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	ee e4       	ldi	r30, 0x4E	; 78
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	87 7e       	andi	r24, 0xE7	; 231
    1fc4:	88 60       	ori	r24, 0x08	; 8
    1fc6:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fca:	fa 81       	ldd	r31, Y+2	; 0x02
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	41 f4       	brne	.+16     	; 0x1fe2 <PWM_vInit+0x474>
				TIMSK_REG |= 0x3C;
    1fd2:	a9 e5       	ldi	r26, 0x59	; 89
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e9 e5       	ldi	r30, 0x59	; 89
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	8c 63       	ori	r24, 0x3C	; 60
    1fde:	8c 93       	st	X, r24
    1fe0:	00 c2       	rjmp	.+1024   	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1fe2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe6:	82 81       	ldd	r24, Z+2	; 0x02
    1fe8:	88 23       	and	r24, r24
    1fea:	09 f0       	breq	.+2      	; 0x1fee <PWM_vInit+0x480>
    1fec:	fa c1       	rjmp	.+1012   	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1fee:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff2:	83 81       	ldd	r24, Z+3	; 0x03
    1ff4:	81 30       	cpi	r24, 0x01	; 1
    1ff6:	49 f4       	brne	.+18     	; 0x200a <PWM_vInit+0x49c>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1ff8:	af e4       	ldi	r26, 0x4F	; 79
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	ef e4       	ldi	r30, 0x4F	; 79
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	8f 7c       	andi	r24, 0xCF	; 207
    2004:	80 62       	ori	r24, 0x20	; 32
    2006:	8c 93       	st	X, r24
    2008:	ec c1       	rjmp	.+984    	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    200a:	e9 81       	ldd	r30, Y+1	; 0x01
    200c:	fa 81       	ldd	r31, Y+2	; 0x02
    200e:	83 81       	ldd	r24, Z+3	; 0x03
    2010:	88 23       	and	r24, r24
    2012:	09 f0       	breq	.+2      	; 0x2016 <PWM_vInit+0x4a8>
    2014:	e6 c1       	rjmp	.+972    	; 0x23e2 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2016:	af e4       	ldi	r26, 0x4F	; 79
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	ef e4       	ldi	r30, 0x4F	; 79
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	80 63       	ori	r24, 0x30	; 48
    2022:	8c 93       	st	X, r24
    2024:	de c1       	rjmp	.+956    	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseFreqICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    2026:	af e4       	ldi	r26, 0x4F	; 79
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	ef e4       	ldi	r30, 0x4F	; 79
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	8c 7f       	andi	r24, 0xFC	; 252
    2032:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    2034:	ae e4       	ldi	r26, 0x4E	; 78
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	ee e4       	ldi	r30, 0x4E	; 78
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	87 7e       	andi	r24, 0xE7	; 231
    2040:	80 61       	ori	r24, 0x10	; 16
    2042:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2044:	e9 81       	ldd	r30, Y+1	; 0x01
    2046:	fa 81       	ldd	r31, Y+2	; 0x02
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	41 f4       	brne	.+16     	; 0x205e <PWM_vInit+0x4f0>
				TIMSK_REG |= 0x3C;
    204e:	a9 e5       	ldi	r26, 0x59	; 89
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e9 e5       	ldi	r30, 0x59	; 89
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	8c 63       	ori	r24, 0x3C	; 60
    205a:	8c 93       	st	X, r24
    205c:	c2 c1       	rjmp	.+900    	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    205e:	e9 81       	ldd	r30, Y+1	; 0x01
    2060:	fa 81       	ldd	r31, Y+2	; 0x02
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	88 23       	and	r24, r24
    2066:	09 f0       	breq	.+2      	; 0x206a <PWM_vInit+0x4fc>
    2068:	bc c1       	rjmp	.+888    	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    206a:	e9 81       	ldd	r30, Y+1	; 0x01
    206c:	fa 81       	ldd	r31, Y+2	; 0x02
    206e:	83 81       	ldd	r24, Z+3	; 0x03
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	49 f4       	brne	.+18     	; 0x2086 <PWM_vInit+0x518>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2074:	af e4       	ldi	r26, 0x4F	; 79
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	ef e4       	ldi	r30, 0x4F	; 79
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	8f 7c       	andi	r24, 0xCF	; 207
    2080:	80 62       	ori	r24, 0x20	; 32
    2082:	8c 93       	st	X, r24
    2084:	ae c1       	rjmp	.+860    	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2086:	e9 81       	ldd	r30, Y+1	; 0x01
    2088:	fa 81       	ldd	r31, Y+2	; 0x02
    208a:	83 81       	ldd	r24, Z+3	; 0x03
    208c:	88 23       	and	r24, r24
    208e:	09 f0       	breq	.+2      	; 0x2092 <PWM_vInit+0x524>
    2090:	a8 c1       	rjmp	.+848    	; 0x23e2 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2092:	af e4       	ldi	r26, 0x4F	; 79
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	ef e4       	ldi	r30, 0x4F	; 79
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	80 63       	ori	r24, 0x30	; 48
    209e:	8c 93       	st	X, r24
    20a0:	a0 c1       	rjmp	.+832    	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseFreqOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    20a2:	af e4       	ldi	r26, 0x4F	; 79
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	ef e4       	ldi	r30, 0x4F	; 79
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	8c 7f       	andi	r24, 0xFC	; 252
    20ae:	81 60       	ori	r24, 0x01	; 1
    20b0:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    20b2:	ae e4       	ldi	r26, 0x4E	; 78
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	ee e4       	ldi	r30, 0x4E	; 78
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	87 7e       	andi	r24, 0xE7	; 231
    20be:	80 61       	ori	r24, 0x10	; 16
    20c0:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    20c2:	e9 81       	ldd	r30, Y+1	; 0x01
    20c4:	fa 81       	ldd	r31, Y+2	; 0x02
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	81 30       	cpi	r24, 0x01	; 1
    20ca:	41 f4       	brne	.+16     	; 0x20dc <PWM_vInit+0x56e>
				TIMSK_REG |= 0x3C;
    20cc:	a9 e5       	ldi	r26, 0x59	; 89
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e9 e5       	ldi	r30, 0x59	; 89
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	8c 63       	ori	r24, 0x3C	; 60
    20d8:	8c 93       	st	X, r24
    20da:	83 c1       	rjmp	.+774    	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    20dc:	e9 81       	ldd	r30, Y+1	; 0x01
    20de:	fa 81       	ldd	r31, Y+2	; 0x02
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	88 23       	and	r24, r24
    20e4:	09 f0       	breq	.+2      	; 0x20e8 <PWM_vInit+0x57a>
    20e6:	7d c1       	rjmp	.+762    	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    20e8:	e9 81       	ldd	r30, Y+1	; 0x01
    20ea:	fa 81       	ldd	r31, Y+2	; 0x02
    20ec:	83 81       	ldd	r24, Z+3	; 0x03
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	49 f4       	brne	.+18     	; 0x2104 <PWM_vInit+0x596>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    20f2:	af e4       	ldi	r26, 0x4F	; 79
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	ef e4       	ldi	r30, 0x4F	; 79
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	8f 7c       	andi	r24, 0xCF	; 207
    20fe:	80 62       	ori	r24, 0x20	; 32
    2100:	8c 93       	st	X, r24
    2102:	6f c1       	rjmp	.+734    	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2104:	e9 81       	ldd	r30, Y+1	; 0x01
    2106:	fa 81       	ldd	r31, Y+2	; 0x02
    2108:	83 81       	ldd	r24, Z+3	; 0x03
    210a:	88 23       	and	r24, r24
    210c:	09 f0       	breq	.+2      	; 0x2110 <PWM_vInit+0x5a2>
    210e:	69 c1       	rjmp	.+722    	; 0x23e2 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2110:	af e4       	ldi	r26, 0x4F	; 79
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	ef e4       	ldi	r30, 0x4F	; 79
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	80 63       	ori	r24, 0x30	; 48
    211c:	8c 93       	st	X, r24
    211e:	61 c1       	rjmp	.+706    	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    2120:	af e4       	ldi	r26, 0x4F	; 79
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	ef e4       	ldi	r30, 0x4F	; 79
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	8c 7f       	andi	r24, 0xFC	; 252
    212c:	82 60       	ori	r24, 0x02	; 2
    212e:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    2130:	ae e4       	ldi	r26, 0x4E	; 78
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	ee e4       	ldi	r30, 0x4E	; 78
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	87 7e       	andi	r24, 0xE7	; 231
    213c:	80 61       	ori	r24, 0x10	; 16
    213e:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2140:	e9 81       	ldd	r30, Y+1	; 0x01
    2142:	fa 81       	ldd	r31, Y+2	; 0x02
    2144:	82 81       	ldd	r24, Z+2	; 0x02
    2146:	81 30       	cpi	r24, 0x01	; 1
    2148:	41 f4       	brne	.+16     	; 0x215a <PWM_vInit+0x5ec>
				TIMSK_REG |= 0x3C;
    214a:	a9 e5       	ldi	r26, 0x59	; 89
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e9 e5       	ldi	r30, 0x59	; 89
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	8c 63       	ori	r24, 0x3C	; 60
    2156:	8c 93       	st	X, r24
    2158:	44 c1       	rjmp	.+648    	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    215a:	e9 81       	ldd	r30, Y+1	; 0x01
    215c:	fa 81       	ldd	r31, Y+2	; 0x02
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	88 23       	and	r24, r24
    2162:	09 f0       	breq	.+2      	; 0x2166 <PWM_vInit+0x5f8>
    2164:	3e c1       	rjmp	.+636    	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2166:	e9 81       	ldd	r30, Y+1	; 0x01
    2168:	fa 81       	ldd	r31, Y+2	; 0x02
    216a:	83 81       	ldd	r24, Z+3	; 0x03
    216c:	81 30       	cpi	r24, 0x01	; 1
    216e:	49 f4       	brne	.+18     	; 0x2182 <PWM_vInit+0x614>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2170:	af e4       	ldi	r26, 0x4F	; 79
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	ef e4       	ldi	r30, 0x4F	; 79
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	8f 7c       	andi	r24, 0xCF	; 207
    217c:	80 62       	ori	r24, 0x20	; 32
    217e:	8c 93       	st	X, r24
    2180:	30 c1       	rjmp	.+608    	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2182:	e9 81       	ldd	r30, Y+1	; 0x01
    2184:	fa 81       	ldd	r31, Y+2	; 0x02
    2186:	83 81       	ldd	r24, Z+3	; 0x03
    2188:	88 23       	and	r24, r24
    218a:	09 f0       	breq	.+2      	; 0x218e <PWM_vInit+0x620>
    218c:	2a c1       	rjmp	.+596    	; 0x23e2 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    218e:	af e4       	ldi	r26, 0x4F	; 79
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	ef e4       	ldi	r30, 0x4F	; 79
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	80 63       	ori	r24, 0x30	; 48
    219a:	8c 93       	st	X, r24
    219c:	22 c1       	rjmp	.+580    	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    219e:	af e4       	ldi	r26, 0x4F	; 79
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	ef e4       	ldi	r30, 0x4F	; 79
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	83 60       	ori	r24, 0x03	; 3
    21aa:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    21ac:	ae e4       	ldi	r26, 0x4E	; 78
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	ee e4       	ldi	r30, 0x4E	; 78
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	87 7e       	andi	r24, 0xE7	; 231
    21b8:	80 61       	ori	r24, 0x10	; 16
    21ba:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    21bc:	e9 81       	ldd	r30, Y+1	; 0x01
    21be:	fa 81       	ldd	r31, Y+2	; 0x02
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	81 30       	cpi	r24, 0x01	; 1
    21c4:	41 f4       	brne	.+16     	; 0x21d6 <PWM_vInit+0x668>
				TIMSK_REG |= 0x3C;
    21c6:	a9 e5       	ldi	r26, 0x59	; 89
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e9 e5       	ldi	r30, 0x59	; 89
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	8c 63       	ori	r24, 0x3C	; 60
    21d2:	8c 93       	st	X, r24
    21d4:	06 c1       	rjmp	.+524    	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    21d6:	e9 81       	ldd	r30, Y+1	; 0x01
    21d8:	fa 81       	ldd	r31, Y+2	; 0x02
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	88 23       	and	r24, r24
    21de:	09 f0       	breq	.+2      	; 0x21e2 <PWM_vInit+0x674>
    21e0:	00 c1       	rjmp	.+512    	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    21e2:	e9 81       	ldd	r30, Y+1	; 0x01
    21e4:	fa 81       	ldd	r31, Y+2	; 0x02
    21e6:	83 81       	ldd	r24, Z+3	; 0x03
    21e8:	81 30       	cpi	r24, 0x01	; 1
    21ea:	49 f4       	brne	.+18     	; 0x21fe <PWM_vInit+0x690>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    21ec:	af e4       	ldi	r26, 0x4F	; 79
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	ef e4       	ldi	r30, 0x4F	; 79
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	8f 7c       	andi	r24, 0xCF	; 207
    21f8:	80 62       	ori	r24, 0x20	; 32
    21fa:	8c 93       	st	X, r24
    21fc:	f2 c0       	rjmp	.+484    	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    21fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2200:	fa 81       	ldd	r31, Y+2	; 0x02
    2202:	83 81       	ldd	r24, Z+3	; 0x03
    2204:	88 23       	and	r24, r24
    2206:	09 f0       	breq	.+2      	; 0x220a <PWM_vInit+0x69c>
    2208:	ec c0       	rjmp	.+472    	; 0x23e2 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    220a:	af e4       	ldi	r26, 0x4F	; 79
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	ef e4       	ldi	r30, 0x4F	; 79
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	80 63       	ori	r24, 0x30	; 48
    2216:	8c 93       	st	X, r24
    2218:	e4 c0       	rjmp	.+456    	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_FastICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    221a:	af e4       	ldi	r26, 0x4F	; 79
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	ef e4       	ldi	r30, 0x4F	; 79
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	8c 7f       	andi	r24, 0xFC	; 252
    2226:	82 60       	ori	r24, 0x02	; 2
    2228:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    222a:	ae e4       	ldi	r26, 0x4E	; 78
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	ee e4       	ldi	r30, 0x4E	; 78
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	88 61       	ori	r24, 0x18	; 24
    2236:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2238:	e9 81       	ldd	r30, Y+1	; 0x01
    223a:	fa 81       	ldd	r31, Y+2	; 0x02
    223c:	82 81       	ldd	r24, Z+2	; 0x02
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	41 f4       	brne	.+16     	; 0x2252 <PWM_vInit+0x6e4>
				TIMSK_REG |= 0x3C;
    2242:	a9 e5       	ldi	r26, 0x59	; 89
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e9 e5       	ldi	r30, 0x59	; 89
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	8c 63       	ori	r24, 0x3C	; 60
    224e:	8c 93       	st	X, r24
    2250:	c8 c0       	rjmp	.+400    	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2252:	e9 81       	ldd	r30, Y+1	; 0x01
    2254:	fa 81       	ldd	r31, Y+2	; 0x02
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	88 23       	and	r24, r24
    225a:	09 f0       	breq	.+2      	; 0x225e <PWM_vInit+0x6f0>
    225c:	c2 c0       	rjmp	.+388    	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    225e:	e9 81       	ldd	r30, Y+1	; 0x01
    2260:	fa 81       	ldd	r31, Y+2	; 0x02
    2262:	83 81       	ldd	r24, Z+3	; 0x03
    2264:	81 30       	cpi	r24, 0x01	; 1
    2266:	49 f4       	brne	.+18     	; 0x227a <PWM_vInit+0x70c>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2268:	af e4       	ldi	r26, 0x4F	; 79
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	ef e4       	ldi	r30, 0x4F	; 79
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8f 7c       	andi	r24, 0xCF	; 207
    2274:	80 62       	ori	r24, 0x20	; 32
    2276:	8c 93       	st	X, r24
    2278:	b4 c0       	rjmp	.+360    	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    227a:	e9 81       	ldd	r30, Y+1	; 0x01
    227c:	fa 81       	ldd	r31, Y+2	; 0x02
    227e:	83 81       	ldd	r24, Z+3	; 0x03
    2280:	88 23       	and	r24, r24
    2282:	09 f0       	breq	.+2      	; 0x2286 <PWM_vInit+0x718>
    2284:	ae c0       	rjmp	.+348    	; 0x23e2 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2286:	af e4       	ldi	r26, 0x4F	; 79
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	ef e4       	ldi	r30, 0x4F	; 79
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	80 63       	ori	r24, 0x30	; 48
    2292:	8c 93       	st	X, r24
    2294:	a6 c0       	rjmp	.+332    	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_FastOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    2296:	af e4       	ldi	r26, 0x4F	; 79
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	ef e4       	ldi	r30, 0x4F	; 79
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	83 60       	ori	r24, 0x03	; 3
    22a2:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    22a4:	ae e4       	ldi	r26, 0x4E	; 78
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ee e4       	ldi	r30, 0x4E	; 78
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	88 61       	ori	r24, 0x18	; 24
    22b0:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    22b2:	e9 81       	ldd	r30, Y+1	; 0x01
    22b4:	fa 81       	ldd	r31, Y+2	; 0x02
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	41 f4       	brne	.+16     	; 0x22cc <PWM_vInit+0x75e>
				TIMSK_REG |= 0x3C;
    22bc:	a9 e5       	ldi	r26, 0x59	; 89
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e9 e5       	ldi	r30, 0x59	; 89
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	8c 63       	ori	r24, 0x3C	; 60
    22c8:	8c 93       	st	X, r24
    22ca:	8b c0       	rjmp	.+278    	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    22cc:	e9 81       	ldd	r30, Y+1	; 0x01
    22ce:	fa 81       	ldd	r31, Y+2	; 0x02
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	88 23       	and	r24, r24
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <PWM_vInit+0x76a>
    22d6:	85 c0       	rjmp	.+266    	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    22d8:	e9 81       	ldd	r30, Y+1	; 0x01
    22da:	fa 81       	ldd	r31, Y+2	; 0x02
    22dc:	83 81       	ldd	r24, Z+3	; 0x03
    22de:	81 30       	cpi	r24, 0x01	; 1
    22e0:	49 f4       	brne	.+18     	; 0x22f4 <PWM_vInit+0x786>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    22e2:	af e4       	ldi	r26, 0x4F	; 79
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	ef e4       	ldi	r30, 0x4F	; 79
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	8f 7c       	andi	r24, 0xCF	; 207
    22ee:	80 62       	ori	r24, 0x20	; 32
    22f0:	8c 93       	st	X, r24
    22f2:	77 c0       	rjmp	.+238    	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    22f4:	e9 81       	ldd	r30, Y+1	; 0x01
    22f6:	fa 81       	ldd	r31, Y+2	; 0x02
    22f8:	83 81       	ldd	r24, Z+3	; 0x03
    22fa:	88 23       	and	r24, r24
    22fc:	09 f0       	breq	.+2      	; 0x2300 <PWM_vInit+0x792>
    22fe:	71 c0       	rjmp	.+226    	; 0x23e2 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2300:	af e4       	ldi	r26, 0x4F	; 79
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	ef e4       	ldi	r30, 0x4F	; 79
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	80 63       	ori	r24, 0x30	; 48
    230c:	8c 93       	st	X, r24
    230e:	69 c0       	rjmp	.+210    	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_PhaseCorrect:
			TCCR2_REG = (TCCR2_REG & 0xB7) | 0x40;
    2310:	a5 e4       	ldi	r26, 0x45	; 69
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e5 e4       	ldi	r30, 0x45	; 69
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	87 7b       	andi	r24, 0xB7	; 183
    231c:	80 64       	ori	r24, 0x40	; 64
    231e:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2320:	e9 81       	ldd	r30, Y+1	; 0x01
    2322:	fa 81       	ldd	r31, Y+2	; 0x02
    2324:	82 81       	ldd	r24, Z+2	; 0x02
    2326:	81 30       	cpi	r24, 0x01	; 1
    2328:	41 f4       	brne	.+16     	; 0x233a <PWM_vInit+0x7cc>
				TIMSK_REG |= 0xC0;
    232a:	a9 e5       	ldi	r26, 0x59	; 89
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e9 e5       	ldi	r30, 0x59	; 89
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	80 6c       	ori	r24, 0xC0	; 192
    2336:	8c 93       	st	X, r24
    2338:	54 c0       	rjmp	.+168    	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    233a:	e9 81       	ldd	r30, Y+1	; 0x01
    233c:	fa 81       	ldd	r31, Y+2	; 0x02
    233e:	82 81       	ldd	r24, Z+2	; 0x02
    2340:	88 23       	and	r24, r24
    2342:	09 f0       	breq	.+2      	; 0x2346 <PWM_vInit+0x7d8>
    2344:	4e c0       	rjmp	.+156    	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2346:	e9 81       	ldd	r30, Y+1	; 0x01
    2348:	fa 81       	ldd	r31, Y+2	; 0x02
    234a:	83 81       	ldd	r24, Z+3	; 0x03
    234c:	81 30       	cpi	r24, 0x01	; 1
    234e:	49 f4       	brne	.+18     	; 0x2362 <PWM_vInit+0x7f4>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2350:	a5 e4       	ldi	r26, 0x45	; 69
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	ef e4       	ldi	r30, 0x4F	; 79
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	8f 7c       	andi	r24, 0xCF	; 207
    235c:	80 62       	ori	r24, 0x20	; 32
    235e:	8c 93       	st	X, r24
    2360:	40 c0       	rjmp	.+128    	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2362:	e9 81       	ldd	r30, Y+1	; 0x01
    2364:	fa 81       	ldd	r31, Y+2	; 0x02
    2366:	83 81       	ldd	r24, Z+3	; 0x03
    2368:	88 23       	and	r24, r24
    236a:	d9 f5       	brne	.+118    	; 0x23e2 <PWM_vInit+0x874>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x30;
    236c:	a5 e4       	ldi	r26, 0x45	; 69
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	ef e4       	ldi	r30, 0x4F	; 79
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	80 63       	ori	r24, 0x30	; 48
    2378:	8c 93       	st	X, r24
    237a:	33 c0       	rjmp	.+102    	; 0x23e2 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_FastPWM:
			TCCR2_REG = (TCCR2_REG & 0xB7) | 0x48;
    237c:	a5 e4       	ldi	r26, 0x45	; 69
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e5 e4       	ldi	r30, 0x45	; 69
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	88 64       	ori	r24, 0x48	; 72
    2388:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    238a:	e9 81       	ldd	r30, Y+1	; 0x01
    238c:	fa 81       	ldd	r31, Y+2	; 0x02
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	81 30       	cpi	r24, 0x01	; 1
    2392:	41 f4       	brne	.+16     	; 0x23a4 <PWM_vInit+0x836>
				TIMSK_REG |= 0xC0;
    2394:	a9 e5       	ldi	r26, 0x59	; 89
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e9 e5       	ldi	r30, 0x59	; 89
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	80 6c       	ori	r24, 0xC0	; 192
    23a0:	8c 93       	st	X, r24
    23a2:	1f c0       	rjmp	.+62     	; 0x23e2 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    23a4:	e9 81       	ldd	r30, Y+1	; 0x01
    23a6:	fa 81       	ldd	r31, Y+2	; 0x02
    23a8:	82 81       	ldd	r24, Z+2	; 0x02
    23aa:	88 23       	and	r24, r24
    23ac:	d1 f4       	brne	.+52     	; 0x23e2 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    23ae:	e9 81       	ldd	r30, Y+1	; 0x01
    23b0:	fa 81       	ldd	r31, Y+2	; 0x02
    23b2:	83 81       	ldd	r24, Z+3	; 0x03
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	49 f4       	brne	.+18     	; 0x23ca <PWM_vInit+0x85c>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x20;
    23b8:	a5 e4       	ldi	r26, 0x45	; 69
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	ef e4       	ldi	r30, 0x4F	; 79
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	8f 7c       	andi	r24, 0xCF	; 207
    23c4:	80 62       	ori	r24, 0x20	; 32
    23c6:	8c 93       	st	X, r24
    23c8:	0c c0       	rjmp	.+24     	; 0x23e2 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    23ca:	e9 81       	ldd	r30, Y+1	; 0x01
    23cc:	fa 81       	ldd	r31, Y+2	; 0x02
    23ce:	83 81       	ldd	r24, Z+3	; 0x03
    23d0:	88 23       	and	r24, r24
    23d2:	39 f4       	brne	.+14     	; 0x23e2 <PWM_vInit+0x874>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x30;
    23d4:	a5 e4       	ldi	r26, 0x45	; 69
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	ef e4       	ldi	r30, 0x4F	; 79
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	80 63       	ori	r24, 0x30	; 48
    23e0:	8c 93       	st	X, r24
			else{ /* Do Nothing */ }
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <PWM_vSetICR>:

void PWM_vSetICR(const PWM_cfg_t *PWM, u16 Copy_u16ICRValue){
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <PWM_vSetICR+0x6>
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <PWM_vSetICR+0x8>
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	7c 83       	std	Y+4, r23	; 0x04
    2402:	6b 83       	std	Y+3, r22	; 0x03
	if(PWM != NULL){
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	79 f0       	breq	.+30     	; 0x242a <PWM_vSetICR+0x3a>
		switch(PWM->PWM_TimerChannel){
    240c:	e9 81       	ldd	r30, Y+1	; 0x01
    240e:	fa 81       	ldd	r31, Y+2	; 0x02
    2410:	80 81       	ld	r24, Z
    2412:	88 2f       	mov	r24, r24
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	02 97       	sbiw	r24, 0x02	; 2
    2418:	8c 30       	cpi	r24, 0x0C	; 12
    241a:	91 05       	cpc	r25, r1
    241c:	30 f4       	brcc	.+12     	; 0x242a <PWM_vSetICR+0x3a>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			ICR1_REG = Copy_u16ICRValue;
    241e:	e6 e4       	ldi	r30, 0x46	; 70
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	8b 81       	ldd	r24, Y+3	; 0x03
    2424:	9c 81       	ldd	r25, Y+4	; 0x04
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <PWM_vSetOCR>:

void PWM_vSetOCR(const PWM_cfg_t *PWM, u16 Copy_u16OCRValue){
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <PWM_vSetOCR+0x6>
    243e:	00 d0       	rcall	.+0      	; 0x2440 <PWM_vSetOCR+0x8>
    2440:	00 d0       	rcall	.+0      	; 0x2442 <PWM_vSetOCR+0xa>
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	89 83       	std	Y+1, r24	; 0x01
    244a:	7c 83       	std	Y+4, r23	; 0x04
    244c:	6b 83       	std	Y+3, r22	; 0x03
	if(PWM != NULL){
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	61 f1       	breq	.+88     	; 0x24ae <PWM_vSetOCR+0x76>
		switch(PWM->PWM_TimerChannel){
    2456:	e9 81       	ldd	r30, Y+1	; 0x01
    2458:	fa 81       	ldd	r31, Y+2	; 0x02
    245a:	80 81       	ld	r24, Z
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	3e 83       	std	Y+6, r19	; 0x06
    2462:	2d 83       	std	Y+5, r18	; 0x05
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	8e 30       	cpi	r24, 0x0E	; 14
    246a:	91 05       	cpc	r25, r1
    246c:	54 f4       	brge	.+20     	; 0x2482 <PWM_vSetOCR+0x4a>
    246e:	2d 81       	ldd	r18, Y+5	; 0x05
    2470:	3e 81       	ldd	r19, Y+6	; 0x06
    2472:	22 30       	cpi	r18, 0x02	; 2
    2474:	31 05       	cpc	r19, r1
    2476:	84 f4       	brge	.+32     	; 0x2498 <PWM_vSetOCR+0x60>
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	9e 81       	ldd	r25, Y+6	; 0x06
    247c:	99 23       	and	r25, r25
    247e:	bc f0       	brlt	.+46     	; 0x24ae <PWM_vSetOCR+0x76>
    2480:	06 c0       	rjmp	.+12     	; 0x248e <PWM_vSetOCR+0x56>
    2482:	2d 81       	ldd	r18, Y+5	; 0x05
    2484:	3e 81       	ldd	r19, Y+6	; 0x06
    2486:	20 31       	cpi	r18, 0x10	; 16
    2488:	31 05       	cpc	r19, r1
    248a:	8c f4       	brge	.+34     	; 0x24ae <PWM_vSetOCR+0x76>
    248c:	0c c0       	rjmp	.+24     	; 0x24a6 <PWM_vSetOCR+0x6e>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			OCR0_REG = (u8)Copy_u16OCRValue;
    248e:	ec e5       	ldi	r30, 0x5C	; 92
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	80 83       	st	Z, r24
    2496:	0b c0       	rjmp	.+22     	; 0x24ae <PWM_vSetOCR+0x76>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			OCR1B_REG = Copy_u16OCRValue;
    2498:	e8 e4       	ldi	r30, 0x48	; 72
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
    24a4:	04 c0       	rjmp	.+8      	; 0x24ae <PWM_vSetOCR+0x76>
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			OCR2_REG = (u8)Copy_u16OCRValue;
    24a6:	e3 e4       	ldi	r30, 0x43	; 67
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    24ae:	26 96       	adiw	r28, 0x06	; 6
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <PWM_vStart>:

void PWM_vStart(const PWM_cfg_t *PWM){
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	2a 97       	sbiw	r28, 0x0a	; 10
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	09 f4       	brne	.+2      	; 0x24e2 <PWM_vStart+0x22>
    24e0:	a7 c1       	rjmp	.+846    	; 0x2830 <PWM_vStart+0x370>
		switch(PWM->PWM_TimerChannel){
    24e2:	e9 81       	ldd	r30, Y+1	; 0x01
    24e4:	fa 81       	ldd	r31, Y+2	; 0x02
    24e6:	80 81       	ld	r24, Z
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	3a 87       	std	Y+10, r19	; 0x0a
    24ee:	29 87       	std	Y+9, r18	; 0x09
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	8e 30       	cpi	r24, 0x0E	; 14
    24f6:	91 05       	cpc	r25, r1
    24f8:	64 f4       	brge	.+24     	; 0x2512 <PWM_vStart+0x52>
    24fa:	29 85       	ldd	r18, Y+9	; 0x09
    24fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    24fe:	22 30       	cpi	r18, 0x02	; 2
    2500:	31 05       	cpc	r19, r1
    2502:	0c f0       	brlt	.+2      	; 0x2506 <PWM_vStart+0x46>
    2504:	90 c0       	rjmp	.+288    	; 0x2626 <PWM_vStart+0x166>
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	99 23       	and	r25, r25
    250c:	0c f4       	brge	.+2      	; 0x2510 <PWM_vStart+0x50>
    250e:	90 c1       	rjmp	.+800    	; 0x2830 <PWM_vStart+0x370>
    2510:	07 c0       	rjmp	.+14     	; 0x2520 <PWM_vStart+0x60>
    2512:	29 85       	ldd	r18, Y+9	; 0x09
    2514:	3a 85       	ldd	r19, Y+10	; 0x0a
    2516:	20 31       	cpi	r18, 0x10	; 16
    2518:	31 05       	cpc	r19, r1
    251a:	0c f0       	brlt	.+2      	; 0x251e <PWM_vStart+0x5e>
    251c:	89 c1       	rjmp	.+786    	; 0x2830 <PWM_vStart+0x370>
    251e:	06 c1       	rjmp	.+524    	; 0x272c <PWM_vStart+0x26c>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			DIO_vSetPinDir(PORTB, PIN3, OUTPUT);
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	63 e0       	ldi	r22, 0x03	; 3
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	0e 94 9e 14 	call	0x293c	; 0x293c <DIO_vSetPinDir>
			switch(PWM->PWM_TimerPrescale){
    252a:	e9 81       	ldd	r30, Y+1	; 0x01
    252c:	fa 81       	ldd	r31, Y+2	; 0x02
    252e:	81 81       	ldd	r24, Z+1	; 0x01
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	38 87       	std	Y+8, r19	; 0x08
    2536:	2f 83       	std	Y+7, r18	; 0x07
    2538:	8f 81       	ldd	r24, Y+7	; 0x07
    253a:	98 85       	ldd	r25, Y+8	; 0x08
    253c:	83 30       	cpi	r24, 0x03	; 3
    253e:	91 05       	cpc	r25, r1
    2540:	09 f4       	brne	.+2      	; 0x2544 <PWM_vStart+0x84>
    2542:	45 c0       	rjmp	.+138    	; 0x25ce <PWM_vStart+0x10e>
    2544:	2f 81       	ldd	r18, Y+7	; 0x07
    2546:	38 85       	ldd	r19, Y+8	; 0x08
    2548:	24 30       	cpi	r18, 0x04	; 4
    254a:	31 05       	cpc	r19, r1
    254c:	7c f4       	brge	.+30     	; 0x256c <PWM_vStart+0xac>
    254e:	8f 81       	ldd	r24, Y+7	; 0x07
    2550:	98 85       	ldd	r25, Y+8	; 0x08
    2552:	81 30       	cpi	r24, 0x01	; 1
    2554:	91 05       	cpc	r25, r1
    2556:	49 f1       	breq	.+82     	; 0x25aa <PWM_vStart+0xea>
    2558:	2f 81       	ldd	r18, Y+7	; 0x07
    255a:	38 85       	ldd	r19, Y+8	; 0x08
    255c:	22 30       	cpi	r18, 0x02	; 2
    255e:	31 05       	cpc	r19, r1
    2560:	6c f5       	brge	.+90     	; 0x25bc <PWM_vStart+0xfc>
    2562:	8f 81       	ldd	r24, Y+7	; 0x07
    2564:	98 85       	ldd	r25, Y+8	; 0x08
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	c1 f0       	breq	.+48     	; 0x259a <PWM_vStart+0xda>
    256a:	62 c1       	rjmp	.+708    	; 0x2830 <PWM_vStart+0x370>
    256c:	2f 81       	ldd	r18, Y+7	; 0x07
    256e:	38 85       	ldd	r19, Y+8	; 0x08
    2570:	25 30       	cpi	r18, 0x05	; 5
    2572:	31 05       	cpc	r19, r1
    2574:	09 f4       	brne	.+2      	; 0x2578 <PWM_vStart+0xb8>
    2576:	3d c0       	rjmp	.+122    	; 0x25f2 <PWM_vStart+0x132>
    2578:	8f 81       	ldd	r24, Y+7	; 0x07
    257a:	98 85       	ldd	r25, Y+8	; 0x08
    257c:	85 30       	cpi	r24, 0x05	; 5
    257e:	91 05       	cpc	r25, r1
    2580:	7c f1       	brlt	.+94     	; 0x25e0 <PWM_vStart+0x120>
    2582:	2f 81       	ldd	r18, Y+7	; 0x07
    2584:	38 85       	ldd	r19, Y+8	; 0x08
    2586:	26 30       	cpi	r18, 0x06	; 6
    2588:	31 05       	cpc	r19, r1
    258a:	e1 f1       	breq	.+120    	; 0x2604 <PWM_vStart+0x144>
    258c:	8f 81       	ldd	r24, Y+7	; 0x07
    258e:	98 85       	ldd	r25, Y+8	; 0x08
    2590:	87 30       	cpi	r24, 0x07	; 7
    2592:	91 05       	cpc	r25, r1
    2594:	09 f4       	brne	.+2      	; 0x2598 <PWM_vStart+0xd8>
    2596:	3f c0       	rjmp	.+126    	; 0x2616 <PWM_vStart+0x156>
    2598:	4b c1       	rjmp	.+662    	; 0x2830 <PWM_vStart+0x370>
			case PRE_NO_CLK:
				TCCR0_REG = (TCCR0_REG&0xF8);
    259a:	a3 e5       	ldi	r26, 0x53	; 83
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e3 e5       	ldi	r30, 0x53	; 83
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	88 7f       	andi	r24, 0xF8	; 248
    25a6:	8c 93       	st	X, r24
    25a8:	43 c1       	rjmp	.+646    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_0:
				TCCR0_REG = (TCCR0_REG&0xF8) | 1;
    25aa:	a3 e5       	ldi	r26, 0x53	; 83
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e3 e5       	ldi	r30, 0x53	; 83
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	88 7f       	andi	r24, 0xF8	; 248
    25b6:	81 60       	ori	r24, 0x01	; 1
    25b8:	8c 93       	st	X, r24
    25ba:	3a c1       	rjmp	.+628    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_8:
				TCCR0_REG = (TCCR0_REG&0xF8) | 2;
    25bc:	a3 e5       	ldi	r26, 0x53	; 83
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e3 e5       	ldi	r30, 0x53	; 83
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	88 7f       	andi	r24, 0xF8	; 248
    25c8:	82 60       	ori	r24, 0x02	; 2
    25ca:	8c 93       	st	X, r24
    25cc:	31 c1       	rjmp	.+610    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_64:
				TCCR0_REG = (TCCR0_REG&0xF8) | 3;
    25ce:	a3 e5       	ldi	r26, 0x53	; 83
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e3 e5       	ldi	r30, 0x53	; 83
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	88 7f       	andi	r24, 0xF8	; 248
    25da:	83 60       	ori	r24, 0x03	; 3
    25dc:	8c 93       	st	X, r24
    25de:	28 c1       	rjmp	.+592    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_256:
				TCCR0_REG = (TCCR0_REG&0xF8) | 4;
    25e0:	a3 e5       	ldi	r26, 0x53	; 83
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e3 e5       	ldi	r30, 0x53	; 83
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	88 7f       	andi	r24, 0xF8	; 248
    25ec:	84 60       	ori	r24, 0x04	; 4
    25ee:	8c 93       	st	X, r24
    25f0:	1f c1       	rjmp	.+574    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_1024:
				TCCR0_REG = (TCCR0_REG&0xF8) | 5;
    25f2:	a3 e5       	ldi	r26, 0x53	; 83
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	e3 e5       	ldi	r30, 0x53	; 83
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	88 7f       	andi	r24, 0xF8	; 248
    25fe:	85 60       	ori	r24, 0x05	; 5
    2600:	8c 93       	st	X, r24
    2602:	16 c1       	rjmp	.+556    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_EXT_FALLING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 6;
    2604:	a3 e5       	ldi	r26, 0x53	; 83
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e3 e5       	ldi	r30, 0x53	; 83
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	88 7f       	andi	r24, 0xF8	; 248
    2610:	86 60       	ori	r24, 0x06	; 6
    2612:	8c 93       	st	X, r24
    2614:	0d c1       	rjmp	.+538    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_EXT_RISING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 7;
    2616:	a3 e5       	ldi	r26, 0x53	; 83
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e3 e5       	ldi	r30, 0x53	; 83
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	87 60       	ori	r24, 0x07	; 7
    2622:	8c 93       	st	X, r24
    2624:	05 c1       	rjmp	.+522    	; 0x2830 <PWM_vStart+0x370>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			DIO_vSetPinDir(PORTD, PIN4, OUTPUT);
    2626:	83 e0       	ldi	r24, 0x03	; 3
    2628:	64 e0       	ldi	r22, 0x04	; 4
    262a:	41 e0       	ldi	r20, 0x01	; 1
    262c:	0e 94 9e 14 	call	0x293c	; 0x293c <DIO_vSetPinDir>
			switch(PWM->PWM_TimerPrescale){
    2630:	e9 81       	ldd	r30, Y+1	; 0x01
    2632:	fa 81       	ldd	r31, Y+2	; 0x02
    2634:	81 81       	ldd	r24, Z+1	; 0x01
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	3e 83       	std	Y+6, r19	; 0x06
    263c:	2d 83       	std	Y+5, r18	; 0x05
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	83 30       	cpi	r24, 0x03	; 3
    2644:	91 05       	cpc	r25, r1
    2646:	09 f4       	brne	.+2      	; 0x264a <PWM_vStart+0x18a>
    2648:	45 c0       	rjmp	.+138    	; 0x26d4 <PWM_vStart+0x214>
    264a:	2d 81       	ldd	r18, Y+5	; 0x05
    264c:	3e 81       	ldd	r19, Y+6	; 0x06
    264e:	24 30       	cpi	r18, 0x04	; 4
    2650:	31 05       	cpc	r19, r1
    2652:	7c f4       	brge	.+30     	; 0x2672 <PWM_vStart+0x1b2>
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	81 30       	cpi	r24, 0x01	; 1
    265a:	91 05       	cpc	r25, r1
    265c:	49 f1       	breq	.+82     	; 0x26b0 <PWM_vStart+0x1f0>
    265e:	2d 81       	ldd	r18, Y+5	; 0x05
    2660:	3e 81       	ldd	r19, Y+6	; 0x06
    2662:	22 30       	cpi	r18, 0x02	; 2
    2664:	31 05       	cpc	r19, r1
    2666:	6c f5       	brge	.+90     	; 0x26c2 <PWM_vStart+0x202>
    2668:	8d 81       	ldd	r24, Y+5	; 0x05
    266a:	9e 81       	ldd	r25, Y+6	; 0x06
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	c1 f0       	breq	.+48     	; 0x26a0 <PWM_vStart+0x1e0>
    2670:	df c0       	rjmp	.+446    	; 0x2830 <PWM_vStart+0x370>
    2672:	2d 81       	ldd	r18, Y+5	; 0x05
    2674:	3e 81       	ldd	r19, Y+6	; 0x06
    2676:	25 30       	cpi	r18, 0x05	; 5
    2678:	31 05       	cpc	r19, r1
    267a:	09 f4       	brne	.+2      	; 0x267e <PWM_vStart+0x1be>
    267c:	3d c0       	rjmp	.+122    	; 0x26f8 <PWM_vStart+0x238>
    267e:	8d 81       	ldd	r24, Y+5	; 0x05
    2680:	9e 81       	ldd	r25, Y+6	; 0x06
    2682:	85 30       	cpi	r24, 0x05	; 5
    2684:	91 05       	cpc	r25, r1
    2686:	7c f1       	brlt	.+94     	; 0x26e6 <PWM_vStart+0x226>
    2688:	2d 81       	ldd	r18, Y+5	; 0x05
    268a:	3e 81       	ldd	r19, Y+6	; 0x06
    268c:	26 30       	cpi	r18, 0x06	; 6
    268e:	31 05       	cpc	r19, r1
    2690:	e1 f1       	breq	.+120    	; 0x270a <PWM_vStart+0x24a>
    2692:	8d 81       	ldd	r24, Y+5	; 0x05
    2694:	9e 81       	ldd	r25, Y+6	; 0x06
    2696:	87 30       	cpi	r24, 0x07	; 7
    2698:	91 05       	cpc	r25, r1
    269a:	09 f4       	brne	.+2      	; 0x269e <PWM_vStart+0x1de>
    269c:	3f c0       	rjmp	.+126    	; 0x271c <PWM_vStart+0x25c>
    269e:	c8 c0       	rjmp	.+400    	; 0x2830 <PWM_vStart+0x370>
			case PRE_NO_CLK:
				TCCR1B_REG = (TCCR1B_REG&0xF8);
    26a0:	ae e4       	ldi	r26, 0x4E	; 78
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	ee e4       	ldi	r30, 0x4E	; 78
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	88 7f       	andi	r24, 0xF8	; 248
    26ac:	8c 93       	st	X, r24
    26ae:	c0 c0       	rjmp	.+384    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_0:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 1;
    26b0:	ae e4       	ldi	r26, 0x4E	; 78
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	ee e4       	ldi	r30, 0x4E	; 78
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	88 7f       	andi	r24, 0xF8	; 248
    26bc:	81 60       	ori	r24, 0x01	; 1
    26be:	8c 93       	st	X, r24
    26c0:	b7 c0       	rjmp	.+366    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_8:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 2;
    26c2:	ae e4       	ldi	r26, 0x4E	; 78
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	ee e4       	ldi	r30, 0x4E	; 78
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	88 7f       	andi	r24, 0xF8	; 248
    26ce:	82 60       	ori	r24, 0x02	; 2
    26d0:	8c 93       	st	X, r24
    26d2:	ae c0       	rjmp	.+348    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_64:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 3;
    26d4:	ae e4       	ldi	r26, 0x4E	; 78
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	ee e4       	ldi	r30, 0x4E	; 78
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	88 7f       	andi	r24, 0xF8	; 248
    26e0:	83 60       	ori	r24, 0x03	; 3
    26e2:	8c 93       	st	X, r24
    26e4:	a5 c0       	rjmp	.+330    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_256:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 4;
    26e6:	ae e4       	ldi	r26, 0x4E	; 78
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	ee e4       	ldi	r30, 0x4E	; 78
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	88 7f       	andi	r24, 0xF8	; 248
    26f2:	84 60       	ori	r24, 0x04	; 4
    26f4:	8c 93       	st	X, r24
    26f6:	9c c0       	rjmp	.+312    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_1024:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 5;
    26f8:	ae e4       	ldi	r26, 0x4E	; 78
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	ee e4       	ldi	r30, 0x4E	; 78
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	88 7f       	andi	r24, 0xF8	; 248
    2704:	85 60       	ori	r24, 0x05	; 5
    2706:	8c 93       	st	X, r24
    2708:	93 c0       	rjmp	.+294    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_EXT_FALLING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 6;
    270a:	ae e4       	ldi	r26, 0x4E	; 78
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	ee e4       	ldi	r30, 0x4E	; 78
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	88 7f       	andi	r24, 0xF8	; 248
    2716:	86 60       	ori	r24, 0x06	; 6
    2718:	8c 93       	st	X, r24
    271a:	8a c0       	rjmp	.+276    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_EXT_RISING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 7;
    271c:	ae e4       	ldi	r26, 0x4E	; 78
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	ee e4       	ldi	r30, 0x4E	; 78
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	87 60       	ori	r24, 0x07	; 7
    2728:	8c 93       	st	X, r24
    272a:	82 c0       	rjmp	.+260    	; 0x2830 <PWM_vStart+0x370>
			default: /* Do Nothing */ break;
			}
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			DIO_vSetPinDir(PORTD, PIN7, OUTPUT);
    272c:	83 e0       	ldi	r24, 0x03	; 3
    272e:	67 e0       	ldi	r22, 0x07	; 7
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	0e 94 9e 14 	call	0x293c	; 0x293c <DIO_vSetPinDir>
			switch(PWM->PWM_TimerPrescale){
    2736:	e9 81       	ldd	r30, Y+1	; 0x01
    2738:	fa 81       	ldd	r31, Y+2	; 0x02
    273a:	81 81       	ldd	r24, Z+1	; 0x01
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	3c 83       	std	Y+4, r19	; 0x04
    2742:	2b 83       	std	Y+3, r18	; 0x03
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	9c 81       	ldd	r25, Y+4	; 0x04
    2748:	83 30       	cpi	r24, 0x03	; 3
    274a:	91 05       	cpc	r25, r1
    274c:	09 f4       	brne	.+2      	; 0x2750 <PWM_vStart+0x290>
    274e:	4e c0       	rjmp	.+156    	; 0x27ec <PWM_vStart+0x32c>
    2750:	2b 81       	ldd	r18, Y+3	; 0x03
    2752:	3c 81       	ldd	r19, Y+4	; 0x04
    2754:	24 30       	cpi	r18, 0x04	; 4
    2756:	31 05       	cpc	r19, r1
    2758:	7c f4       	brge	.+30     	; 0x2778 <PWM_vStart+0x2b8>
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	81 30       	cpi	r24, 0x01	; 1
    2760:	91 05       	cpc	r25, r1
    2762:	49 f1       	breq	.+82     	; 0x27b6 <PWM_vStart+0x2f6>
    2764:	2b 81       	ldd	r18, Y+3	; 0x03
    2766:	3c 81       	ldd	r19, Y+4	; 0x04
    2768:	22 30       	cpi	r18, 0x02	; 2
    276a:	31 05       	cpc	r19, r1
    276c:	6c f5       	brge	.+90     	; 0x27c8 <PWM_vStart+0x308>
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	9c 81       	ldd	r25, Y+4	; 0x04
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	c1 f0       	breq	.+48     	; 0x27a6 <PWM_vStart+0x2e6>
    2776:	5c c0       	rjmp	.+184    	; 0x2830 <PWM_vStart+0x370>
    2778:	2b 81       	ldd	r18, Y+3	; 0x03
    277a:	3c 81       	ldd	r19, Y+4	; 0x04
    277c:	25 30       	cpi	r18, 0x05	; 5
    277e:	31 05       	cpc	r19, r1
    2780:	09 f4       	brne	.+2      	; 0x2784 <PWM_vStart+0x2c4>
    2782:	4f c0       	rjmp	.+158    	; 0x2822 <PWM_vStart+0x362>
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	9c 81       	ldd	r25, Y+4	; 0x04
    2788:	85 30       	cpi	r24, 0x05	; 5
    278a:	91 05       	cpc	r25, r1
    278c:	0c f4       	brge	.+2      	; 0x2790 <PWM_vStart+0x2d0>
    278e:	40 c0       	rjmp	.+128    	; 0x2810 <PWM_vStart+0x350>
    2790:	2b 81       	ldd	r18, Y+3	; 0x03
    2792:	3c 81       	ldd	r19, Y+4	; 0x04
    2794:	28 30       	cpi	r18, 0x08	; 8
    2796:	31 05       	cpc	r19, r1
    2798:	01 f1       	breq	.+64     	; 0x27da <PWM_vStart+0x31a>
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	9c 81       	ldd	r25, Y+4	; 0x04
    279e:	89 30       	cpi	r24, 0x09	; 9
    27a0:	91 05       	cpc	r25, r1
    27a2:	69 f1       	breq	.+90     	; 0x27fe <PWM_vStart+0x33e>
    27a4:	45 c0       	rjmp	.+138    	; 0x2830 <PWM_vStart+0x370>
			case PRE_NO_CLK:
				TCCR2_REG = (TCCR2_REG&0xF8);
    27a6:	a5 e4       	ldi	r26, 0x45	; 69
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e5 e4       	ldi	r30, 0x45	; 69
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	88 7f       	andi	r24, 0xF8	; 248
    27b2:	8c 93       	st	X, r24
    27b4:	3d c0       	rjmp	.+122    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_0:
				TCCR2_REG = (TCCR2_REG&0xF8) | 1;
    27b6:	a5 e4       	ldi	r26, 0x45	; 69
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e5 e4       	ldi	r30, 0x45	; 69
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	88 7f       	andi	r24, 0xF8	; 248
    27c2:	81 60       	ori	r24, 0x01	; 1
    27c4:	8c 93       	st	X, r24
    27c6:	34 c0       	rjmp	.+104    	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_8:
				TCCR2_REG = (TCCR2_REG&0xF8) | 2;
    27c8:	a5 e4       	ldi	r26, 0x45	; 69
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e5 e4       	ldi	r30, 0x45	; 69
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	88 7f       	andi	r24, 0xF8	; 248
    27d4:	82 60       	ori	r24, 0x02	; 2
    27d6:	8c 93       	st	X, r24
    27d8:	2b c0       	rjmp	.+86     	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_32:
				TCCR2_REG = (TCCR2_REG&0xF8) | 3;
    27da:	a5 e4       	ldi	r26, 0x45	; 69
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e5 e4       	ldi	r30, 0x45	; 69
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	88 7f       	andi	r24, 0xF8	; 248
    27e6:	83 60       	ori	r24, 0x03	; 3
    27e8:	8c 93       	st	X, r24
    27ea:	22 c0       	rjmp	.+68     	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_64:
				TCCR2_REG = (TCCR2_REG&0xF8) | 4;
    27ec:	a5 e4       	ldi	r26, 0x45	; 69
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e5 e4       	ldi	r30, 0x45	; 69
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	88 7f       	andi	r24, 0xF8	; 248
    27f8:	84 60       	ori	r24, 0x04	; 4
    27fa:	8c 93       	st	X, r24
    27fc:	19 c0       	rjmp	.+50     	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_128:
				TCCR2_REG = (TCCR2_REG&0xF8) | 5;
    27fe:	a5 e4       	ldi	r26, 0x45	; 69
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e5 e4       	ldi	r30, 0x45	; 69
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	88 7f       	andi	r24, 0xF8	; 248
    280a:	85 60       	ori	r24, 0x05	; 5
    280c:	8c 93       	st	X, r24
    280e:	10 c0       	rjmp	.+32     	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_256:
				TCCR2_REG = (TCCR2_REG&0xF8) | 6;
    2810:	a5 e4       	ldi	r26, 0x45	; 69
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e5 e4       	ldi	r30, 0x45	; 69
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	88 7f       	andi	r24, 0xF8	; 248
    281c:	86 60       	ori	r24, 0x06	; 6
    281e:	8c 93       	st	X, r24
    2820:	07 c0       	rjmp	.+14     	; 0x2830 <PWM_vStart+0x370>
				break;
			case PRE_1024:
				TCCR2_REG = (TCCR2_REG&0xF8) | 7;
    2822:	a5 e4       	ldi	r26, 0x45	; 69
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e5 e4       	ldi	r30, 0x45	; 69
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	87 60       	ori	r24, 0x07	; 7
    282e:	8c 93       	st	X, r24
			}
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    2830:	2a 96       	adiw	r28, 0x0a	; 10
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	cd bf       	out	0x3d, r28	; 61
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <PWM_vStop>:

void PWM_vStop(const PWM_cfg_t *PWM){
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	00 d0       	rcall	.+0      	; 0x2848 <PWM_vStop+0x6>
    2848:	00 d0       	rcall	.+0      	; 0x284a <PWM_vStop+0x8>
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	9a 81       	ldd	r25, Y+2	; 0x02
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	99 f1       	breq	.+102    	; 0x28c0 <PWM_vStop+0x7e>
		switch(PWM->PWM_TimerChannel){
    285a:	e9 81       	ldd	r30, Y+1	; 0x01
    285c:	fa 81       	ldd	r31, Y+2	; 0x02
    285e:	80 81       	ld	r24, Z
    2860:	28 2f       	mov	r18, r24
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	3c 83       	std	Y+4, r19	; 0x04
    2866:	2b 83       	std	Y+3, r18	; 0x03
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	9c 81       	ldd	r25, Y+4	; 0x04
    286c:	8e 30       	cpi	r24, 0x0E	; 14
    286e:	91 05       	cpc	r25, r1
    2870:	54 f4       	brge	.+20     	; 0x2886 <PWM_vStop+0x44>
    2872:	2b 81       	ldd	r18, Y+3	; 0x03
    2874:	3c 81       	ldd	r19, Y+4	; 0x04
    2876:	22 30       	cpi	r18, 0x02	; 2
    2878:	31 05       	cpc	r19, r1
    287a:	9c f4       	brge	.+38     	; 0x28a2 <PWM_vStop+0x60>
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	99 23       	and	r25, r25
    2882:	f4 f0       	brlt	.+60     	; 0x28c0 <PWM_vStop+0x7e>
    2884:	06 c0       	rjmp	.+12     	; 0x2892 <PWM_vStop+0x50>
    2886:	2b 81       	ldd	r18, Y+3	; 0x03
    2888:	3c 81       	ldd	r19, Y+4	; 0x04
    288a:	20 31       	cpi	r18, 0x10	; 16
    288c:	31 05       	cpc	r19, r1
    288e:	c4 f4       	brge	.+48     	; 0x28c0 <PWM_vStop+0x7e>
    2890:	10 c0       	rjmp	.+32     	; 0x28b2 <PWM_vStop+0x70>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			TCCR0_REG &= 0xF8;
    2892:	a3 e5       	ldi	r26, 0x53	; 83
    2894:	b0 e0       	ldi	r27, 0x00	; 0
    2896:	e3 e5       	ldi	r30, 0x53	; 83
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
    289c:	88 7f       	andi	r24, 0xF8	; 248
    289e:	8c 93       	st	X, r24
    28a0:	0f c0       	rjmp	.+30     	; 0x28c0 <PWM_vStop+0x7e>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			TCCR1B_REG &= 0xF8;
    28a2:	ae e4       	ldi	r26, 0x4E	; 78
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	ee e4       	ldi	r30, 0x4E	; 78
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	88 7f       	andi	r24, 0xF8	; 248
    28ae:	8c 93       	st	X, r24
    28b0:	07 c0       	rjmp	.+14     	; 0x28c0 <PWM_vStop+0x7e>
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			TCCR2_REG &= 0xF8;
    28b2:	a5 e4       	ldi	r26, 0x45	; 69
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	e5 e4       	ldi	r30, 0x45	; 69
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	88 7f       	andi	r24, 0xF8	; 248
    28be:	8c 93       	st	X, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <GIE_vEnableInterrupts>:
/***************************************************************/

#include "GIE_interface.h"

// This function is responsible for enabling GIE for interrupts
void GIE_vEnableInterrupts(){
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, 7);
    28d6:	af e5       	ldi	r26, 0x5F	; 95
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	ef e5       	ldi	r30, 0x5F	; 95
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	80 68       	ori	r24, 0x80	; 128
    28e2:	8c 93       	st	X, r24
}
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <GIE_vDisableInterrupts>:

// This function is responsible for disabling GIE for interrupts
void GIE_vDisableInterrupts(){
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, 7);
    28f2:	af e5       	ldi	r26, 0x5F	; 95
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	ef e5       	ldi	r30, 0x5F	; 95
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	8f 77       	andi	r24, 0x7F	; 127
    28fe:	8c 93       	st	X, r24
}
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <DIO_vPinInit>:
/*************** Version : 1.0            **********************/
/***************************************************************/

#include "DIO_interface.h"

void DIO_vPinInit(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinDir, u8 Copy_u8PinVal){
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	00 d0       	rcall	.+0      	; 0x290c <DIO_vPinInit+0x6>
    290c:	00 d0       	rcall	.+0      	; 0x290e <DIO_vPinInit+0x8>
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	6a 83       	std	Y+2, r22	; 0x02
    2916:	4b 83       	std	Y+3, r20	; 0x03
    2918:	2c 83       	std	Y+4, r18	; 0x04
	DIO_vSetPinDir(Copy_u8PortName, Copy_u8PinNum, Copy_u8PinDir);
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	6a 81       	ldd	r22, Y+2	; 0x02
    291e:	4b 81       	ldd	r20, Y+3	; 0x03
    2920:	0e 94 9e 14 	call	0x293c	; 0x293c <DIO_vSetPinDir>
	DIO_vSetPinValue(Copy_u8PortName, Copy_u8PinNum, Copy_u8PinVal);
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	6a 81       	ldd	r22, Y+2	; 0x02
    2928:	4c 81       	ldd	r20, Y+4	; 0x04
    292a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
}
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	08 95       	ret

0000293c <DIO_vSetPinDir>:

//sets data direction of 1 pin in a port
void DIO_vSetPinDir(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinDir){
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	27 97       	sbiw	r28, 0x07	; 7
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	de bf       	out	0x3e, r29	; 62
    294c:	0f be       	out	0x3f, r0	; 63
    294e:	cd bf       	out	0x3d, r28	; 61
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	6a 83       	std	Y+2, r22	; 0x02
    2954:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir == OUTPUT)
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	81 30       	cpi	r24, 0x01	; 1
    295a:	09 f0       	breq	.+2      	; 0x295e <DIO_vSetPinDir+0x22>
    295c:	6f c0       	rjmp	.+222    	; 0x2a3c <DIO_vSetPinDir+0x100>
	{
		switch(Copy_u8PortName)
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	3f 83       	std	Y+7, r19	; 0x07
    2966:	2e 83       	std	Y+6, r18	; 0x06
    2968:	8e 81       	ldd	r24, Y+6	; 0x06
    296a:	9f 81       	ldd	r25, Y+7	; 0x07
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	91 05       	cpc	r25, r1
    2970:	49 f1       	breq	.+82     	; 0x29c4 <DIO_vSetPinDir+0x88>
    2972:	2e 81       	ldd	r18, Y+6	; 0x06
    2974:	3f 81       	ldd	r19, Y+7	; 0x07
    2976:	22 30       	cpi	r18, 0x02	; 2
    2978:	31 05       	cpc	r19, r1
    297a:	2c f4       	brge	.+10     	; 0x2986 <DIO_vSetPinDir+0x4a>
    297c:	8e 81       	ldd	r24, Y+6	; 0x06
    297e:	9f 81       	ldd	r25, Y+7	; 0x07
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	61 f0       	breq	.+24     	; 0x299c <DIO_vSetPinDir+0x60>
    2984:	d2 c0       	rjmp	.+420    	; 0x2b2a <DIO_vSetPinDir+0x1ee>
    2986:	2e 81       	ldd	r18, Y+6	; 0x06
    2988:	3f 81       	ldd	r19, Y+7	; 0x07
    298a:	22 30       	cpi	r18, 0x02	; 2
    298c:	31 05       	cpc	r19, r1
    298e:	71 f1       	breq	.+92     	; 0x29ec <DIO_vSetPinDir+0xb0>
    2990:	8e 81       	ldd	r24, Y+6	; 0x06
    2992:	9f 81       	ldd	r25, Y+7	; 0x07
    2994:	83 30       	cpi	r24, 0x03	; 3
    2996:	91 05       	cpc	r25, r1
    2998:	e9 f1       	breq	.+122    	; 0x2a14 <DIO_vSetPinDir+0xd8>
    299a:	c7 c0       	rjmp	.+398    	; 0x2b2a <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: SET_BIT(DDRA_REG, Copy_u8PinNum); break;
    299c:	aa e3       	ldi	r26, 0x3A	; 58
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	ea e3       	ldi	r30, 0x3A	; 58
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	48 2f       	mov	r20, r24
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	02 2e       	mov	r0, r18
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <DIO_vSetPinDir+0x7e>
    29b6:	88 0f       	add	r24, r24
    29b8:	99 1f       	adc	r25, r25
    29ba:	0a 94       	dec	r0
    29bc:	e2 f7       	brpl	.-8      	; 0x29b6 <DIO_vSetPinDir+0x7a>
    29be:	84 2b       	or	r24, r20
    29c0:	8c 93       	st	X, r24
    29c2:	b3 c0       	rjmp	.+358    	; 0x2b2a <DIO_vSetPinDir+0x1ee>
		case PORTB: SET_BIT(DDRB_REG, Copy_u8PinNum); break;
    29c4:	a7 e3       	ldi	r26, 0x37	; 55
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e7 e3       	ldi	r30, 0x37	; 55
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	48 2f       	mov	r20, r24
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	28 2f       	mov	r18, r24
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	02 2e       	mov	r0, r18
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <DIO_vSetPinDir+0xa6>
    29de:	88 0f       	add	r24, r24
    29e0:	99 1f       	adc	r25, r25
    29e2:	0a 94       	dec	r0
    29e4:	e2 f7       	brpl	.-8      	; 0x29de <DIO_vSetPinDir+0xa2>
    29e6:	84 2b       	or	r24, r20
    29e8:	8c 93       	st	X, r24
    29ea:	9f c0       	rjmp	.+318    	; 0x2b2a <DIO_vSetPinDir+0x1ee>
		case PORTC: SET_BIT(DDRC_REG, Copy_u8PinNum); break;
    29ec:	a4 e3       	ldi	r26, 0x34	; 52
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e4 e3       	ldi	r30, 0x34	; 52
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	48 2f       	mov	r20, r24
    29f8:	8a 81       	ldd	r24, Y+2	; 0x02
    29fa:	28 2f       	mov	r18, r24
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	02 2e       	mov	r0, r18
    2a04:	02 c0       	rjmp	.+4      	; 0x2a0a <DIO_vSetPinDir+0xce>
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	0a 94       	dec	r0
    2a0c:	e2 f7       	brpl	.-8      	; 0x2a06 <DIO_vSetPinDir+0xca>
    2a0e:	84 2b       	or	r24, r20
    2a10:	8c 93       	st	X, r24
    2a12:	8b c0       	rjmp	.+278    	; 0x2b2a <DIO_vSetPinDir+0x1ee>
		case PORTD: SET_BIT(DDRD_REG, Copy_u8PinNum); break;
    2a14:	a1 e3       	ldi	r26, 0x31	; 49
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e1 e3       	ldi	r30, 0x31	; 49
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	48 2f       	mov	r20, r24
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	02 2e       	mov	r0, r18
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <DIO_vSetPinDir+0xf6>
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	0a 94       	dec	r0
    2a34:	e2 f7       	brpl	.-8      	; 0x2a2e <DIO_vSetPinDir+0xf2>
    2a36:	84 2b       	or	r24, r20
    2a38:	8c 93       	st	X, r24
    2a3a:	77 c0       	rjmp	.+238    	; 0x2b2a <DIO_vSetPinDir+0x1ee>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	88 23       	and	r24, r24
    2a40:	09 f0       	breq	.+2      	; 0x2a44 <DIO_vSetPinDir+0x108>
    2a42:	73 c0       	rjmp	.+230    	; 0x2b2a <DIO_vSetPinDir+0x1ee>
	{
		switch(Copy_u8PortName)
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	28 2f       	mov	r18, r24
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	3d 83       	std	Y+5, r19	; 0x05
    2a4c:	2c 83       	std	Y+4, r18	; 0x04
    2a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a50:	9d 81       	ldd	r25, Y+5	; 0x05
    2a52:	81 30       	cpi	r24, 0x01	; 1
    2a54:	91 05       	cpc	r25, r1
    2a56:	59 f1       	breq	.+86     	; 0x2aae <DIO_vSetPinDir+0x172>
    2a58:	2c 81       	ldd	r18, Y+4	; 0x04
    2a5a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a5c:	22 30       	cpi	r18, 0x02	; 2
    2a5e:	31 05       	cpc	r19, r1
    2a60:	2c f4       	brge	.+10     	; 0x2a6c <DIO_vSetPinDir+0x130>
    2a62:	8c 81       	ldd	r24, Y+4	; 0x04
    2a64:	9d 81       	ldd	r25, Y+5	; 0x05
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	69 f0       	breq	.+26     	; 0x2a84 <DIO_vSetPinDir+0x148>
    2a6a:	5f c0       	rjmp	.+190    	; 0x2b2a <DIO_vSetPinDir+0x1ee>
    2a6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a70:	22 30       	cpi	r18, 0x02	; 2
    2a72:	31 05       	cpc	r19, r1
    2a74:	89 f1       	breq	.+98     	; 0x2ad8 <DIO_vSetPinDir+0x19c>
    2a76:	8c 81       	ldd	r24, Y+4	; 0x04
    2a78:	9d 81       	ldd	r25, Y+5	; 0x05
    2a7a:	83 30       	cpi	r24, 0x03	; 3
    2a7c:	91 05       	cpc	r25, r1
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <DIO_vSetPinDir+0x146>
    2a80:	40 c0       	rjmp	.+128    	; 0x2b02 <DIO_vSetPinDir+0x1c6>
    2a82:	53 c0       	rjmp	.+166    	; 0x2b2a <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: CLR_BIT(DDRA_REG, Copy_u8PinNum); break;
    2a84:	aa e3       	ldi	r26, 0x3A	; 58
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	ea e3       	ldi	r30, 0x3A	; 58
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	48 2f       	mov	r20, r24
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	02 2e       	mov	r0, r18
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <DIO_vSetPinDir+0x166>
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	0a 94       	dec	r0
    2aa4:	e2 f7       	brpl	.-8      	; 0x2a9e <DIO_vSetPinDir+0x162>
    2aa6:	80 95       	com	r24
    2aa8:	84 23       	and	r24, r20
    2aaa:	8c 93       	st	X, r24
    2aac:	3e c0       	rjmp	.+124    	; 0x2b2a <DIO_vSetPinDir+0x1ee>
		case PORTB: CLR_BIT(DDRB_REG, Copy_u8PinNum); break;
    2aae:	a7 e3       	ldi	r26, 0x37	; 55
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	e7 e3       	ldi	r30, 0x37	; 55
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	48 2f       	mov	r20, r24
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	28 2f       	mov	r18, r24
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	02 2e       	mov	r0, r18
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <DIO_vSetPinDir+0x190>
    2ac8:	88 0f       	add	r24, r24
    2aca:	99 1f       	adc	r25, r25
    2acc:	0a 94       	dec	r0
    2ace:	e2 f7       	brpl	.-8      	; 0x2ac8 <DIO_vSetPinDir+0x18c>
    2ad0:	80 95       	com	r24
    2ad2:	84 23       	and	r24, r20
    2ad4:	8c 93       	st	X, r24
    2ad6:	29 c0       	rjmp	.+82     	; 0x2b2a <DIO_vSetPinDir+0x1ee>
		case PORTC: CLR_BIT(DDRC_REG, Copy_u8PinNum); break;
    2ad8:	a4 e3       	ldi	r26, 0x34	; 52
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e4 e3       	ldi	r30, 0x34	; 52
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	48 2f       	mov	r20, r24
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	02 2e       	mov	r0, r18
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <DIO_vSetPinDir+0x1ba>
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	0a 94       	dec	r0
    2af8:	e2 f7       	brpl	.-8      	; 0x2af2 <DIO_vSetPinDir+0x1b6>
    2afa:	80 95       	com	r24
    2afc:	84 23       	and	r24, r20
    2afe:	8c 93       	st	X, r24
    2b00:	14 c0       	rjmp	.+40     	; 0x2b2a <DIO_vSetPinDir+0x1ee>
		case PORTD: CLR_BIT(DDRD_REG, Copy_u8PinNum); break;
    2b02:	a1 e3       	ldi	r26, 0x31	; 49
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e1 e3       	ldi	r30, 0x31	; 49
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	48 2f       	mov	r20, r24
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	28 2f       	mov	r18, r24
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	02 2e       	mov	r0, r18
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <DIO_vSetPinDir+0x1e4>
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	0a 94       	dec	r0
    2b22:	e2 f7       	brpl	.-8      	; 0x2b1c <DIO_vSetPinDir+0x1e0>
    2b24:	80 95       	com	r24
    2b26:	84 23       	and	r24, r20
    2b28:	8c 93       	st	X, r24
		}
	}
}
    2b2a:	27 96       	adiw	r28, 0x07	; 7
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <DIO_vSetPinValue>:

//sets value of 1 pin in a port
void DIO_vSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinVal){
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	27 97       	sbiw	r28, 0x07	; 7
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	6a 83       	std	Y+2, r22	; 0x02
    2b54:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinVal == HIGH)
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	81 30       	cpi	r24, 0x01	; 1
    2b5a:	09 f0       	breq	.+2      	; 0x2b5e <DIO_vSetPinValue+0x22>
    2b5c:	6f c0       	rjmp	.+222    	; 0x2c3c <DIO_vSetPinValue+0x100>
	{
		switch(Copy_u8PortName)
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	28 2f       	mov	r18, r24
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	3f 83       	std	Y+7, r19	; 0x07
    2b66:	2e 83       	std	Y+6, r18	; 0x06
    2b68:	8e 81       	ldd	r24, Y+6	; 0x06
    2b6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b6c:	81 30       	cpi	r24, 0x01	; 1
    2b6e:	91 05       	cpc	r25, r1
    2b70:	49 f1       	breq	.+82     	; 0x2bc4 <DIO_vSetPinValue+0x88>
    2b72:	2e 81       	ldd	r18, Y+6	; 0x06
    2b74:	3f 81       	ldd	r19, Y+7	; 0x07
    2b76:	22 30       	cpi	r18, 0x02	; 2
    2b78:	31 05       	cpc	r19, r1
    2b7a:	2c f4       	brge	.+10     	; 0x2b86 <DIO_vSetPinValue+0x4a>
    2b7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b7e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	61 f0       	breq	.+24     	; 0x2b9c <DIO_vSetPinValue+0x60>
    2b84:	d2 c0       	rjmp	.+420    	; 0x2d2a <DIO_vSetPinValue+0x1ee>
    2b86:	2e 81       	ldd	r18, Y+6	; 0x06
    2b88:	3f 81       	ldd	r19, Y+7	; 0x07
    2b8a:	22 30       	cpi	r18, 0x02	; 2
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	71 f1       	breq	.+92     	; 0x2bec <DIO_vSetPinValue+0xb0>
    2b90:	8e 81       	ldd	r24, Y+6	; 0x06
    2b92:	9f 81       	ldd	r25, Y+7	; 0x07
    2b94:	83 30       	cpi	r24, 0x03	; 3
    2b96:	91 05       	cpc	r25, r1
    2b98:	e9 f1       	breq	.+122    	; 0x2c14 <DIO_vSetPinValue+0xd8>
    2b9a:	c7 c0       	rjmp	.+398    	; 0x2d2a <DIO_vSetPinValue+0x1ee>
		{
		case PORTA: SET_BIT(PORTA_REG, Copy_u8PinNum); break;
    2b9c:	ab e3       	ldi	r26, 0x3B	; 59
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	eb e3       	ldi	r30, 0x3B	; 59
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	48 2f       	mov	r20, r24
    2ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    2baa:	28 2f       	mov	r18, r24
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	02 2e       	mov	r0, r18
    2bb4:	02 c0       	rjmp	.+4      	; 0x2bba <DIO_vSetPinValue+0x7e>
    2bb6:	88 0f       	add	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	0a 94       	dec	r0
    2bbc:	e2 f7       	brpl	.-8      	; 0x2bb6 <DIO_vSetPinValue+0x7a>
    2bbe:	84 2b       	or	r24, r20
    2bc0:	8c 93       	st	X, r24
    2bc2:	b3 c0       	rjmp	.+358    	; 0x2d2a <DIO_vSetPinValue+0x1ee>
		case PORTB: SET_BIT(PORTB_REG, Copy_u8PinNum); break;
    2bc4:	a8 e3       	ldi	r26, 0x38	; 56
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	e8 e3       	ldi	r30, 0x38	; 56
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	48 2f       	mov	r20, r24
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	02 2e       	mov	r0, r18
    2bdc:	02 c0       	rjmp	.+4      	; 0x2be2 <DIO_vSetPinValue+0xa6>
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	0a 94       	dec	r0
    2be4:	e2 f7       	brpl	.-8      	; 0x2bde <DIO_vSetPinValue+0xa2>
    2be6:	84 2b       	or	r24, r20
    2be8:	8c 93       	st	X, r24
    2bea:	9f c0       	rjmp	.+318    	; 0x2d2a <DIO_vSetPinValue+0x1ee>
		case PORTC: SET_BIT(PORTC_REG, Copy_u8PinNum); break;
    2bec:	a5 e3       	ldi	r26, 0x35	; 53
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e5 e3       	ldi	r30, 0x35	; 53
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	48 2f       	mov	r20, r24
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	02 2e       	mov	r0, r18
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <DIO_vSetPinValue+0xce>
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	0a 94       	dec	r0
    2c0c:	e2 f7       	brpl	.-8      	; 0x2c06 <DIO_vSetPinValue+0xca>
    2c0e:	84 2b       	or	r24, r20
    2c10:	8c 93       	st	X, r24
    2c12:	8b c0       	rjmp	.+278    	; 0x2d2a <DIO_vSetPinValue+0x1ee>
		case PORTD: SET_BIT(PORTD_REG, Copy_u8PinNum); break;
    2c14:	a2 e3       	ldi	r26, 0x32	; 50
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	e2 e3       	ldi	r30, 0x32	; 50
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	48 2f       	mov	r20, r24
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	28 2f       	mov	r18, r24
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	02 2e       	mov	r0, r18
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <DIO_vSetPinValue+0xf6>
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	0a 94       	dec	r0
    2c34:	e2 f7       	brpl	.-8      	; 0x2c2e <DIO_vSetPinValue+0xf2>
    2c36:	84 2b       	or	r24, r20
    2c38:	8c 93       	st	X, r24
    2c3a:	77 c0       	rjmp	.+238    	; 0x2d2a <DIO_vSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinVal == LOW)
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	88 23       	and	r24, r24
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <DIO_vSetPinValue+0x108>
    2c42:	73 c0       	rjmp	.+230    	; 0x2d2a <DIO_vSetPinValue+0x1ee>
	{
		switch(Copy_u8PortName)
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	3d 83       	std	Y+5, r19	; 0x05
    2c4c:	2c 83       	std	Y+4, r18	; 0x04
    2c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c50:	9d 81       	ldd	r25, Y+5	; 0x05
    2c52:	81 30       	cpi	r24, 0x01	; 1
    2c54:	91 05       	cpc	r25, r1
    2c56:	59 f1       	breq	.+86     	; 0x2cae <DIO_vSetPinValue+0x172>
    2c58:	2c 81       	ldd	r18, Y+4	; 0x04
    2c5a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c5c:	22 30       	cpi	r18, 0x02	; 2
    2c5e:	31 05       	cpc	r19, r1
    2c60:	2c f4       	brge	.+10     	; 0x2c6c <DIO_vSetPinValue+0x130>
    2c62:	8c 81       	ldd	r24, Y+4	; 0x04
    2c64:	9d 81       	ldd	r25, Y+5	; 0x05
    2c66:	00 97       	sbiw	r24, 0x00	; 0
    2c68:	69 f0       	breq	.+26     	; 0x2c84 <DIO_vSetPinValue+0x148>
    2c6a:	5f c0       	rjmp	.+190    	; 0x2d2a <DIO_vSetPinValue+0x1ee>
    2c6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c70:	22 30       	cpi	r18, 0x02	; 2
    2c72:	31 05       	cpc	r19, r1
    2c74:	89 f1       	breq	.+98     	; 0x2cd8 <DIO_vSetPinValue+0x19c>
    2c76:	8c 81       	ldd	r24, Y+4	; 0x04
    2c78:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7a:	83 30       	cpi	r24, 0x03	; 3
    2c7c:	91 05       	cpc	r25, r1
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <DIO_vSetPinValue+0x146>
    2c80:	40 c0       	rjmp	.+128    	; 0x2d02 <DIO_vSetPinValue+0x1c6>
    2c82:	53 c0       	rjmp	.+166    	; 0x2d2a <DIO_vSetPinValue+0x1ee>
		{
		case PORTA: CLR_BIT(PORTA_REG, Copy_u8PinNum); break;
    2c84:	ab e3       	ldi	r26, 0x3B	; 59
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	eb e3       	ldi	r30, 0x3B	; 59
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	48 2f       	mov	r20, r24
    2c90:	8a 81       	ldd	r24, Y+2	; 0x02
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	02 2e       	mov	r0, r18
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <DIO_vSetPinValue+0x166>
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	0a 94       	dec	r0
    2ca4:	e2 f7       	brpl	.-8      	; 0x2c9e <DIO_vSetPinValue+0x162>
    2ca6:	80 95       	com	r24
    2ca8:	84 23       	and	r24, r20
    2caa:	8c 93       	st	X, r24
    2cac:	3e c0       	rjmp	.+124    	; 0x2d2a <DIO_vSetPinValue+0x1ee>
		case PORTB: CLR_BIT(PORTB_REG, Copy_u8PinNum); break;
    2cae:	a8 e3       	ldi	r26, 0x38	; 56
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	e8 e3       	ldi	r30, 0x38	; 56
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	48 2f       	mov	r20, r24
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	02 2e       	mov	r0, r18
    2cc6:	02 c0       	rjmp	.+4      	; 0x2ccc <DIO_vSetPinValue+0x190>
    2cc8:	88 0f       	add	r24, r24
    2cca:	99 1f       	adc	r25, r25
    2ccc:	0a 94       	dec	r0
    2cce:	e2 f7       	brpl	.-8      	; 0x2cc8 <DIO_vSetPinValue+0x18c>
    2cd0:	80 95       	com	r24
    2cd2:	84 23       	and	r24, r20
    2cd4:	8c 93       	st	X, r24
    2cd6:	29 c0       	rjmp	.+82     	; 0x2d2a <DIO_vSetPinValue+0x1ee>
		case PORTC: CLR_BIT(PORTC_REG, Copy_u8PinNum); break;
    2cd8:	a5 e3       	ldi	r26, 0x35	; 53
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	e5 e3       	ldi	r30, 0x35	; 53
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	48 2f       	mov	r20, r24
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	02 2e       	mov	r0, r18
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <DIO_vSetPinValue+0x1ba>
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	0a 94       	dec	r0
    2cf8:	e2 f7       	brpl	.-8      	; 0x2cf2 <DIO_vSetPinValue+0x1b6>
    2cfa:	80 95       	com	r24
    2cfc:	84 23       	and	r24, r20
    2cfe:	8c 93       	st	X, r24
    2d00:	14 c0       	rjmp	.+40     	; 0x2d2a <DIO_vSetPinValue+0x1ee>
		case PORTD: CLR_BIT(PORTD_REG, Copy_u8PinNum); break;
    2d02:	a2 e3       	ldi	r26, 0x32	; 50
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	e2 e3       	ldi	r30, 0x32	; 50
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	48 2f       	mov	r20, r24
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	28 2f       	mov	r18, r24
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	02 2e       	mov	r0, r18
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <DIO_vSetPinValue+0x1e4>
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	0a 94       	dec	r0
    2d22:	e2 f7       	brpl	.-8      	; 0x2d1c <DIO_vSetPinValue+0x1e0>
    2d24:	80 95       	com	r24
    2d26:	84 23       	and	r24, r20
    2d28:	8c 93       	st	X, r24
		}
	}
}
    2d2a:	27 96       	adiw	r28, 0x07	; 7
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	08 95       	ret

00002d3c <DIO_u8ReadPinValue>:

//reads value on 1 pin in a port
u8 DIO_u8ReadPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum){
    2d3c:	df 93       	push	r29
    2d3e:	cf 93       	push	r28
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <DIO_u8ReadPinValue+0x6>
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <DIO_u8ReadPinValue+0x8>
    2d44:	0f 92       	push	r0
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	8a 83       	std	Y+2, r24	; 0x02
    2d4c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReadValue = 0;
    2d4e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	28 2f       	mov	r18, r24
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	3d 83       	std	Y+5, r19	; 0x05
    2d58:	2c 83       	std	Y+4, r18	; 0x04
    2d5a:	4c 81       	ldd	r20, Y+4	; 0x04
    2d5c:	5d 81       	ldd	r21, Y+5	; 0x05
    2d5e:	41 30       	cpi	r20, 0x01	; 1
    2d60:	51 05       	cpc	r21, r1
    2d62:	41 f1       	breq	.+80     	; 0x2db4 <DIO_u8ReadPinValue+0x78>
    2d64:	8c 81       	ldd	r24, Y+4	; 0x04
    2d66:	9d 81       	ldd	r25, Y+5	; 0x05
    2d68:	82 30       	cpi	r24, 0x02	; 2
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	34 f4       	brge	.+12     	; 0x2d7a <DIO_u8ReadPinValue+0x3e>
    2d6e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d70:	3d 81       	ldd	r19, Y+5	; 0x05
    2d72:	21 15       	cp	r18, r1
    2d74:	31 05       	cpc	r19, r1
    2d76:	61 f0       	breq	.+24     	; 0x2d90 <DIO_u8ReadPinValue+0x54>
    2d78:	52 c0       	rjmp	.+164    	; 0x2e1e <DIO_u8ReadPinValue+0xe2>
    2d7a:	4c 81       	ldd	r20, Y+4	; 0x04
    2d7c:	5d 81       	ldd	r21, Y+5	; 0x05
    2d7e:	42 30       	cpi	r20, 0x02	; 2
    2d80:	51 05       	cpc	r21, r1
    2d82:	51 f1       	breq	.+84     	; 0x2dd8 <DIO_u8ReadPinValue+0x9c>
    2d84:	8c 81       	ldd	r24, Y+4	; 0x04
    2d86:	9d 81       	ldd	r25, Y+5	; 0x05
    2d88:	83 30       	cpi	r24, 0x03	; 3
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	b9 f1       	breq	.+110    	; 0x2dfc <DIO_u8ReadPinValue+0xc0>
    2d8e:	47 c0       	rjmp	.+142    	; 0x2e1e <DIO_u8ReadPinValue+0xe2>
	{
	case PORTA: Local_u8ReadValue = GET_BIT(PINA_REG, Copy_u8PinNum); break;
    2d90:	e9 e3       	ldi	r30, 0x39	; 57
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	28 2f       	mov	r18, r24
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	88 2f       	mov	r24, r24
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	a9 01       	movw	r20, r18
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <DIO_u8ReadPinValue+0x6c>
    2da4:	55 95       	asr	r21
    2da6:	47 95       	ror	r20
    2da8:	8a 95       	dec	r24
    2daa:	e2 f7       	brpl	.-8      	; 0x2da4 <DIO_u8ReadPinValue+0x68>
    2dac:	ca 01       	movw	r24, r20
    2dae:	81 70       	andi	r24, 0x01	; 1
    2db0:	89 83       	std	Y+1, r24	; 0x01
    2db2:	35 c0       	rjmp	.+106    	; 0x2e1e <DIO_u8ReadPinValue+0xe2>
	case PORTB: Local_u8ReadValue = GET_BIT(PINB_REG, Copy_u8PinNum); break;
    2db4:	e6 e3       	ldi	r30, 0x36	; 54
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	28 2f       	mov	r18, r24
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	88 2f       	mov	r24, r24
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	a9 01       	movw	r20, r18
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <DIO_u8ReadPinValue+0x90>
    2dc8:	55 95       	asr	r21
    2dca:	47 95       	ror	r20
    2dcc:	8a 95       	dec	r24
    2dce:	e2 f7       	brpl	.-8      	; 0x2dc8 <DIO_u8ReadPinValue+0x8c>
    2dd0:	ca 01       	movw	r24, r20
    2dd2:	81 70       	andi	r24, 0x01	; 1
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	23 c0       	rjmp	.+70     	; 0x2e1e <DIO_u8ReadPinValue+0xe2>
	case PORTC: Local_u8ReadValue = GET_BIT(PINC_REG, Copy_u8PinNum); break;
    2dd8:	e3 e3       	ldi	r30, 0x33	; 51
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	88 2f       	mov	r24, r24
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	a9 01       	movw	r20, r18
    2dea:	02 c0       	rjmp	.+4      	; 0x2df0 <DIO_u8ReadPinValue+0xb4>
    2dec:	55 95       	asr	r21
    2dee:	47 95       	ror	r20
    2df0:	8a 95       	dec	r24
    2df2:	e2 f7       	brpl	.-8      	; 0x2dec <DIO_u8ReadPinValue+0xb0>
    2df4:	ca 01       	movw	r24, r20
    2df6:	81 70       	andi	r24, 0x01	; 1
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	11 c0       	rjmp	.+34     	; 0x2e1e <DIO_u8ReadPinValue+0xe2>
	case PORTD: Local_u8ReadValue = GET_BIT(PIND_REG, Copy_u8PinNum); break;
    2dfc:	e0 e3       	ldi	r30, 0x30	; 48
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	88 2f       	mov	r24, r24
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	a9 01       	movw	r20, r18
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <DIO_u8ReadPinValue+0xd8>
    2e10:	55 95       	asr	r21
    2e12:	47 95       	ror	r20
    2e14:	8a 95       	dec	r24
    2e16:	e2 f7       	brpl	.-8      	; 0x2e10 <DIO_u8ReadPinValue+0xd4>
    2e18:	ca 01       	movw	r24, r20
    2e1a:	81 70       	andi	r24, 0x01	; 1
    2e1c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ReadValue;
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	cf 91       	pop	r28
    2e2c:	df 91       	pop	r29
    2e2e:	08 95       	ret

00002e30 <DIO_vTogglePinValue>:

void DIO_vTogglePinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum){
    2e30:	df 93       	push	r29
    2e32:	cf 93       	push	r28
    2e34:	00 d0       	rcall	.+0      	; 0x2e36 <DIO_vTogglePinValue+0x6>
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <DIO_vTogglePinValue+0x8>
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	28 2f       	mov	r18, r24
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	3c 83       	std	Y+4, r19	; 0x04
    2e48:	2b 83       	std	Y+3, r18	; 0x03
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4e:	81 30       	cpi	r24, 0x01	; 1
    2e50:	91 05       	cpc	r25, r1
    2e52:	49 f1       	breq	.+82     	; 0x2ea6 <DIO_vTogglePinValue+0x76>
    2e54:	2b 81       	ldd	r18, Y+3	; 0x03
    2e56:	3c 81       	ldd	r19, Y+4	; 0x04
    2e58:	22 30       	cpi	r18, 0x02	; 2
    2e5a:	31 05       	cpc	r19, r1
    2e5c:	2c f4       	brge	.+10     	; 0x2e68 <DIO_vTogglePinValue+0x38>
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	9c 81       	ldd	r25, Y+4	; 0x04
    2e62:	00 97       	sbiw	r24, 0x00	; 0
    2e64:	61 f0       	breq	.+24     	; 0x2e7e <DIO_vTogglePinValue+0x4e>
    2e66:	5a c0       	rjmp	.+180    	; 0x2f1c <DIO_vTogglePinValue+0xec>
    2e68:	2b 81       	ldd	r18, Y+3	; 0x03
    2e6a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e6c:	22 30       	cpi	r18, 0x02	; 2
    2e6e:	31 05       	cpc	r19, r1
    2e70:	71 f1       	breq	.+92     	; 0x2ece <DIO_vTogglePinValue+0x9e>
    2e72:	8b 81       	ldd	r24, Y+3	; 0x03
    2e74:	9c 81       	ldd	r25, Y+4	; 0x04
    2e76:	83 30       	cpi	r24, 0x03	; 3
    2e78:	91 05       	cpc	r25, r1
    2e7a:	e9 f1       	breq	.+122    	; 0x2ef6 <DIO_vTogglePinValue+0xc6>
    2e7c:	4f c0       	rjmp	.+158    	; 0x2f1c <DIO_vTogglePinValue+0xec>
	{
	case PORTA: TOG_BIT(PORTA_REG, Copy_u8PinNum); break;
    2e7e:	ab e3       	ldi	r26, 0x3B	; 59
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	eb e3       	ldi	r30, 0x3B	; 59
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	48 2f       	mov	r20, r24
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	28 2f       	mov	r18, r24
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	02 2e       	mov	r0, r18
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <DIO_vTogglePinValue+0x6c>
    2e98:	88 0f       	add	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	0a 94       	dec	r0
    2e9e:	e2 f7       	brpl	.-8      	; 0x2e98 <DIO_vTogglePinValue+0x68>
    2ea0:	84 27       	eor	r24, r20
    2ea2:	8c 93       	st	X, r24
    2ea4:	3b c0       	rjmp	.+118    	; 0x2f1c <DIO_vTogglePinValue+0xec>
	case PORTB: TOG_BIT(PORTB_REG, Copy_u8PinNum); break;
    2ea6:	a8 e3       	ldi	r26, 0x38	; 56
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	e8 e3       	ldi	r30, 0x38	; 56
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	48 2f       	mov	r20, r24
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	28 2f       	mov	r18, r24
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	02 2e       	mov	r0, r18
    2ebe:	02 c0       	rjmp	.+4      	; 0x2ec4 <DIO_vTogglePinValue+0x94>
    2ec0:	88 0f       	add	r24, r24
    2ec2:	99 1f       	adc	r25, r25
    2ec4:	0a 94       	dec	r0
    2ec6:	e2 f7       	brpl	.-8      	; 0x2ec0 <DIO_vTogglePinValue+0x90>
    2ec8:	84 27       	eor	r24, r20
    2eca:	8c 93       	st	X, r24
    2ecc:	27 c0       	rjmp	.+78     	; 0x2f1c <DIO_vTogglePinValue+0xec>
	case PORTC: TOG_BIT(PORTC_REG, Copy_u8PinNum); break;
    2ece:	a5 e3       	ldi	r26, 0x35	; 53
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	e5 e3       	ldi	r30, 0x35	; 53
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	48 2f       	mov	r20, r24
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	28 2f       	mov	r18, r24
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	02 2e       	mov	r0, r18
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <DIO_vTogglePinValue+0xbc>
    2ee8:	88 0f       	add	r24, r24
    2eea:	99 1f       	adc	r25, r25
    2eec:	0a 94       	dec	r0
    2eee:	e2 f7       	brpl	.-8      	; 0x2ee8 <DIO_vTogglePinValue+0xb8>
    2ef0:	84 27       	eor	r24, r20
    2ef2:	8c 93       	st	X, r24
    2ef4:	13 c0       	rjmp	.+38     	; 0x2f1c <DIO_vTogglePinValue+0xec>
	case PORTD: TOG_BIT(PORTD_REG, Copy_u8PinNum); break;
    2ef6:	a2 e3       	ldi	r26, 0x32	; 50
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	e2 e3       	ldi	r30, 0x32	; 50
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	48 2f       	mov	r20, r24
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	28 2f       	mov	r18, r24
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	02 2e       	mov	r0, r18
    2f0e:	02 c0       	rjmp	.+4      	; 0x2f14 <DIO_vTogglePinValue+0xe4>
    2f10:	88 0f       	add	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	0a 94       	dec	r0
    2f16:	e2 f7       	brpl	.-8      	; 0x2f10 <DIO_vTogglePinValue+0xe0>
    2f18:	84 27       	eor	r24, r20
    2f1a:	8c 93       	st	X, r24
	}
}
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	08 95       	ret

00002f2a <DIO_vSetGroupDir>:

//sets data direction of all 8 pins in a port
void DIO_vSetGroupDir(u8 Copy_u8PortName, u8 Copy_u8PortDir){
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <DIO_vSetGroupDir+0x6>
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <DIO_vSetGroupDir+0x8>
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <DIO_vSetGroupDir+0xa>
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	89 83       	std	Y+1, r24	; 0x01
    2f3a:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortDir == OUTPUT)
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	81 30       	cpi	r24, 0x01	; 1
    2f40:	99 f5       	brne	.+102    	; 0x2fa8 <DIO_vSetGroupDir+0x7e>
	{
		switch(Copy_u8PortName)
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	3e 83       	std	Y+6, r19	; 0x06
    2f4a:	2d 83       	std	Y+5, r18	; 0x05
    2f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f50:	81 30       	cpi	r24, 0x01	; 1
    2f52:	91 05       	cpc	r25, r1
    2f54:	d1 f0       	breq	.+52     	; 0x2f8a <DIO_vSetGroupDir+0x60>
    2f56:	2d 81       	ldd	r18, Y+5	; 0x05
    2f58:	3e 81       	ldd	r19, Y+6	; 0x06
    2f5a:	22 30       	cpi	r18, 0x02	; 2
    2f5c:	31 05       	cpc	r19, r1
    2f5e:	2c f4       	brge	.+10     	; 0x2f6a <DIO_vSetGroupDir+0x40>
    2f60:	8d 81       	ldd	r24, Y+5	; 0x05
    2f62:	9e 81       	ldd	r25, Y+6	; 0x06
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	61 f0       	breq	.+24     	; 0x2f80 <DIO_vSetGroupDir+0x56>
    2f68:	50 c0       	rjmp	.+160    	; 0x300a <DIO_vSetGroupDir+0xe0>
    2f6a:	2d 81       	ldd	r18, Y+5	; 0x05
    2f6c:	3e 81       	ldd	r19, Y+6	; 0x06
    2f6e:	22 30       	cpi	r18, 0x02	; 2
    2f70:	31 05       	cpc	r19, r1
    2f72:	81 f0       	breq	.+32     	; 0x2f94 <DIO_vSetGroupDir+0x6a>
    2f74:	8d 81       	ldd	r24, Y+5	; 0x05
    2f76:	9e 81       	ldd	r25, Y+6	; 0x06
    2f78:	83 30       	cpi	r24, 0x03	; 3
    2f7a:	91 05       	cpc	r25, r1
    2f7c:	81 f0       	breq	.+32     	; 0x2f9e <DIO_vSetGroupDir+0x74>
    2f7e:	45 c0       	rjmp	.+138    	; 0x300a <DIO_vSetGroupDir+0xe0>
		{
		case PORTA: DDRA_REG = 0xFF; break;
    2f80:	ea e3       	ldi	r30, 0x3A	; 58
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	8f ef       	ldi	r24, 0xFF	; 255
    2f86:	80 83       	st	Z, r24
    2f88:	40 c0       	rjmp	.+128    	; 0x300a <DIO_vSetGroupDir+0xe0>
		case PORTB: DDRB_REG = 0xFF; break;
    2f8a:	e7 e3       	ldi	r30, 0x37	; 55
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	8f ef       	ldi	r24, 0xFF	; 255
    2f90:	80 83       	st	Z, r24
    2f92:	3b c0       	rjmp	.+118    	; 0x300a <DIO_vSetGroupDir+0xe0>
		case PORTC: DDRC_REG = 0xFF; break;
    2f94:	e4 e3       	ldi	r30, 0x34	; 52
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	8f ef       	ldi	r24, 0xFF	; 255
    2f9a:	80 83       	st	Z, r24
    2f9c:	36 c0       	rjmp	.+108    	; 0x300a <DIO_vSetGroupDir+0xe0>
		case PORTD: DDRD_REG = 0xFF; break;
    2f9e:	e1 e3       	ldi	r30, 0x31	; 49
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	8f ef       	ldi	r24, 0xFF	; 255
    2fa4:	80 83       	st	Z, r24
    2fa6:	31 c0       	rjmp	.+98     	; 0x300a <DIO_vSetGroupDir+0xe0>
		}
	}
	else if(Copy_u8PortDir == INPUT)
    2fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2faa:	88 23       	and	r24, r24
    2fac:	71 f5       	brne	.+92     	; 0x300a <DIO_vSetGroupDir+0xe0>
	{
		switch(Copy_u8PortName)
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	28 2f       	mov	r18, r24
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	3c 83       	std	Y+4, r19	; 0x04
    2fb6:	2b 83       	std	Y+3, r18	; 0x03
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbc:	81 30       	cpi	r24, 0x01	; 1
    2fbe:	91 05       	cpc	r25, r1
    2fc0:	c9 f0       	breq	.+50     	; 0x2ff4 <DIO_vSetGroupDir+0xca>
    2fc2:	2b 81       	ldd	r18, Y+3	; 0x03
    2fc4:	3c 81       	ldd	r19, Y+4	; 0x04
    2fc6:	22 30       	cpi	r18, 0x02	; 2
    2fc8:	31 05       	cpc	r19, r1
    2fca:	2c f4       	brge	.+10     	; 0x2fd6 <DIO_vSetGroupDir+0xac>
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	61 f0       	breq	.+24     	; 0x2fec <DIO_vSetGroupDir+0xc2>
    2fd4:	1a c0       	rjmp	.+52     	; 0x300a <DIO_vSetGroupDir+0xe0>
    2fd6:	2b 81       	ldd	r18, Y+3	; 0x03
    2fd8:	3c 81       	ldd	r19, Y+4	; 0x04
    2fda:	22 30       	cpi	r18, 0x02	; 2
    2fdc:	31 05       	cpc	r19, r1
    2fde:	71 f0       	breq	.+28     	; 0x2ffc <DIO_vSetGroupDir+0xd2>
    2fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe4:	83 30       	cpi	r24, 0x03	; 3
    2fe6:	91 05       	cpc	r25, r1
    2fe8:	69 f0       	breq	.+26     	; 0x3004 <DIO_vSetGroupDir+0xda>
    2fea:	0f c0       	rjmp	.+30     	; 0x300a <DIO_vSetGroupDir+0xe0>
		{
		case PORTA: DDRA_REG = 0x00; break;
    2fec:	ea e3       	ldi	r30, 0x3A	; 58
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	10 82       	st	Z, r1
    2ff2:	0b c0       	rjmp	.+22     	; 0x300a <DIO_vSetGroupDir+0xe0>
		case PORTB: DDRB_REG = 0x00; break;
    2ff4:	e7 e3       	ldi	r30, 0x37	; 55
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	10 82       	st	Z, r1
    2ffa:	07 c0       	rjmp	.+14     	; 0x300a <DIO_vSetGroupDir+0xe0>
		case PORTC: DDRC_REG = 0x00; break;
    2ffc:	e4 e3       	ldi	r30, 0x34	; 52
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	10 82       	st	Z, r1
    3002:	03 c0       	rjmp	.+6      	; 0x300a <DIO_vSetGroupDir+0xe0>
		case PORTD: DDRD_REG = 0x00; break;
    3004:	e1 e3       	ldi	r30, 0x31	; 49
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	10 82       	st	Z, r1
		}
	}
}
    300a:	26 96       	adiw	r28, 0x06	; 6
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	08 95       	ret

0000301c <DIO_vSetGroupValue>:

//sets value of all 8 pins in a port
void DIO_vSetGroupValue(u8 Copy_u8PortName, u8 Copy_u8PortValue){
    301c:	df 93       	push	r29
    301e:	cf 93       	push	r28
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	28 97       	sbiw	r28, 0x08	; 8
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	cd bf       	out	0x3d, r28	; 61
    3030:	89 83       	std	Y+1, r24	; 0x01
    3032:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	28 2f       	mov	r18, r24
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	38 87       	std	Y+8, r19	; 0x08
    303c:	2f 83       	std	Y+7, r18	; 0x07
    303e:	8f 81       	ldd	r24, Y+7	; 0x07
    3040:	98 85       	ldd	r25, Y+8	; 0x08
    3042:	81 30       	cpi	r24, 0x01	; 1
    3044:	91 05       	cpc	r25, r1
    3046:	e9 f0       	breq	.+58     	; 0x3082 <DIO_vSetGroupValue+0x66>
    3048:	2f 81       	ldd	r18, Y+7	; 0x07
    304a:	38 85       	ldd	r19, Y+8	; 0x08
    304c:	22 30       	cpi	r18, 0x02	; 2
    304e:	31 05       	cpc	r19, r1
    3050:	2c f4       	brge	.+10     	; 0x305c <DIO_vSetGroupValue+0x40>
    3052:	8f 81       	ldd	r24, Y+7	; 0x07
    3054:	98 85       	ldd	r25, Y+8	; 0x08
    3056:	00 97       	sbiw	r24, 0x00	; 0
    3058:	61 f0       	breq	.+24     	; 0x3072 <DIO_vSetGroupValue+0x56>
    305a:	2a c0       	rjmp	.+84     	; 0x30b0 <DIO_vSetGroupValue+0x94>
    305c:	2f 81       	ldd	r18, Y+7	; 0x07
    305e:	38 85       	ldd	r19, Y+8	; 0x08
    3060:	22 30       	cpi	r18, 0x02	; 2
    3062:	31 05       	cpc	r19, r1
    3064:	b1 f0       	breq	.+44     	; 0x3092 <DIO_vSetGroupValue+0x76>
    3066:	8f 81       	ldd	r24, Y+7	; 0x07
    3068:	98 85       	ldd	r25, Y+8	; 0x08
    306a:	83 30       	cpi	r24, 0x03	; 3
    306c:	91 05       	cpc	r25, r1
    306e:	c9 f0       	breq	.+50     	; 0x30a2 <DIO_vSetGroupValue+0x86>
    3070:	1f c0       	rjmp	.+62     	; 0x30b0 <DIO_vSetGroupValue+0x94>
	{
	case PORTA: PORTA_REG = (PORTA_REG&0) | Copy_u8PortValue; break;
    3072:	eb e3       	ldi	r30, 0x3B	; 59
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	90 81       	ld	r25, Z
    3078:	eb e3       	ldi	r30, 0x3B	; 59
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	8a 81       	ldd	r24, Y+2	; 0x02
    307e:	80 83       	st	Z, r24
    3080:	17 c0       	rjmp	.+46     	; 0x30b0 <DIO_vSetGroupValue+0x94>
	case PORTB: PORTB_REG = (PORTB_REG&0) | Copy_u8PortValue; break;
    3082:	e8 e3       	ldi	r30, 0x38	; 56
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	20 81       	ld	r18, Z
    3088:	e8 e3       	ldi	r30, 0x38	; 56
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	80 83       	st	Z, r24
    3090:	0f c0       	rjmp	.+30     	; 0x30b0 <DIO_vSetGroupValue+0x94>
	case PORTC: PORTC_REG = (PORTC_REG&0) | Copy_u8PortValue; break;
    3092:	e5 e3       	ldi	r30, 0x35	; 53
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	30 81       	ld	r19, Z
    3098:	e5 e3       	ldi	r30, 0x35	; 53
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	8a 81       	ldd	r24, Y+2	; 0x02
    309e:	80 83       	st	Z, r24
    30a0:	07 c0       	rjmp	.+14     	; 0x30b0 <DIO_vSetGroupValue+0x94>
	case PORTD: PORTD_REG = (PORTD_REG&0) | Copy_u8PortValue; break;
    30a2:	e2 e3       	ldi	r30, 0x32	; 50
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
    30a8:	e2 e3       	ldi	r30, 0x32	; 50
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	80 83       	st	Z, r24
	}
}
    30b0:	28 96       	adiw	r28, 0x08	; 8
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	de bf       	out	0x3e, r29	; 62
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	cd bf       	out	0x3d, r28	; 61
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <DIO_u8ReadGroupValue>:

//reads value on all 8 pins of a port
u8 DIO_u8ReadGroupValue(u8 Copy_u8PortName){
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	00 d0       	rcall	.+0      	; 0x30c8 <DIO_u8ReadGroupValue+0x6>
    30c8:	00 d0       	rcall	.+0      	; 0x30ca <DIO_u8ReadGroupValue+0x8>
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReadValue = 0;
    30d0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    30d2:	8a 81       	ldd	r24, Y+2	; 0x02
    30d4:	28 2f       	mov	r18, r24
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	3c 83       	std	Y+4, r19	; 0x04
    30da:	2b 83       	std	Y+3, r18	; 0x03
    30dc:	8b 81       	ldd	r24, Y+3	; 0x03
    30de:	9c 81       	ldd	r25, Y+4	; 0x04
    30e0:	81 30       	cpi	r24, 0x01	; 1
    30e2:	91 05       	cpc	r25, r1
    30e4:	d1 f0       	breq	.+52     	; 0x311a <DIO_u8ReadGroupValue+0x58>
    30e6:	2b 81       	ldd	r18, Y+3	; 0x03
    30e8:	3c 81       	ldd	r19, Y+4	; 0x04
    30ea:	22 30       	cpi	r18, 0x02	; 2
    30ec:	31 05       	cpc	r19, r1
    30ee:	2c f4       	brge	.+10     	; 0x30fa <DIO_u8ReadGroupValue+0x38>
    30f0:	8b 81       	ldd	r24, Y+3	; 0x03
    30f2:	9c 81       	ldd	r25, Y+4	; 0x04
    30f4:	00 97       	sbiw	r24, 0x00	; 0
    30f6:	61 f0       	breq	.+24     	; 0x3110 <DIO_u8ReadGroupValue+0x4e>
    30f8:	1e c0       	rjmp	.+60     	; 0x3136 <DIO_u8ReadGroupValue+0x74>
    30fa:	2b 81       	ldd	r18, Y+3	; 0x03
    30fc:	3c 81       	ldd	r19, Y+4	; 0x04
    30fe:	22 30       	cpi	r18, 0x02	; 2
    3100:	31 05       	cpc	r19, r1
    3102:	81 f0       	breq	.+32     	; 0x3124 <DIO_u8ReadGroupValue+0x62>
    3104:	8b 81       	ldd	r24, Y+3	; 0x03
    3106:	9c 81       	ldd	r25, Y+4	; 0x04
    3108:	83 30       	cpi	r24, 0x03	; 3
    310a:	91 05       	cpc	r25, r1
    310c:	81 f0       	breq	.+32     	; 0x312e <DIO_u8ReadGroupValue+0x6c>
    310e:	13 c0       	rjmp	.+38     	; 0x3136 <DIO_u8ReadGroupValue+0x74>
	{
	case PORTA: Local_u8ReadValue = PINA_REG; break;
    3110:	e9 e3       	ldi	r30, 0x39	; 57
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	89 83       	std	Y+1, r24	; 0x01
    3118:	0e c0       	rjmp	.+28     	; 0x3136 <DIO_u8ReadGroupValue+0x74>
	case PORTB: Local_u8ReadValue = PINB_REG; break;
    311a:	e6 e3       	ldi	r30, 0x36	; 54
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	89 83       	std	Y+1, r24	; 0x01
    3122:	09 c0       	rjmp	.+18     	; 0x3136 <DIO_u8ReadGroupValue+0x74>
	case PORTC: Local_u8ReadValue = PINC_REG; break;
    3124:	e3 e3       	ldi	r30, 0x33	; 51
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	89 83       	std	Y+1, r24	; 0x01
    312c:	04 c0       	rjmp	.+8      	; 0x3136 <DIO_u8ReadGroupValue+0x74>
	case PORTD: Local_u8ReadValue = PIND_REG; break;
    312e:	e0 e3       	ldi	r30, 0x30	; 48
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ReadValue;
    3136:	89 81       	ldd	r24, Y+1	; 0x01
}
    3138:	0f 90       	pop	r0
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	cf 91       	pop	r28
    3142:	df 91       	pop	r29
    3144:	08 95       	ret

00003146 <DIO_vSet4LSBDir>:

//sets data direction of 4 LSB pins of a port
void DIO_vSet4LSBDir(u8 Copy_u8PortName, u8 Copy_u8PinDir){
    3146:	df 93       	push	r29
    3148:	cf 93       	push	r28
    314a:	00 d0       	rcall	.+0      	; 0x314c <DIO_vSet4LSBDir+0x6>
    314c:	00 d0       	rcall	.+0      	; 0x314e <DIO_vSet4LSBDir+0x8>
    314e:	00 d0       	rcall	.+0      	; 0x3150 <DIO_vSet4LSBDir+0xa>
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	89 83       	std	Y+1, r24	; 0x01
    3156:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinDir == OUTPUT)
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	81 30       	cpi	r24, 0x01	; 1
    315c:	09 f0       	breq	.+2      	; 0x3160 <DIO_vSet4LSBDir+0x1a>
    315e:	3f c0       	rjmp	.+126    	; 0x31de <DIO_vSet4LSBDir+0x98>
	{
		switch(Copy_u8PortName)
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	3e 83       	std	Y+6, r19	; 0x06
    3168:	2d 83       	std	Y+5, r18	; 0x05
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	9e 81       	ldd	r25, Y+6	; 0x06
    316e:	81 30       	cpi	r24, 0x01	; 1
    3170:	91 05       	cpc	r25, r1
    3172:	e9 f0       	breq	.+58     	; 0x31ae <DIO_vSet4LSBDir+0x68>
    3174:	2d 81       	ldd	r18, Y+5	; 0x05
    3176:	3e 81       	ldd	r19, Y+6	; 0x06
    3178:	22 30       	cpi	r18, 0x02	; 2
    317a:	31 05       	cpc	r19, r1
    317c:	2c f4       	brge	.+10     	; 0x3188 <DIO_vSet4LSBDir+0x42>
    317e:	8d 81       	ldd	r24, Y+5	; 0x05
    3180:	9e 81       	ldd	r25, Y+6	; 0x06
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	61 f0       	breq	.+24     	; 0x319e <DIO_vSet4LSBDir+0x58>
    3186:	6d c0       	rjmp	.+218    	; 0x3262 <DIO_vSet4LSBDir+0x11c>
    3188:	2d 81       	ldd	r18, Y+5	; 0x05
    318a:	3e 81       	ldd	r19, Y+6	; 0x06
    318c:	22 30       	cpi	r18, 0x02	; 2
    318e:	31 05       	cpc	r19, r1
    3190:	b1 f0       	breq	.+44     	; 0x31be <DIO_vSet4LSBDir+0x78>
    3192:	8d 81       	ldd	r24, Y+5	; 0x05
    3194:	9e 81       	ldd	r25, Y+6	; 0x06
    3196:	83 30       	cpi	r24, 0x03	; 3
    3198:	91 05       	cpc	r25, r1
    319a:	c9 f0       	breq	.+50     	; 0x31ce <DIO_vSet4LSBDir+0x88>
    319c:	62 c0       	rjmp	.+196    	; 0x3262 <DIO_vSet4LSBDir+0x11c>
		{
		case PORTA: DDRA_REG |= 0x0F; break;
    319e:	aa e3       	ldi	r26, 0x3A	; 58
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	ea e3       	ldi	r30, 0x3A	; 58
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	80 81       	ld	r24, Z
    31a8:	8f 60       	ori	r24, 0x0F	; 15
    31aa:	8c 93       	st	X, r24
    31ac:	5a c0       	rjmp	.+180    	; 0x3262 <DIO_vSet4LSBDir+0x11c>
		case PORTB: DDRB_REG |= 0x0F; break;
    31ae:	a7 e3       	ldi	r26, 0x37	; 55
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	e7 e3       	ldi	r30, 0x37	; 55
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	8f 60       	ori	r24, 0x0F	; 15
    31ba:	8c 93       	st	X, r24
    31bc:	52 c0       	rjmp	.+164    	; 0x3262 <DIO_vSet4LSBDir+0x11c>
		case PORTC: DDRC_REG |= 0x0F; break;
    31be:	a4 e3       	ldi	r26, 0x34	; 52
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e4 e3       	ldi	r30, 0x34	; 52
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	8f 60       	ori	r24, 0x0F	; 15
    31ca:	8c 93       	st	X, r24
    31cc:	4a c0       	rjmp	.+148    	; 0x3262 <DIO_vSet4LSBDir+0x11c>
		case PORTD: DDRD_REG |= 0x0F; break;
    31ce:	a1 e3       	ldi	r26, 0x31	; 49
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	e1 e3       	ldi	r30, 0x31	; 49
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	8f 60       	ori	r24, 0x0F	; 15
    31da:	8c 93       	st	X, r24
    31dc:	42 c0       	rjmp	.+132    	; 0x3262 <DIO_vSet4LSBDir+0x11c>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	88 23       	and	r24, r24
    31e2:	09 f0       	breq	.+2      	; 0x31e6 <DIO_vSet4LSBDir+0xa0>
    31e4:	3e c0       	rjmp	.+124    	; 0x3262 <DIO_vSet4LSBDir+0x11c>
	{
		switch(Copy_u8PortName)
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	28 2f       	mov	r18, r24
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	3c 83       	std	Y+4, r19	; 0x04
    31ee:	2b 83       	std	Y+3, r18	; 0x03
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	9c 81       	ldd	r25, Y+4	; 0x04
    31f4:	81 30       	cpi	r24, 0x01	; 1
    31f6:	91 05       	cpc	r25, r1
    31f8:	e9 f0       	breq	.+58     	; 0x3234 <DIO_vSet4LSBDir+0xee>
    31fa:	2b 81       	ldd	r18, Y+3	; 0x03
    31fc:	3c 81       	ldd	r19, Y+4	; 0x04
    31fe:	22 30       	cpi	r18, 0x02	; 2
    3200:	31 05       	cpc	r19, r1
    3202:	2c f4       	brge	.+10     	; 0x320e <DIO_vSet4LSBDir+0xc8>
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	9c 81       	ldd	r25, Y+4	; 0x04
    3208:	00 97       	sbiw	r24, 0x00	; 0
    320a:	61 f0       	breq	.+24     	; 0x3224 <DIO_vSet4LSBDir+0xde>
    320c:	2a c0       	rjmp	.+84     	; 0x3262 <DIO_vSet4LSBDir+0x11c>
    320e:	2b 81       	ldd	r18, Y+3	; 0x03
    3210:	3c 81       	ldd	r19, Y+4	; 0x04
    3212:	22 30       	cpi	r18, 0x02	; 2
    3214:	31 05       	cpc	r19, r1
    3216:	b1 f0       	breq	.+44     	; 0x3244 <DIO_vSet4LSBDir+0xfe>
    3218:	8b 81       	ldd	r24, Y+3	; 0x03
    321a:	9c 81       	ldd	r25, Y+4	; 0x04
    321c:	83 30       	cpi	r24, 0x03	; 3
    321e:	91 05       	cpc	r25, r1
    3220:	c9 f0       	breq	.+50     	; 0x3254 <DIO_vSet4LSBDir+0x10e>
    3222:	1f c0       	rjmp	.+62     	; 0x3262 <DIO_vSet4LSBDir+0x11c>
		{
		case PORTA: DDRA_REG &= 0xF0; break;
    3224:	aa e3       	ldi	r26, 0x3A	; 58
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	ea e3       	ldi	r30, 0x3A	; 58
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
    322e:	80 7f       	andi	r24, 0xF0	; 240
    3230:	8c 93       	st	X, r24
    3232:	17 c0       	rjmp	.+46     	; 0x3262 <DIO_vSet4LSBDir+0x11c>
		case PORTB: DDRB_REG &= 0xF0; break;
    3234:	a7 e3       	ldi	r26, 0x37	; 55
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	e7 e3       	ldi	r30, 0x37	; 55
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	80 7f       	andi	r24, 0xF0	; 240
    3240:	8c 93       	st	X, r24
    3242:	0f c0       	rjmp	.+30     	; 0x3262 <DIO_vSet4LSBDir+0x11c>
		case PORTC: DDRC_REG &= 0xF0; break;
    3244:	a4 e3       	ldi	r26, 0x34	; 52
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	e4 e3       	ldi	r30, 0x34	; 52
    324a:	f0 e0       	ldi	r31, 0x00	; 0
    324c:	80 81       	ld	r24, Z
    324e:	80 7f       	andi	r24, 0xF0	; 240
    3250:	8c 93       	st	X, r24
    3252:	07 c0       	rjmp	.+14     	; 0x3262 <DIO_vSet4LSBDir+0x11c>
		case PORTD: DDRD_REG &= 0xF0; break;
    3254:	a1 e3       	ldi	r26, 0x31	; 49
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	e1 e3       	ldi	r30, 0x31	; 49
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	80 7f       	andi	r24, 0xF0	; 240
    3260:	8c 93       	st	X, r24
		}
	}
}
    3262:	26 96       	adiw	r28, 0x06	; 6
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <DIO_vSet4MSBDir>:

//sets data direction of 4 MSB pins of a port
void DIO_vSet4MSBDir(u8 Copy_u8PortName, u8 Copy_u8PinDir){
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	00 d0       	rcall	.+0      	; 0x327a <DIO_vSet4MSBDir+0x6>
    327a:	00 d0       	rcall	.+0      	; 0x327c <DIO_vSet4MSBDir+0x8>
    327c:	00 d0       	rcall	.+0      	; 0x327e <DIO_vSet4MSBDir+0xa>
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
    3282:	89 83       	std	Y+1, r24	; 0x01
    3284:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinDir == OUTPUT)
    3286:	8a 81       	ldd	r24, Y+2	; 0x02
    3288:	81 30       	cpi	r24, 0x01	; 1
    328a:	09 f0       	breq	.+2      	; 0x328e <DIO_vSet4MSBDir+0x1a>
    328c:	3f c0       	rjmp	.+126    	; 0x330c <DIO_vSet4MSBDir+0x98>
	{
		switch(Copy_u8PortName)
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	3e 83       	std	Y+6, r19	; 0x06
    3296:	2d 83       	std	Y+5, r18	; 0x05
    3298:	8d 81       	ldd	r24, Y+5	; 0x05
    329a:	9e 81       	ldd	r25, Y+6	; 0x06
    329c:	81 30       	cpi	r24, 0x01	; 1
    329e:	91 05       	cpc	r25, r1
    32a0:	e9 f0       	breq	.+58     	; 0x32dc <DIO_vSet4MSBDir+0x68>
    32a2:	2d 81       	ldd	r18, Y+5	; 0x05
    32a4:	3e 81       	ldd	r19, Y+6	; 0x06
    32a6:	22 30       	cpi	r18, 0x02	; 2
    32a8:	31 05       	cpc	r19, r1
    32aa:	2c f4       	brge	.+10     	; 0x32b6 <DIO_vSet4MSBDir+0x42>
    32ac:	8d 81       	ldd	r24, Y+5	; 0x05
    32ae:	9e 81       	ldd	r25, Y+6	; 0x06
    32b0:	00 97       	sbiw	r24, 0x00	; 0
    32b2:	61 f0       	breq	.+24     	; 0x32cc <DIO_vSet4MSBDir+0x58>
    32b4:	6d c0       	rjmp	.+218    	; 0x3390 <DIO_vSet4MSBDir+0x11c>
    32b6:	2d 81       	ldd	r18, Y+5	; 0x05
    32b8:	3e 81       	ldd	r19, Y+6	; 0x06
    32ba:	22 30       	cpi	r18, 0x02	; 2
    32bc:	31 05       	cpc	r19, r1
    32be:	b1 f0       	breq	.+44     	; 0x32ec <DIO_vSet4MSBDir+0x78>
    32c0:	8d 81       	ldd	r24, Y+5	; 0x05
    32c2:	9e 81       	ldd	r25, Y+6	; 0x06
    32c4:	83 30       	cpi	r24, 0x03	; 3
    32c6:	91 05       	cpc	r25, r1
    32c8:	c9 f0       	breq	.+50     	; 0x32fc <DIO_vSet4MSBDir+0x88>
    32ca:	62 c0       	rjmp	.+196    	; 0x3390 <DIO_vSet4MSBDir+0x11c>
		{
		case PORTA: DDRA_REG |= 0xF0; break;
    32cc:	aa e3       	ldi	r26, 0x3A	; 58
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	ea e3       	ldi	r30, 0x3A	; 58
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	80 6f       	ori	r24, 0xF0	; 240
    32d8:	8c 93       	st	X, r24
    32da:	5a c0       	rjmp	.+180    	; 0x3390 <DIO_vSet4MSBDir+0x11c>
		case PORTB: DDRB_REG |= 0xF0; break;
    32dc:	a7 e3       	ldi	r26, 0x37	; 55
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	e7 e3       	ldi	r30, 0x37	; 55
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	80 81       	ld	r24, Z
    32e6:	80 6f       	ori	r24, 0xF0	; 240
    32e8:	8c 93       	st	X, r24
    32ea:	52 c0       	rjmp	.+164    	; 0x3390 <DIO_vSet4MSBDir+0x11c>
		case PORTC: DDRC_REG |= 0xF0; break;
    32ec:	a4 e3       	ldi	r26, 0x34	; 52
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	e4 e3       	ldi	r30, 0x34	; 52
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	80 6f       	ori	r24, 0xF0	; 240
    32f8:	8c 93       	st	X, r24
    32fa:	4a c0       	rjmp	.+148    	; 0x3390 <DIO_vSet4MSBDir+0x11c>
		case PORTD: DDRD_REG |= 0xF0; break;
    32fc:	a1 e3       	ldi	r26, 0x31	; 49
    32fe:	b0 e0       	ldi	r27, 0x00	; 0
    3300:	e1 e3       	ldi	r30, 0x31	; 49
    3302:	f0 e0       	ldi	r31, 0x00	; 0
    3304:	80 81       	ld	r24, Z
    3306:	80 6f       	ori	r24, 0xF0	; 240
    3308:	8c 93       	st	X, r24
    330a:	42 c0       	rjmp	.+132    	; 0x3390 <DIO_vSet4MSBDir+0x11c>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	88 23       	and	r24, r24
    3310:	09 f0       	breq	.+2      	; 0x3314 <DIO_vSet4MSBDir+0xa0>
    3312:	3e c0       	rjmp	.+124    	; 0x3390 <DIO_vSet4MSBDir+0x11c>
	{
		switch(Copy_u8PortName)
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	28 2f       	mov	r18, r24
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	3c 83       	std	Y+4, r19	; 0x04
    331c:	2b 83       	std	Y+3, r18	; 0x03
    331e:	8b 81       	ldd	r24, Y+3	; 0x03
    3320:	9c 81       	ldd	r25, Y+4	; 0x04
    3322:	81 30       	cpi	r24, 0x01	; 1
    3324:	91 05       	cpc	r25, r1
    3326:	e9 f0       	breq	.+58     	; 0x3362 <DIO_vSet4MSBDir+0xee>
    3328:	2b 81       	ldd	r18, Y+3	; 0x03
    332a:	3c 81       	ldd	r19, Y+4	; 0x04
    332c:	22 30       	cpi	r18, 0x02	; 2
    332e:	31 05       	cpc	r19, r1
    3330:	2c f4       	brge	.+10     	; 0x333c <DIO_vSet4MSBDir+0xc8>
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	9c 81       	ldd	r25, Y+4	; 0x04
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	61 f0       	breq	.+24     	; 0x3352 <DIO_vSet4MSBDir+0xde>
    333a:	2a c0       	rjmp	.+84     	; 0x3390 <DIO_vSet4MSBDir+0x11c>
    333c:	2b 81       	ldd	r18, Y+3	; 0x03
    333e:	3c 81       	ldd	r19, Y+4	; 0x04
    3340:	22 30       	cpi	r18, 0x02	; 2
    3342:	31 05       	cpc	r19, r1
    3344:	b1 f0       	breq	.+44     	; 0x3372 <DIO_vSet4MSBDir+0xfe>
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	9c 81       	ldd	r25, Y+4	; 0x04
    334a:	83 30       	cpi	r24, 0x03	; 3
    334c:	91 05       	cpc	r25, r1
    334e:	c9 f0       	breq	.+50     	; 0x3382 <DIO_vSet4MSBDir+0x10e>
    3350:	1f c0       	rjmp	.+62     	; 0x3390 <DIO_vSet4MSBDir+0x11c>
		{
		case PORTA: DDRA_REG &= 0x0F; break;
    3352:	aa e3       	ldi	r26, 0x3A	; 58
    3354:	b0 e0       	ldi	r27, 0x00	; 0
    3356:	ea e3       	ldi	r30, 0x3A	; 58
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	8f 70       	andi	r24, 0x0F	; 15
    335e:	8c 93       	st	X, r24
    3360:	17 c0       	rjmp	.+46     	; 0x3390 <DIO_vSet4MSBDir+0x11c>
		case PORTB: DDRB_REG &= 0x0F; break;
    3362:	a7 e3       	ldi	r26, 0x37	; 55
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e7 e3       	ldi	r30, 0x37	; 55
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	8f 70       	andi	r24, 0x0F	; 15
    336e:	8c 93       	st	X, r24
    3370:	0f c0       	rjmp	.+30     	; 0x3390 <DIO_vSet4MSBDir+0x11c>
		case PORTC: DDRC_REG &= 0x0F; break;
    3372:	a4 e3       	ldi	r26, 0x34	; 52
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	e4 e3       	ldi	r30, 0x34	; 52
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
    337c:	8f 70       	andi	r24, 0x0F	; 15
    337e:	8c 93       	st	X, r24
    3380:	07 c0       	rjmp	.+14     	; 0x3390 <DIO_vSet4MSBDir+0x11c>
		case PORTD: DDRD_REG &= 0x0F; break;
    3382:	a1 e3       	ldi	r26, 0x31	; 49
    3384:	b0 e0       	ldi	r27, 0x00	; 0
    3386:	e1 e3       	ldi	r30, 0x31	; 49
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	80 81       	ld	r24, Z
    338c:	8f 70       	andi	r24, 0x0F	; 15
    338e:	8c 93       	st	X, r24
		}
	}
}
    3390:	26 96       	adiw	r28, 0x06	; 6
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	cd bf       	out	0x3d, r28	; 61
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <DIO_vSet4LSBValue>:

//sets value of 4LSB pins of a port
void DIO_vSet4LSBValue(u8 Copy_u8PortName, u8 Copy_u8PinVal){
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	00 d0       	rcall	.+0      	; 0x33a8 <DIO_vSet4LSBValue+0x6>
    33a8:	00 d0       	rcall	.+0      	; 0x33aa <DIO_vSet4LSBValue+0x8>
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	89 83       	std	Y+1, r24	; 0x01
    33b0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	28 2f       	mov	r18, r24
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	3c 83       	std	Y+4, r19	; 0x04
    33ba:	2b 83       	std	Y+3, r18	; 0x03
    33bc:	8b 81       	ldd	r24, Y+3	; 0x03
    33be:	9c 81       	ldd	r25, Y+4	; 0x04
    33c0:	81 30       	cpi	r24, 0x01	; 1
    33c2:	91 05       	cpc	r25, r1
    33c4:	09 f1       	breq	.+66     	; 0x3408 <DIO_vSet4LSBValue+0x66>
    33c6:	2b 81       	ldd	r18, Y+3	; 0x03
    33c8:	3c 81       	ldd	r19, Y+4	; 0x04
    33ca:	22 30       	cpi	r18, 0x02	; 2
    33cc:	31 05       	cpc	r19, r1
    33ce:	2c f4       	brge	.+10     	; 0x33da <DIO_vSet4LSBValue+0x38>
    33d0:	8b 81       	ldd	r24, Y+3	; 0x03
    33d2:	9c 81       	ldd	r25, Y+4	; 0x04
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	61 f0       	breq	.+24     	; 0x33f0 <DIO_vSet4LSBValue+0x4e>
    33d8:	3a c0       	rjmp	.+116    	; 0x344e <DIO_vSet4LSBValue+0xac>
    33da:	2b 81       	ldd	r18, Y+3	; 0x03
    33dc:	3c 81       	ldd	r19, Y+4	; 0x04
    33de:	22 30       	cpi	r18, 0x02	; 2
    33e0:	31 05       	cpc	r19, r1
    33e2:	f1 f0       	breq	.+60     	; 0x3420 <DIO_vSet4LSBValue+0x7e>
    33e4:	8b 81       	ldd	r24, Y+3	; 0x03
    33e6:	9c 81       	ldd	r25, Y+4	; 0x04
    33e8:	83 30       	cpi	r24, 0x03	; 3
    33ea:	91 05       	cpc	r25, r1
    33ec:	29 f1       	breq	.+74     	; 0x3438 <DIO_vSet4LSBValue+0x96>
    33ee:	2f c0       	rjmp	.+94     	; 0x344e <DIO_vSet4LSBValue+0xac>
	{
	case PORTA: PORTA_REG = (PORTA_REG&0xF0) | (Copy_u8PinVal&0x0F); break;
    33f0:	ab e3       	ldi	r26, 0x3B	; 59
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	eb e3       	ldi	r30, 0x3B	; 59
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	80 81       	ld	r24, Z
    33fa:	98 2f       	mov	r25, r24
    33fc:	90 7f       	andi	r25, 0xF0	; 240
    33fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3400:	8f 70       	andi	r24, 0x0F	; 15
    3402:	89 2b       	or	r24, r25
    3404:	8c 93       	st	X, r24
    3406:	23 c0       	rjmp	.+70     	; 0x344e <DIO_vSet4LSBValue+0xac>
	case PORTB: PORTB_REG = (PORTB_REG&0xF0) | (Copy_u8PinVal&0x0F); break;
    3408:	a8 e3       	ldi	r26, 0x38	; 56
    340a:	b0 e0       	ldi	r27, 0x00	; 0
    340c:	e8 e3       	ldi	r30, 0x38	; 56
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	80 81       	ld	r24, Z
    3412:	98 2f       	mov	r25, r24
    3414:	90 7f       	andi	r25, 0xF0	; 240
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	8f 70       	andi	r24, 0x0F	; 15
    341a:	89 2b       	or	r24, r25
    341c:	8c 93       	st	X, r24
    341e:	17 c0       	rjmp	.+46     	; 0x344e <DIO_vSet4LSBValue+0xac>
	case PORTC: PORTC_REG = (PORTC_REG&0xF0) | (Copy_u8PinVal&0x0F); break;
    3420:	a5 e3       	ldi	r26, 0x35	; 53
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	e5 e3       	ldi	r30, 0x35	; 53
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	98 2f       	mov	r25, r24
    342c:	90 7f       	andi	r25, 0xF0	; 240
    342e:	8a 81       	ldd	r24, Y+2	; 0x02
    3430:	8f 70       	andi	r24, 0x0F	; 15
    3432:	89 2b       	or	r24, r25
    3434:	8c 93       	st	X, r24
    3436:	0b c0       	rjmp	.+22     	; 0x344e <DIO_vSet4LSBValue+0xac>
	case PORTD: PORTD_REG = (PORTD_REG&0xF0) | (Copy_u8PinVal&0x0F); break;
    3438:	a2 e3       	ldi	r26, 0x32	; 50
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	e2 e3       	ldi	r30, 0x32	; 50
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	80 81       	ld	r24, Z
    3442:	98 2f       	mov	r25, r24
    3444:	90 7f       	andi	r25, 0xF0	; 240
    3446:	8a 81       	ldd	r24, Y+2	; 0x02
    3448:	8f 70       	andi	r24, 0x0F	; 15
    344a:	89 2b       	or	r24, r25
    344c:	8c 93       	st	X, r24
	}
}
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	cf 91       	pop	r28
    3458:	df 91       	pop	r29
    345a:	08 95       	ret

0000345c <DIO_vSet4MSBValue>:

//sets value of 4MSB pins of a port
void DIO_vSet4MSBValue(u8 Copy_u8PortName, u8 Copy_u8PinVal){
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	00 d0       	rcall	.+0      	; 0x3462 <DIO_vSet4MSBValue+0x6>
    3462:	00 d0       	rcall	.+0      	; 0x3464 <DIO_vSet4MSBValue+0x8>
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
    3468:	89 83       	std	Y+1, r24	; 0x01
    346a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	28 2f       	mov	r18, r24
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	3c 83       	std	Y+4, r19	; 0x04
    3474:	2b 83       	std	Y+3, r18	; 0x03
    3476:	8b 81       	ldd	r24, Y+3	; 0x03
    3478:	9c 81       	ldd	r25, Y+4	; 0x04
    347a:	81 30       	cpi	r24, 0x01	; 1
    347c:	91 05       	cpc	r25, r1
    347e:	09 f1       	breq	.+66     	; 0x34c2 <DIO_vSet4MSBValue+0x66>
    3480:	2b 81       	ldd	r18, Y+3	; 0x03
    3482:	3c 81       	ldd	r19, Y+4	; 0x04
    3484:	22 30       	cpi	r18, 0x02	; 2
    3486:	31 05       	cpc	r19, r1
    3488:	2c f4       	brge	.+10     	; 0x3494 <DIO_vSet4MSBValue+0x38>
    348a:	8b 81       	ldd	r24, Y+3	; 0x03
    348c:	9c 81       	ldd	r25, Y+4	; 0x04
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	61 f0       	breq	.+24     	; 0x34aa <DIO_vSet4MSBValue+0x4e>
    3492:	3a c0       	rjmp	.+116    	; 0x3508 <DIO_vSet4MSBValue+0xac>
    3494:	2b 81       	ldd	r18, Y+3	; 0x03
    3496:	3c 81       	ldd	r19, Y+4	; 0x04
    3498:	22 30       	cpi	r18, 0x02	; 2
    349a:	31 05       	cpc	r19, r1
    349c:	f1 f0       	breq	.+60     	; 0x34da <DIO_vSet4MSBValue+0x7e>
    349e:	8b 81       	ldd	r24, Y+3	; 0x03
    34a0:	9c 81       	ldd	r25, Y+4	; 0x04
    34a2:	83 30       	cpi	r24, 0x03	; 3
    34a4:	91 05       	cpc	r25, r1
    34a6:	29 f1       	breq	.+74     	; 0x34f2 <DIO_vSet4MSBValue+0x96>
    34a8:	2f c0       	rjmp	.+94     	; 0x3508 <DIO_vSet4MSBValue+0xac>
	{
	case PORTA: PORTA_REG = (PORTA_REG&0x0F) | (Copy_u8PinVal&0xF0); break;
    34aa:	ab e3       	ldi	r26, 0x3B	; 59
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	eb e3       	ldi	r30, 0x3B	; 59
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	80 81       	ld	r24, Z
    34b4:	98 2f       	mov	r25, r24
    34b6:	9f 70       	andi	r25, 0x0F	; 15
    34b8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ba:	80 7f       	andi	r24, 0xF0	; 240
    34bc:	89 2b       	or	r24, r25
    34be:	8c 93       	st	X, r24
    34c0:	23 c0       	rjmp	.+70     	; 0x3508 <DIO_vSet4MSBValue+0xac>
	case PORTB: PORTB_REG = (PORTB_REG&0x0F) | (Copy_u8PinVal&0xF0); break;
    34c2:	a8 e3       	ldi	r26, 0x38	; 56
    34c4:	b0 e0       	ldi	r27, 0x00	; 0
    34c6:	e8 e3       	ldi	r30, 0x38	; 56
    34c8:	f0 e0       	ldi	r31, 0x00	; 0
    34ca:	80 81       	ld	r24, Z
    34cc:	98 2f       	mov	r25, r24
    34ce:	9f 70       	andi	r25, 0x0F	; 15
    34d0:	8a 81       	ldd	r24, Y+2	; 0x02
    34d2:	80 7f       	andi	r24, 0xF0	; 240
    34d4:	89 2b       	or	r24, r25
    34d6:	8c 93       	st	X, r24
    34d8:	17 c0       	rjmp	.+46     	; 0x3508 <DIO_vSet4MSBValue+0xac>
	case PORTC: PORTC_REG = (PORTC_REG&0x0F) | (Copy_u8PinVal&0xF0); break;
    34da:	a5 e3       	ldi	r26, 0x35	; 53
    34dc:	b0 e0       	ldi	r27, 0x00	; 0
    34de:	e5 e3       	ldi	r30, 0x35	; 53
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	80 81       	ld	r24, Z
    34e4:	98 2f       	mov	r25, r24
    34e6:	9f 70       	andi	r25, 0x0F	; 15
    34e8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ea:	80 7f       	andi	r24, 0xF0	; 240
    34ec:	89 2b       	or	r24, r25
    34ee:	8c 93       	st	X, r24
    34f0:	0b c0       	rjmp	.+22     	; 0x3508 <DIO_vSet4MSBValue+0xac>
	case PORTD: PORTD_REG = (PORTD_REG&0x0F) | (Copy_u8PinVal&0xF0); break;
    34f2:	a2 e3       	ldi	r26, 0x32	; 50
    34f4:	b0 e0       	ldi	r27, 0x00	; 0
    34f6:	e2 e3       	ldi	r30, 0x32	; 50
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	80 81       	ld	r24, Z
    34fc:	98 2f       	mov	r25, r24
    34fe:	9f 70       	andi	r25, 0x0F	; 15
    3500:	8a 81       	ldd	r24, Y+2	; 0x02
    3502:	80 7f       	andi	r24, 0xF0	; 240
    3504:	89 2b       	or	r24, r25
    3506:	8c 93       	st	X, r24
	}
}
    3508:	0f 90       	pop	r0
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <SERVO_vInit>:
/*************** Version : 1.0            **********************/
/***************************************************************/

#include "servo_interface.h"

void SERVO_vInit(const SERVO_PWM_cfg_t *Servo_PWM){
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	00 d0       	rcall	.+0      	; 0x351c <SERVO_vInit+0x6>
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	9a 83       	std	Y+2, r25	; 0x02
    3522:	89 83       	std	Y+1, r24	; 0x01
	if(Servo_PWM != NULL){
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	9a 81       	ldd	r25, Y+2	; 0x02
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	41 f1       	breq	.+80     	; 0x357c <SERVO_vInit+0x66>
		PWM_vInit(&(Servo_PWM->ServoPWM));
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	9a 81       	ldd	r25, Y+2	; 0x02
    3530:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <PWM_vInit>
		if( (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_PhaseFreqICR) || (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_PhaseICR) || (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_FastICR) ){
    3534:	e9 81       	ldd	r30, Y+1	; 0x01
    3536:	fa 81       	ldd	r31, Y+2	; 0x02
    3538:	80 81       	ld	r24, Z
    353a:	88 30       	cpi	r24, 0x08	; 8
    353c:	51 f0       	breq	.+20     	; 0x3552 <SERVO_vInit+0x3c>
    353e:	e9 81       	ldd	r30, Y+1	; 0x01
    3540:	fa 81       	ldd	r31, Y+2	; 0x02
    3542:	80 81       	ld	r24, Z
    3544:	8a 30       	cpi	r24, 0x0A	; 10
    3546:	29 f0       	breq	.+10     	; 0x3552 <SERVO_vInit+0x3c>
    3548:	e9 81       	ldd	r30, Y+1	; 0x01
    354a:	fa 81       	ldd	r31, Y+2	; 0x02
    354c:	80 81       	ld	r24, Z
    354e:	8c 30       	cpi	r24, 0x0C	; 12
    3550:	49 f4       	brne	.+18     	; 0x3564 <SERVO_vInit+0x4e>
			PWM_vSetICR(&(Servo_PWM->ServoPWM), Servo_PWM->ICR_Value);
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	9a 81       	ldd	r25, Y+2	; 0x02
    3556:	e9 81       	ldd	r30, Y+1	; 0x01
    3558:	fa 81       	ldd	r31, Y+2	; 0x02
    355a:	25 81       	ldd	r18, Z+5	; 0x05
    355c:	36 81       	ldd	r19, Z+6	; 0x06
    355e:	b9 01       	movw	r22, r18
    3560:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <PWM_vSetICR>
		}
		SERVO_vChangeDirection(Servo_PWM, Servo_PWM->ServoInitialDirection);
    3564:	e9 81       	ldd	r30, Y+1	; 0x01
    3566:	fa 81       	ldd	r31, Y+2	; 0x02
    3568:	24 81       	ldd	r18, Z+4	; 0x04
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	9a 81       	ldd	r25, Y+2	; 0x02
    356e:	62 2f       	mov	r22, r18
    3570:	0e 94 c3 1a 	call	0x3586	; 0x3586 <SERVO_vChangeDirection>
		PWM_vStart(&(Servo_PWM->ServoPWM));
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	9a 81       	ldd	r25, Y+2	; 0x02
    3578:	0e 94 60 12 	call	0x24c0	; 0x24c0 <PWM_vStart>
	}
}
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	08 95       	ret

00003586 <SERVO_vChangeDirection>:

void SERVO_vChangeDirection(const SERVO_PWM_cfg_t *Servo_PWM, enu_servoDirections Copy_enuDirection){
    3586:	df 93       	push	r29
    3588:	cf 93       	push	r28
    358a:	00 d0       	rcall	.+0      	; 0x358c <SERVO_vChangeDirection+0x6>
    358c:	00 d0       	rcall	.+0      	; 0x358e <SERVO_vChangeDirection+0x8>
    358e:	0f 92       	push	r0
    3590:	cd b7       	in	r28, 0x3d	; 61
    3592:	de b7       	in	r29, 0x3e	; 62
    3594:	9a 83       	std	Y+2, r25	; 0x02
    3596:	89 83       	std	Y+1, r24	; 0x01
    3598:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_enuDirection){
    359a:	8b 81       	ldd	r24, Y+3	; 0x03
    359c:	28 2f       	mov	r18, r24
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	3d 83       	std	Y+5, r19	; 0x05
    35a2:	2c 83       	std	Y+4, r18	; 0x04
    35a4:	8c 81       	ldd	r24, Y+4	; 0x04
    35a6:	9d 81       	ldd	r25, Y+5	; 0x05
    35a8:	81 30       	cpi	r24, 0x01	; 1
    35aa:	91 05       	cpc	r25, r1
    35ac:	99 f0       	breq	.+38     	; 0x35d4 <SERVO_vChangeDirection+0x4e>
    35ae:	2c 81       	ldd	r18, Y+4	; 0x04
    35b0:	3d 81       	ldd	r19, Y+5	; 0x05
    35b2:	22 30       	cpi	r18, 0x02	; 2
    35b4:	31 05       	cpc	r19, r1
    35b6:	c1 f0       	breq	.+48     	; 0x35e8 <SERVO_vChangeDirection+0x62>
    35b8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ba:	9d 81       	ldd	r25, Y+5	; 0x05
    35bc:	00 97       	sbiw	r24, 0x00	; 0
    35be:	e9 f4       	brne	.+58     	; 0x35fa <SERVO_vChangeDirection+0x74>
	case SERVO_0:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_0degree_Value);
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	9a 81       	ldd	r25, Y+2	; 0x02
    35c4:	e9 81       	ldd	r30, Y+1	; 0x01
    35c6:	fa 81       	ldd	r31, Y+2	; 0x02
    35c8:	27 81       	ldd	r18, Z+7	; 0x07
    35ca:	30 85       	ldd	r19, Z+8	; 0x08
    35cc:	b9 01       	movw	r22, r18
    35ce:	0e 94 1c 12 	call	0x2438	; 0x2438 <PWM_vSetOCR>
    35d2:	13 c0       	rjmp	.+38     	; 0x35fa <SERVO_vChangeDirection+0x74>
		break;
	case SERVO_90:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_90degree_Value);
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	9a 81       	ldd	r25, Y+2	; 0x02
    35d8:	e9 81       	ldd	r30, Y+1	; 0x01
    35da:	fa 81       	ldd	r31, Y+2	; 0x02
    35dc:	21 85       	ldd	r18, Z+9	; 0x09
    35de:	32 85       	ldd	r19, Z+10	; 0x0a
    35e0:	b9 01       	movw	r22, r18
    35e2:	0e 94 1c 12 	call	0x2438	; 0x2438 <PWM_vSetOCR>
    35e6:	09 c0       	rjmp	.+18     	; 0x35fa <SERVO_vChangeDirection+0x74>
		break;
	case SERVO_180:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_180degree_Value);
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	9a 81       	ldd	r25, Y+2	; 0x02
    35ec:	e9 81       	ldd	r30, Y+1	; 0x01
    35ee:	fa 81       	ldd	r31, Y+2	; 0x02
    35f0:	23 85       	ldd	r18, Z+11	; 0x0b
    35f2:	34 85       	ldd	r19, Z+12	; 0x0c
    35f4:	b9 01       	movw	r22, r18
    35f6:	0e 94 1c 12 	call	0x2438	; 0x2438 <PWM_vSetOCR>
		break;
	default: /* Do Nothing */ break;
	}
}
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	0f 90       	pop	r0
    3602:	0f 90       	pop	r0
    3604:	cf 91       	pop	r28
    3606:	df 91       	pop	r29
    3608:	08 95       	ret

0000360a <SERVO_vStart>:

void SERVO_vStart(const SERVO_PWM_cfg_t *Servo_PWM){
    360a:	df 93       	push	r29
    360c:	cf 93       	push	r28
    360e:	00 d0       	rcall	.+0      	; 0x3610 <SERVO_vStart+0x6>
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	9a 83       	std	Y+2, r25	; 0x02
    3616:	89 83       	std	Y+1, r24	; 0x01
	PWM_vStart(&(Servo_PWM->ServoPWM));
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	9a 81       	ldd	r25, Y+2	; 0x02
    361c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <PWM_vStart>
}
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	cf 91       	pop	r28
    3626:	df 91       	pop	r29
    3628:	08 95       	ret

0000362a <SERVO_vStop>:

void SERVO_vStop(const SERVO_PWM_cfg_t *Servo_PWM){
    362a:	df 93       	push	r29
    362c:	cf 93       	push	r28
    362e:	00 d0       	rcall	.+0      	; 0x3630 <SERVO_vStop+0x6>
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
    3634:	9a 83       	std	Y+2, r25	; 0x02
    3636:	89 83       	std	Y+1, r24	; 0x01
	PWM_vStop(&(Servo_PWM->ServoPWM));
    3638:	89 81       	ldd	r24, Y+1	; 0x01
    363a:	9a 81       	ldd	r25, Y+2	; 0x02
    363c:	0e 94 21 14 	call	0x2842	; 0x2842 <PWM_vStop>
}
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	08 95       	ret

0000364a <EEPROM_vinit>:

#include "EEPROM_interface.h"
#include <util/delay.h>
#define F_CPU	8000000UL

void EEPROM_vinit(void){
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
	TWI_vInit();
    3652:	0e 94 ad 07 	call	0xf5a	; 0xf5a <TWI_vInit>
}
    3656:	cf 91       	pop	r28
    3658:	df 91       	pop	r29
    365a:	08 95       	ret

0000365c <EEPROM_u8WriteByte>:
u8 EEPROM_u8WriteByte(u8 Copy_u8Address, u8 Copy_u8Data, enu_EEPROM_Blocks Copy_enuBlock){
    365c:	df 93       	push	r29
    365e:	cf 93       	push	r28
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62
    3664:	62 97       	sbiw	r28, 0x12	; 18
    3666:	0f b6       	in	r0, 0x3f	; 63
    3668:	f8 94       	cli
    366a:	de bf       	out	0x3e, r29	; 62
    366c:	0f be       	out	0x3f, r0	; 63
    366e:	cd bf       	out	0x3d, r28	; 61
    3670:	8f 87       	std	Y+15, r24	; 0x0f
    3672:	68 8b       	std	Y+16, r22	; 0x10
    3674:	49 8b       	std	Y+17, r20	; 0x11
	TWI_vStart();
    3676:	0e 94 cf 07 	call	0xf9e	; 0xf9e <TWI_vStart>
	if(TWI_u8GetStatus() != TW_START){
    367a:	0e 94 4d 08 	call	0x109a	; 0x109a <TWI_u8GetStatus>
    367e:	88 30       	cpi	r24, 0x08	; 8
    3680:	11 f0       	breq	.+4      	; 0x3686 <EEPROM_u8WriteByte+0x2a>
		return ERROR;
    3682:	1a 8a       	std	Y+18, r1	; 0x12
    3684:	8d c0       	rjmp	.+282    	; 0x37a0 <EEPROM_u8WriteByte+0x144>
	}
	/* Send the device address, we need to get A8 A9 A10 address bits from
	 * memory location address and R/W=0 (write) */
	TWI_vWriteData( (EEPROM_Address | EEPROM_EN_CFG | Copy_enuBlock) & 0xFE );
    3686:	89 89       	ldd	r24, Y+17	; 0x11
    3688:	8e 75       	andi	r24, 0x5E	; 94
    368a:	80 6a       	ori	r24, 0xA0	; 160
    368c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_SLA_W_ACK){
    3690:	0e 94 4d 08 	call	0x109a	; 0x109a <TWI_u8GetStatus>
    3694:	88 31       	cpi	r24, 0x18	; 24
    3696:	11 f0       	breq	.+4      	; 0x369c <EEPROM_u8WriteByte+0x40>
		return ERROR;
    3698:	1a 8a       	std	Y+18, r1	; 0x12
    369a:	82 c0       	rjmp	.+260    	; 0x37a0 <EEPROM_u8WriteByte+0x144>
	}
	/* Send the required memory location address */
	TWI_vWriteData(Copy_u8Address);
    369c:	8f 85       	ldd	r24, Y+15	; 0x0f
    369e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_DATA_ACK){
    36a2:	0e 94 4d 08 	call	0x109a	; 0x109a <TWI_u8GetStatus>
    36a6:	88 32       	cpi	r24, 0x28	; 40
    36a8:	11 f0       	breq	.+4      	; 0x36ae <EEPROM_u8WriteByte+0x52>
		return ERROR;
    36aa:	1a 8a       	std	Y+18, r1	; 0x12
    36ac:	79 c0       	rjmp	.+242    	; 0x37a0 <EEPROM_u8WriteByte+0x144>
	}

	/* Write byte to eeprom */
	TWI_vWriteData(Copy_u8Data);
    36ae:	88 89       	ldd	r24, Y+16	; 0x10
    36b0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <TWI_vWriteData>

	TWI_vStop();
    36b4:	0e 94 df 07 	call	0xfbe	; 0xfbe <TWI_vStop>
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	a0 ea       	ldi	r26, 0xA0	; 160
    36be:	b1 e4       	ldi	r27, 0x41	; 65
    36c0:	8b 87       	std	Y+11, r24	; 0x0b
    36c2:	9c 87       	std	Y+12, r25	; 0x0c
    36c4:	ad 87       	std	Y+13, r26	; 0x0d
    36c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    36cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d0:	20 e0       	ldi	r18, 0x00	; 0
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	4a ef       	ldi	r20, 0xFA	; 250
    36d6:	54 e4       	ldi	r21, 0x44	; 68
    36d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36dc:	dc 01       	movw	r26, r24
    36de:	cb 01       	movw	r24, r22
    36e0:	8f 83       	std	Y+7, r24	; 0x07
    36e2:	98 87       	std	Y+8, r25	; 0x08
    36e4:	a9 87       	std	Y+9, r26	; 0x09
    36e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36e8:	6f 81       	ldd	r22, Y+7	; 0x07
    36ea:	78 85       	ldd	r23, Y+8	; 0x08
    36ec:	89 85       	ldd	r24, Y+9	; 0x09
    36ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	40 e8       	ldi	r20, 0x80	; 128
    36f6:	5f e3       	ldi	r21, 0x3F	; 63
    36f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36fc:	88 23       	and	r24, r24
    36fe:	2c f4       	brge	.+10     	; 0x370a <EEPROM_u8WriteByte+0xae>
		__ticks = 1;
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	9e 83       	std	Y+6, r25	; 0x06
    3706:	8d 83       	std	Y+5, r24	; 0x05
    3708:	3f c0       	rjmp	.+126    	; 0x3788 <EEPROM_u8WriteByte+0x12c>
	else if (__tmp > 65535)
    370a:	6f 81       	ldd	r22, Y+7	; 0x07
    370c:	78 85       	ldd	r23, Y+8	; 0x08
    370e:	89 85       	ldd	r24, Y+9	; 0x09
    3710:	9a 85       	ldd	r25, Y+10	; 0x0a
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	3f ef       	ldi	r19, 0xFF	; 255
    3716:	4f e7       	ldi	r20, 0x7F	; 127
    3718:	57 e4       	ldi	r21, 0x47	; 71
    371a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    371e:	18 16       	cp	r1, r24
    3720:	4c f5       	brge	.+82     	; 0x3774 <EEPROM_u8WriteByte+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3722:	6b 85       	ldd	r22, Y+11	; 0x0b
    3724:	7c 85       	ldd	r23, Y+12	; 0x0c
    3726:	8d 85       	ldd	r24, Y+13	; 0x0d
    3728:	9e 85       	ldd	r25, Y+14	; 0x0e
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	40 e2       	ldi	r20, 0x20	; 32
    3730:	51 e4       	ldi	r21, 0x41	; 65
    3732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3736:	dc 01       	movw	r26, r24
    3738:	cb 01       	movw	r24, r22
    373a:	bc 01       	movw	r22, r24
    373c:	cd 01       	movw	r24, r26
    373e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	9e 83       	std	Y+6, r25	; 0x06
    3748:	8d 83       	std	Y+5, r24	; 0x05
    374a:	0f c0       	rjmp	.+30     	; 0x376a <EEPROM_u8WriteByte+0x10e>
    374c:	88 ec       	ldi	r24, 0xC8	; 200
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	9c 83       	std	Y+4, r25	; 0x04
    3752:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3754:	8b 81       	ldd	r24, Y+3	; 0x03
    3756:	9c 81       	ldd	r25, Y+4	; 0x04
    3758:	01 97       	sbiw	r24, 0x01	; 1
    375a:	f1 f7       	brne	.-4      	; 0x3758 <EEPROM_u8WriteByte+0xfc>
    375c:	9c 83       	std	Y+4, r25	; 0x04
    375e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3760:	8d 81       	ldd	r24, Y+5	; 0x05
    3762:	9e 81       	ldd	r25, Y+6	; 0x06
    3764:	01 97       	sbiw	r24, 0x01	; 1
    3766:	9e 83       	std	Y+6, r25	; 0x06
    3768:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    376a:	8d 81       	ldd	r24, Y+5	; 0x05
    376c:	9e 81       	ldd	r25, Y+6	; 0x06
    376e:	00 97       	sbiw	r24, 0x00	; 0
    3770:	69 f7       	brne	.-38     	; 0x374c <EEPROM_u8WriteByte+0xf0>
    3772:	14 c0       	rjmp	.+40     	; 0x379c <EEPROM_u8WriteByte+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3774:	6f 81       	ldd	r22, Y+7	; 0x07
    3776:	78 85       	ldd	r23, Y+8	; 0x08
    3778:	89 85       	ldd	r24, Y+9	; 0x09
    377a:	9a 85       	ldd	r25, Y+10	; 0x0a
    377c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	9e 83       	std	Y+6, r25	; 0x06
    3786:	8d 83       	std	Y+5, r24	; 0x05
    3788:	8d 81       	ldd	r24, Y+5	; 0x05
    378a:	9e 81       	ldd	r25, Y+6	; 0x06
    378c:	9a 83       	std	Y+2, r25	; 0x02
    378e:	89 83       	std	Y+1, r24	; 0x01
    3790:	89 81       	ldd	r24, Y+1	; 0x01
    3792:	9a 81       	ldd	r25, Y+2	; 0x02
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	f1 f7       	brne	.-4      	; 0x3794 <EEPROM_u8WriteByte+0x138>
    3798:	9a 83       	std	Y+2, r25	; 0x02
    379a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	return SUCCESS;
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	8a 8b       	std	Y+18, r24	; 0x12
    37a0:	8a 89       	ldd	r24, Y+18	; 0x12
}
    37a2:	62 96       	adiw	r28, 0x12	; 18
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
    37ae:	cf 91       	pop	r28
    37b0:	df 91       	pop	r29
    37b2:	08 95       	ret

000037b4 <EEPROM_u8ReadByte>:

u8 EEPROM_u8ReadByte(u8 Copy_u8Address, u8 *Copy_u8Data, enu_EEPROM_Blocks Copy_enuBlock){
    37b4:	df 93       	push	r29
    37b6:	cf 93       	push	r28
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
    37bc:	62 97       	sbiw	r28, 0x12	; 18
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	f8 94       	cli
    37c2:	de bf       	out	0x3e, r29	; 62
    37c4:	0f be       	out	0x3f, r0	; 63
    37c6:	cd bf       	out	0x3d, r28	; 61
    37c8:	8f 87       	std	Y+15, r24	; 0x0f
    37ca:	79 8b       	std	Y+17, r23	; 0x11
    37cc:	68 8b       	std	Y+16, r22	; 0x10
    37ce:	4a 8b       	std	Y+18, r20	; 0x12
	TWI_vStart();
    37d0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <TWI_vStart>
	if(TWI_u8GetStatus() != TW_START){
    37d4:	0e 94 4d 08 	call	0x109a	; 0x109a <TWI_u8GetStatus>
		//return ERROR;
	}
	/* Send the device address, we need to get A8 A9 A10 address bits from
	 * memory location address and R/W=0 (write) */
	TWI_vWriteData( (EEPROM_Address | EEPROM_EN_CFG | Copy_enuBlock) & 0xFE );
    37d8:	8a 89       	ldd	r24, Y+18	; 0x12
    37da:	8e 75       	andi	r24, 0x5E	; 94
    37dc:	80 6a       	ori	r24, 0xA0	; 160
    37de:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_SLA_W_ACK){
    37e2:	0e 94 4d 08 	call	0x109a	; 0x109a <TWI_u8GetStatus>
		//return ERROR;
	}
	/* Send the required memory location address */
	TWI_vWriteData(Copy_u8Address);
    37e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    37e8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_DATA_ACK){
    37ec:	0e 94 4d 08 	call	0x109a	; 0x109a <TWI_u8GetStatus>
		//return ERROR;
	}
	TWI_vStart();
    37f0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <TWI_vStart>
	if(TWI_u8GetStatus() != TW_START){
    37f4:	0e 94 4d 08 	call	0x109a	; 0x109a <TWI_u8GetStatus>
		//return ERROR;
	}
	TWI_vWriteData( EEPROM_Address | EEPROM_EN_CFG | Copy_enuBlock | 1 );
    37f8:	8a 89       	ldd	r24, Y+18	; 0x12
    37fa:	81 6a       	ori	r24, 0xA1	; 161
    37fc:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_SLA_R_ACK){
    3800:	0e 94 4d 08 	call	0x109a	; 0x109a <TWI_u8GetStatus>
		//return ERROR;
	}
	*Copy_u8Data = TWI_u8ReadWithNoAck();
    3804:	0e 94 27 08 	call	0x104e	; 0x104e <TWI_u8ReadWithNoAck>
    3808:	e8 89       	ldd	r30, Y+16	; 0x10
    380a:	f9 89       	ldd	r31, Y+17	; 0x11
    380c:	80 83       	st	Z, r24
	if(TWI_u8GetStatus() != TW_MR_DATA_ACK){
    380e:	0e 94 4d 08 	call	0x109a	; 0x109a <TWI_u8GetStatus>
		//return ERROR;
	}
	TWI_vStop();
    3812:	0e 94 df 07 	call	0xfbe	; 0xfbe <TWI_vStop>
    3816:	80 e0       	ldi	r24, 0x00	; 0
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	a0 ea       	ldi	r26, 0xA0	; 160
    381c:	b1 e4       	ldi	r27, 0x41	; 65
    381e:	8b 87       	std	Y+11, r24	; 0x0b
    3820:	9c 87       	std	Y+12, r25	; 0x0c
    3822:	ad 87       	std	Y+13, r26	; 0x0d
    3824:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3826:	6b 85       	ldd	r22, Y+11	; 0x0b
    3828:	7c 85       	ldd	r23, Y+12	; 0x0c
    382a:	8d 85       	ldd	r24, Y+13	; 0x0d
    382c:	9e 85       	ldd	r25, Y+14	; 0x0e
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	4a ef       	ldi	r20, 0xFA	; 250
    3834:	54 e4       	ldi	r21, 0x44	; 68
    3836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	8f 83       	std	Y+7, r24	; 0x07
    3840:	98 87       	std	Y+8, r25	; 0x08
    3842:	a9 87       	std	Y+9, r26	; 0x09
    3844:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3846:	6f 81       	ldd	r22, Y+7	; 0x07
    3848:	78 85       	ldd	r23, Y+8	; 0x08
    384a:	89 85       	ldd	r24, Y+9	; 0x09
    384c:	9a 85       	ldd	r25, Y+10	; 0x0a
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	40 e8       	ldi	r20, 0x80	; 128
    3854:	5f e3       	ldi	r21, 0x3F	; 63
    3856:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    385a:	88 23       	and	r24, r24
    385c:	2c f4       	brge	.+10     	; 0x3868 <EEPROM_u8ReadByte+0xb4>
		__ticks = 1;
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	9e 83       	std	Y+6, r25	; 0x06
    3864:	8d 83       	std	Y+5, r24	; 0x05
    3866:	3f c0       	rjmp	.+126    	; 0x38e6 <EEPROM_u8ReadByte+0x132>
	else if (__tmp > 65535)
    3868:	6f 81       	ldd	r22, Y+7	; 0x07
    386a:	78 85       	ldd	r23, Y+8	; 0x08
    386c:	89 85       	ldd	r24, Y+9	; 0x09
    386e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	3f ef       	ldi	r19, 0xFF	; 255
    3874:	4f e7       	ldi	r20, 0x7F	; 127
    3876:	57 e4       	ldi	r21, 0x47	; 71
    3878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    387c:	18 16       	cp	r1, r24
    387e:	4c f5       	brge	.+82     	; 0x38d2 <EEPROM_u8ReadByte+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3880:	6b 85       	ldd	r22, Y+11	; 0x0b
    3882:	7c 85       	ldd	r23, Y+12	; 0x0c
    3884:	8d 85       	ldd	r24, Y+13	; 0x0d
    3886:	9e 85       	ldd	r25, Y+14	; 0x0e
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 e2       	ldi	r20, 0x20	; 32
    388e:	51 e4       	ldi	r21, 0x41	; 65
    3890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	bc 01       	movw	r22, r24
    389a:	cd 01       	movw	r24, r26
    389c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	9e 83       	std	Y+6, r25	; 0x06
    38a6:	8d 83       	std	Y+5, r24	; 0x05
    38a8:	0f c0       	rjmp	.+30     	; 0x38c8 <EEPROM_u8ReadByte+0x114>
    38aa:	88 ec       	ldi	r24, 0xC8	; 200
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	9c 83       	std	Y+4, r25	; 0x04
    38b0:	8b 83       	std	Y+3, r24	; 0x03
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	9c 81       	ldd	r25, Y+4	; 0x04
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <EEPROM_u8ReadByte+0x102>
    38ba:	9c 83       	std	Y+4, r25	; 0x04
    38bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38be:	8d 81       	ldd	r24, Y+5	; 0x05
    38c0:	9e 81       	ldd	r25, Y+6	; 0x06
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	9e 83       	std	Y+6, r25	; 0x06
    38c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ca:	9e 81       	ldd	r25, Y+6	; 0x06
    38cc:	00 97       	sbiw	r24, 0x00	; 0
    38ce:	69 f7       	brne	.-38     	; 0x38aa <EEPROM_u8ReadByte+0xf6>
    38d0:	14 c0       	rjmp	.+40     	; 0x38fa <EEPROM_u8ReadByte+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d2:	6f 81       	ldd	r22, Y+7	; 0x07
    38d4:	78 85       	ldd	r23, Y+8	; 0x08
    38d6:	89 85       	ldd	r24, Y+9	; 0x09
    38d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	9e 83       	std	Y+6, r25	; 0x06
    38e4:	8d 83       	std	Y+5, r24	; 0x05
    38e6:	8d 81       	ldd	r24, Y+5	; 0x05
    38e8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ea:	9a 83       	std	Y+2, r25	; 0x02
    38ec:	89 83       	std	Y+1, r24	; 0x01
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	9a 81       	ldd	r25, Y+2	; 0x02
    38f2:	01 97       	sbiw	r24, 0x01	; 1
    38f4:	f1 f7       	brne	.-4      	; 0x38f2 <EEPROM_u8ReadByte+0x13e>
    38f6:	9a 83       	std	Y+2, r25	; 0x02
    38f8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);
	return SUCCESS;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
}
    38fc:	62 96       	adiw	r28, 0x12	; 18
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	08 95       	ret

0000390e <EEPROM_vWriteString>:

void EEPROM_vWriteString(u8 Copy_u8Address, u8 *Copy_u8String, enu_EEPROM_Blocks Copy_enuBlock){
    390e:	df 93       	push	r29
    3910:	cf 93       	push	r28
    3912:	00 d0       	rcall	.+0      	; 0x3914 <EEPROM_vWriteString+0x6>
    3914:	00 d0       	rcall	.+0      	; 0x3916 <EEPROM_vWriteString+0x8>
    3916:	00 d0       	rcall	.+0      	; 0x3918 <EEPROM_vWriteString+0xa>
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	8b 83       	std	Y+3, r24	; 0x03
    391e:	7d 83       	std	Y+5, r23	; 0x05
    3920:	6c 83       	std	Y+4, r22	; 0x04
    3922:	4e 83       	std	Y+6, r20	; 0x06
	u8 local_u8StringIndex=0;
    3924:	1a 82       	std	Y+2, r1	; 0x02
	u8 local_u8Address = Copy_u8Address;
    3926:	8b 81       	ldd	r24, Y+3	; 0x03
    3928:	89 83       	std	Y+1, r24	; 0x01
    392a:	14 c0       	rjmp	.+40     	; 0x3954 <EEPROM_vWriteString+0x46>
	while(Copy_u8String[local_u8StringIndex] != '\0'){
		EEPROM_u8WriteByte(local_u8Address, Copy_u8String[local_u8StringIndex], Copy_enuBlock);
    392c:	8a 81       	ldd	r24, Y+2	; 0x02
    392e:	28 2f       	mov	r18, r24
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	8c 81       	ldd	r24, Y+4	; 0x04
    3934:	9d 81       	ldd	r25, Y+5	; 0x05
    3936:	fc 01       	movw	r30, r24
    3938:	e2 0f       	add	r30, r18
    393a:	f3 1f       	adc	r31, r19
    393c:	90 81       	ld	r25, Z
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	69 2f       	mov	r22, r25
    3942:	4e 81       	ldd	r20, Y+6	; 0x06
    3944:	0e 94 2e 1b 	call	0x365c	; 0x365c <EEPROM_u8WriteByte>
		local_u8Address++;
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	8f 5f       	subi	r24, 0xFF	; 255
    394c:	89 83       	std	Y+1, r24	; 0x01
		local_u8StringIndex++;
    394e:	8a 81       	ldd	r24, Y+2	; 0x02
    3950:	8f 5f       	subi	r24, 0xFF	; 255
    3952:	8a 83       	std	Y+2, r24	; 0x02
}

void EEPROM_vWriteString(u8 Copy_u8Address, u8 *Copy_u8String, enu_EEPROM_Blocks Copy_enuBlock){
	u8 local_u8StringIndex=0;
	u8 local_u8Address = Copy_u8Address;
	while(Copy_u8String[local_u8StringIndex] != '\0'){
    3954:	8a 81       	ldd	r24, Y+2	; 0x02
    3956:	28 2f       	mov	r18, r24
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	8c 81       	ldd	r24, Y+4	; 0x04
    395c:	9d 81       	ldd	r25, Y+5	; 0x05
    395e:	fc 01       	movw	r30, r24
    3960:	e2 0f       	add	r30, r18
    3962:	f3 1f       	adc	r31, r19
    3964:	80 81       	ld	r24, Z
    3966:	88 23       	and	r24, r24
    3968:	09 f7       	brne	.-62     	; 0x392c <EEPROM_vWriteString+0x1e>
		EEPROM_u8WriteByte(local_u8Address, Copy_u8String[local_u8StringIndex], Copy_enuBlock);
		local_u8Address++;
		local_u8StringIndex++;
	}
	EEPROM_u8WriteByte(local_u8Address, '\0', Copy_enuBlock);
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	60 e0       	ldi	r22, 0x00	; 0
    396e:	4e 81       	ldd	r20, Y+6	; 0x06
    3970:	0e 94 2e 1b 	call	0x365c	; 0x365c <EEPROM_u8WriteByte>
}
    3974:	26 96       	adiw	r28, 0x06	; 6
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	cf 91       	pop	r28
    3982:	df 91       	pop	r29
    3984:	08 95       	ret

00003986 <EEPROM_vReadString>:

void EEPROM_vReadString(u8 Copy_u8Address, u8 *Copy_u8String, enu_EEPROM_Blocks Copy_enuBlock){
    3986:	df 93       	push	r29
    3988:	cf 93       	push	r28
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	27 97       	sbiw	r28, 0x07	; 7
    3990:	0f b6       	in	r0, 0x3f	; 63
    3992:	f8 94       	cli
    3994:	de bf       	out	0x3e, r29	; 62
    3996:	0f be       	out	0x3f, r0	; 63
    3998:	cd bf       	out	0x3d, r28	; 61
    399a:	8c 83       	std	Y+4, r24	; 0x04
    399c:	7e 83       	std	Y+6, r23	; 0x06
    399e:	6d 83       	std	Y+5, r22	; 0x05
    39a0:	4f 83       	std	Y+7, r20	; 0x07
	u8 local_u8StringIndex=0;
    39a2:	1a 82       	std	Y+2, r1	; 0x02
	u8 local_u8Address = Copy_u8Address;
    39a4:	8c 81       	ldd	r24, Y+4	; 0x04
    39a6:	89 83       	std	Y+1, r24	; 0x01
	u8 local_temp;
	do{
		EEPROM_u8ReadByte(local_u8Address, &local_temp, Copy_enuBlock);
    39a8:	9e 01       	movw	r18, r28
    39aa:	2d 5f       	subi	r18, 0xFD	; 253
    39ac:	3f 4f       	sbci	r19, 0xFF	; 255
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	b9 01       	movw	r22, r18
    39b2:	4f 81       	ldd	r20, Y+7	; 0x07
    39b4:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <EEPROM_u8ReadByte>
		if(local_temp == 0xFF){
    39b8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ba:	8f 3f       	cpi	r24, 0xFF	; 255
    39bc:	99 f0       	breq	.+38     	; 0x39e4 <EEPROM_vReadString+0x5e>
			break;
		}
		else{ /* Do Nothing */ }
		Copy_u8String[local_u8StringIndex] = local_temp;
    39be:	8a 81       	ldd	r24, Y+2	; 0x02
    39c0:	28 2f       	mov	r18, r24
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	8d 81       	ldd	r24, Y+5	; 0x05
    39c6:	9e 81       	ldd	r25, Y+6	; 0x06
    39c8:	fc 01       	movw	r30, r24
    39ca:	e2 0f       	add	r30, r18
    39cc:	f3 1f       	adc	r31, r19
    39ce:	8b 81       	ldd	r24, Y+3	; 0x03
    39d0:	80 83       	st	Z, r24
		local_u8StringIndex++;
    39d2:	8a 81       	ldd	r24, Y+2	; 0x02
    39d4:	8f 5f       	subi	r24, 0xFF	; 255
    39d6:	8a 83       	std	Y+2, r24	; 0x02
		local_u8Address++;
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	8f 5f       	subi	r24, 0xFF	; 255
    39dc:	89 83       	std	Y+1, r24	; 0x01
	}while(local_temp != '\0');
    39de:	8b 81       	ldd	r24, Y+3	; 0x03
    39e0:	88 23       	and	r24, r24
    39e2:	11 f7       	brne	.-60     	; 0x39a8 <EEPROM_vReadString+0x22>
}
    39e4:	27 96       	adiw	r28, 0x07	; 7
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	f8 94       	cli
    39ea:	de bf       	out	0x3e, r29	; 62
    39ec:	0f be       	out	0x3f, r0	; 63
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	cf 91       	pop	r28
    39f2:	df 91       	pop	r29
    39f4:	08 95       	ret

000039f6 <Bluetooth_vInit>:
		.GLOBAL_tcfgUartClkMode = UART_ASYNCHRONOUS,
		.GLOBAL_tcfgUartCommMode = UART_1X_SPEED,
		.GLOBAL_tcfgUartInterrupt = UART_INTERRUPT_DISABLED
};

void Bluetooth_vInit(){
    39f6:	df 93       	push	r29
    39f8:	cf 93       	push	r28
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
	UART_vInit(&UART1);
    39fe:	8c e2       	ldi	r24, 0x2C	; 44
    3a00:	96 e0       	ldi	r25, 0x06	; 6
    3a02:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_vInit>
}
    3a06:	cf 91       	pop	r28
    3a08:	df 91       	pop	r29
    3a0a:	08 95       	ret

00003a0c <Bluetooth_vEnable>:

void Bluetooth_vEnable(){
    3a0c:	df 93       	push	r29
    3a0e:	cf 93       	push	r28
    3a10:	cd b7       	in	r28, 0x3d	; 61
    3a12:	de b7       	in	r29, 0x3e	; 62
	UART_vEnable(&UART1);
    3a14:	8c e2       	ldi	r24, 0x2C	; 44
    3a16:	96 e0       	ldi	r25, 0x06	; 6
    3a18:	0e 94 11 07 	call	0xe22	; 0xe22 <UART_vEnable>
}
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <Bluetooth_vDisable>:

void Bluetooth_vDisable(){
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
	UART_vDisable(&UART1);
    3a2a:	8c e2       	ldi	r24, 0x2C	; 44
    3a2c:	96 e0       	ldi	r25, 0x06	; 6
    3a2e:	0e 94 2b 07 	call	0xe56	; 0xe56 <UART_vDisable>
}
    3a32:	cf 91       	pop	r28
    3a34:	df 91       	pop	r29
    3a36:	08 95       	ret

00003a38 <Bluetooth_vSendData>:

void Bluetooth_vSendData(u8 Copy_u8Data){
    3a38:	df 93       	push	r29
    3a3a:	cf 93       	push	r28
    3a3c:	0f 92       	push	r0
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	89 83       	std	Y+1, r24	; 0x01
	UART_vSendData(Copy_u8Data);
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_vSendData>
}
    3a4a:	0f 90       	pop	r0
    3a4c:	cf 91       	pop	r28
    3a4e:	df 91       	pop	r29
    3a50:	08 95       	ret

00003a52 <Bluetooth_u8ReceiveData>:

u8 Bluetooth_u8ReceiveData(void){
    3a52:	df 93       	push	r29
    3a54:	cf 93       	push	r28
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
	static u8 LOCAL_u8ReceivedData;
	LOCAL_u8ReceivedData = UART_u8ReceiveData();
    3a5a:	0e 94 5f 07 	call	0xebe	; 0xebe <UART_u8ReceiveData>
    3a5e:	80 93 fc 06 	sts	0x06FC, r24

	return LOCAL_u8ReceivedData;
    3a62:	80 91 fc 06 	lds	r24, 0x06FC
}
    3a66:	cf 91       	pop	r28
    3a68:	df 91       	pop	r29
    3a6a:	08 95       	ret

00003a6c <Bluetooth_vSendString>:

void Bluetooth_vSendString(u8 *Copy_u8Str){
    3a6c:	df 93       	push	r29
    3a6e:	cf 93       	push	r28
    3a70:	00 d0       	rcall	.+0      	; 0x3a72 <Bluetooth_vSendString+0x6>
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	9a 83       	std	Y+2, r25	; 0x02
    3a78:	89 83       	std	Y+1, r24	; 0x01
	UART_vSendString(Copy_u8Str);
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7e:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
}
    3a82:	0f 90       	pop	r0
    3a84:	0f 90       	pop	r0
    3a86:	cf 91       	pop	r28
    3a88:	df 91       	pop	r29
    3a8a:	08 95       	ret

00003a8c <Bluetooth_vClearBuffer>:

void Bluetooth_vClearBuffer(){
    3a8c:	df 93       	push	r29
    3a8e:	cf 93       	push	r28
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
	UART_vClearBuffer();
    3a94:	0e 94 99 07 	call	0xf32	; 0xf32 <UART_vClearBuffer>
}
    3a98:	cf 91       	pop	r28
    3a9a:	df 91       	pop	r29
    3a9c:	08 95       	ret

00003a9e <addNewUser>:




u8 addNewUser(ST_userData_t *_user)
{
    3a9e:	0f 93       	push	r16
    3aa0:	1f 93       	push	r17
    3aa2:	df 93       	push	r29
    3aa4:	cf 93       	push	r28
    3aa6:	cd b7       	in	r28, 0x3d	; 61
    3aa8:	de b7       	in	r29, 0x3e	; 62
    3aaa:	69 97       	sbiw	r28, 0x19	; 25
    3aac:	0f b6       	in	r0, 0x3f	; 63
    3aae:	f8 94       	cli
    3ab0:	de bf       	out	0x3e, r29	; 62
    3ab2:	0f be       	out	0x3f, r0	; 63
    3ab4:	cd bf       	out	0x3d, r28	; 61
    3ab6:	99 8f       	std	Y+25, r25	; 0x19
    3ab8:	88 8f       	std	Y+24, r24	; 0x18
	Bluetooth_vClearBuffer();
    3aba:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Bluetooth_vClearBuffer>
	u8 ret = 0;
    3abe:	1b 82       	std	Y+3, r1	; 0x03
	EEPROM_u8ReadByte(0xF8,&NumberOfRegistars,BLOCK1);
    3ac0:	2d ef       	ldi	r18, 0xFD	; 253
    3ac2:	36 e0       	ldi	r19, 0x06	; 6
    3ac4:	88 ef       	ldi	r24, 0xF8	; 248
    3ac6:	b9 01       	movw	r22, r18
    3ac8:	42 e0       	ldi	r20, 0x02	; 2
    3aca:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <EEPROM_u8ReadByte>
	Bluetooth_vSendString((u8 *)"\n\r===== Adding New User =====");
    3ace:	8b e7       	ldi	r24, 0x7B	; 123
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>

	if(NumberOfRegistars == MAX_NUMBER_OF_USERS)
    3ad6:	80 91 fd 06 	lds	r24, 0x06FD
    3ada:	85 30       	cpi	r24, 0x05	; 5
    3adc:	29 f4       	brne	.+10     	; 0x3ae8 <addNewUser+0x4a>
	{
		Bluetooth_vSendString((u8 *)"\n\r You Reach The Max Number Of Users");
    3ade:	89 e9       	ldi	r24, 0x99	; 153
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
    3ae6:	b5 c0       	rjmp	.+362    	; 0x3c52 <addNewUser+0x1b4>
	}
	else
	{
		u8 tempname[USER_NAME_MAX_SIZE];
		u8 temppass[USER_PASS_MAX_SIZE];
		Bluetooth_vSendString((u8 *)"\n\rEnter User Name : ");
    3ae8:	8e eb       	ldi	r24, 0xBE	; 190
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		Bluetooth_vClearBuffer();
    3af0:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Bluetooth_vClearBuffer>
		u8 counterNmae = 0;
    3af4:	1a 82       	std	Y+2, r1	; 0x02
    3af6:	1d c0       	rjmp	.+58     	; 0x3b32 <addNewUser+0x94>
		while(tempname[counterNmae-1] != '\r')
		{
			tempname[counterNmae] = Bluetooth_u8ReceiveData();
    3af8:	8a 81       	ldd	r24, Y+2	; 0x02
    3afa:	08 2f       	mov	r16, r24
    3afc:	10 e0       	ldi	r17, 0x00	; 0
    3afe:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <Bluetooth_u8ReceiveData>
    3b02:	28 2f       	mov	r18, r24
    3b04:	ce 01       	movw	r24, r28
    3b06:	04 96       	adiw	r24, 0x04	; 4
    3b08:	fc 01       	movw	r30, r24
    3b0a:	e0 0f       	add	r30, r16
    3b0c:	f1 1f       	adc	r31, r17
    3b0e:	20 83       	st	Z, r18
			Bluetooth_vSendData(tempname[counterNmae]);
    3b10:	8a 81       	ldd	r24, Y+2	; 0x02
    3b12:	28 2f       	mov	r18, r24
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	ce 01       	movw	r24, r28
    3b18:	04 96       	adiw	r24, 0x04	; 4
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	e2 0f       	add	r30, r18
    3b1e:	f3 1f       	adc	r31, r19
    3b20:	80 81       	ld	r24, Z
    3b22:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>
			counterNmae++;
    3b26:	8a 81       	ldd	r24, Y+2	; 0x02
    3b28:	8f 5f       	subi	r24, 0xFF	; 255
    3b2a:	8a 83       	std	Y+2, r24	; 0x02
			if(counterNmae == USER_NAME_MAX_SIZE - 1) break;
    3b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2e:	89 30       	cpi	r24, 0x09	; 9
    3b30:	71 f0       	breq	.+28     	; 0x3b4e <addNewUser+0xb0>
		u8 tempname[USER_NAME_MAX_SIZE];
		u8 temppass[USER_PASS_MAX_SIZE];
		Bluetooth_vSendString((u8 *)"\n\rEnter User Name : ");
		Bluetooth_vClearBuffer();
		u8 counterNmae = 0;
		while(tempname[counterNmae-1] != '\r')
    3b32:	8a 81       	ldd	r24, Y+2	; 0x02
    3b34:	88 2f       	mov	r24, r24
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	9c 01       	movw	r18, r24
    3b3a:	21 50       	subi	r18, 0x01	; 1
    3b3c:	30 40       	sbci	r19, 0x00	; 0
    3b3e:	ce 01       	movw	r24, r28
    3b40:	04 96       	adiw	r24, 0x04	; 4
    3b42:	fc 01       	movw	r30, r24
    3b44:	e2 0f       	add	r30, r18
    3b46:	f3 1f       	adc	r31, r19
    3b48:	80 81       	ld	r24, Z
    3b4a:	8d 30       	cpi	r24, 0x0D	; 13
    3b4c:	a9 f6       	brne	.-86     	; 0x3af8 <addNewUser+0x5a>
			tempname[counterNmae] = Bluetooth_u8ReceiveData();
			Bluetooth_vSendData(tempname[counterNmae]);
			counterNmae++;
			if(counterNmae == USER_NAME_MAX_SIZE - 1) break;
		}
		tempname[counterNmae-1] = '\0';
    3b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b50:	88 2f       	mov	r24, r24
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	9c 01       	movw	r18, r24
    3b56:	21 50       	subi	r18, 0x01	; 1
    3b58:	30 40       	sbci	r19, 0x00	; 0
    3b5a:	ce 01       	movw	r24, r28
    3b5c:	04 96       	adiw	r24, 0x04	; 4
    3b5e:	fc 01       	movw	r30, r24
    3b60:	e2 0f       	add	r30, r18
    3b62:	f3 1f       	adc	r31, r19
    3b64:	10 82       	st	Z, r1
		if(isUserExist(tempname) && isFreeSlot(_user))
    3b66:	ce 01       	movw	r24, r28
    3b68:	04 96       	adiw	r24, 0x04	; 4
    3b6a:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <isUserExist>
    3b6e:	88 23       	and	r24, r24
    3b70:	89 f0       	breq	.+34     	; 0x3b94 <addNewUser+0xf6>
    3b72:	88 8d       	ldd	r24, Y+24	; 0x18
    3b74:	99 8d       	ldd	r25, Y+25	; 0x19
    3b76:	0e 94 14 21 	call	0x4228	; 0x4228 <isFreeSlot>
    3b7a:	88 23       	and	r24, r24
    3b7c:	59 f0       	breq	.+22     	; 0x3b94 <addNewUser+0xf6>
		{
			strcpy((char *)_user->userName,(char *)tempname);
    3b7e:	88 8d       	ldd	r24, Y+24	; 0x18
    3b80:	99 8d       	ldd	r25, Y+25	; 0x19
    3b82:	05 96       	adiw	r24, 0x05	; 5
    3b84:	9e 01       	movw	r18, r28
    3b86:	2c 5f       	subi	r18, 0xFC	; 252
    3b88:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8a:	b9 01       	movw	r22, r18
    3b8c:	0e 94 96 29 	call	0x532c	; 0x532c <strcpy>
			ret = 1;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(ret == 1)
    3b94:	8b 81       	ldd	r24, Y+3	; 0x03
    3b96:	81 30       	cpi	r24, 0x01	; 1
    3b98:	09 f0       	breq	.+2      	; 0x3b9c <addNewUser+0xfe>
    3b9a:	57 c0       	rjmp	.+174    	; 0x3c4a <addNewUser+0x1ac>
		{
			Bluetooth_vSendString((u8 *)"\n\rEnter User Password : ");
    3b9c:	83 ed       	ldi	r24, 0xD3	; 211
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			u8 counterPass = 0;
    3ba4:	19 82       	std	Y+1, r1	; 0x01
    3ba6:	1d c0       	rjmp	.+58     	; 0x3be2 <addNewUser+0x144>
			while(temppass[counterPass - 1] != '\r')
			{
				temppass[counterPass] = Bluetooth_u8ReceiveData();
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	08 2f       	mov	r16, r24
    3bac:	10 e0       	ldi	r17, 0x00	; 0
    3bae:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <Bluetooth_u8ReceiveData>
    3bb2:	28 2f       	mov	r18, r24
    3bb4:	ce 01       	movw	r24, r28
    3bb6:	0e 96       	adiw	r24, 0x0e	; 14
    3bb8:	fc 01       	movw	r30, r24
    3bba:	e0 0f       	add	r30, r16
    3bbc:	f1 1f       	adc	r31, r17
    3bbe:	20 83       	st	Z, r18
				Bluetooth_vSendData(temppass[counterPass]);
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	28 2f       	mov	r18, r24
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	ce 01       	movw	r24, r28
    3bc8:	0e 96       	adiw	r24, 0x0e	; 14
    3bca:	fc 01       	movw	r30, r24
    3bcc:	e2 0f       	add	r30, r18
    3bce:	f3 1f       	adc	r31, r19
    3bd0:	80 81       	ld	r24, Z
    3bd2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>
				counterPass++;
    3bd6:	89 81       	ldd	r24, Y+1	; 0x01
    3bd8:	8f 5f       	subi	r24, 0xFF	; 255
    3bda:	89 83       	std	Y+1, r24	; 0x01
				if(counterPass == USER_PASS_MAX_SIZE - 1) break;
    3bdc:	89 81       	ldd	r24, Y+1	; 0x01
    3bde:	89 30       	cpi	r24, 0x09	; 9
    3be0:	71 f0       	breq	.+28     	; 0x3bfe <addNewUser+0x160>
		}
		if(ret == 1)
		{
			Bluetooth_vSendString((u8 *)"\n\rEnter User Password : ");
			u8 counterPass = 0;
			while(temppass[counterPass - 1] != '\r')
    3be2:	89 81       	ldd	r24, Y+1	; 0x01
    3be4:	88 2f       	mov	r24, r24
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	9c 01       	movw	r18, r24
    3bea:	21 50       	subi	r18, 0x01	; 1
    3bec:	30 40       	sbci	r19, 0x00	; 0
    3bee:	ce 01       	movw	r24, r28
    3bf0:	0e 96       	adiw	r24, 0x0e	; 14
    3bf2:	fc 01       	movw	r30, r24
    3bf4:	e2 0f       	add	r30, r18
    3bf6:	f3 1f       	adc	r31, r19
    3bf8:	80 81       	ld	r24, Z
    3bfa:	8d 30       	cpi	r24, 0x0D	; 13
    3bfc:	a9 f6       	brne	.-86     	; 0x3ba8 <addNewUser+0x10a>
				temppass[counterPass] = Bluetooth_u8ReceiveData();
				Bluetooth_vSendData(temppass[counterPass]);
				counterPass++;
				if(counterPass == USER_PASS_MAX_SIZE - 1) break;
			}
			temppass[counterPass-1] = '\0';
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	88 2f       	mov	r24, r24
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	9c 01       	movw	r18, r24
    3c06:	21 50       	subi	r18, 0x01	; 1
    3c08:	30 40       	sbci	r19, 0x00	; 0
    3c0a:	ce 01       	movw	r24, r28
    3c0c:	0e 96       	adiw	r24, 0x0e	; 14
    3c0e:	fc 01       	movw	r30, r24
    3c10:	e2 0f       	add	r30, r18
    3c12:	f3 1f       	adc	r31, r19
    3c14:	10 82       	st	Z, r1
			strcpy((char *)_user->userPass,(char *)temppass);
    3c16:	88 8d       	ldd	r24, Y+24	; 0x18
    3c18:	99 8d       	ldd	r25, Y+25	; 0x19
    3c1a:	0f 96       	adiw	r24, 0x0f	; 15
    3c1c:	9e 01       	movw	r18, r28
    3c1e:	22 5f       	subi	r18, 0xF2	; 242
    3c20:	3f 4f       	sbci	r19, 0xFF	; 255
    3c22:	b9 01       	movw	r22, r18
    3c24:	0e 94 96 29 	call	0x532c	; 0x532c <strcpy>
			//EEPROM_vWriteString(_user->userNameAdd,_user->userName,_user->block);
			//_delay_ms(200);
			//EEPROM_vWriteString(_user->userPassAdd,_user->userPass,_user->block);
			Bluetooth_vSendString((u8 *)"\n\rUser Added Successfully ");
    3c28:	8c ee       	ldi	r24, 0xEC	; 236
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			NumberOfRegistars++;
    3c30:	80 91 fd 06 	lds	r24, 0x06FD
    3c34:	8f 5f       	subi	r24, 0xFF	; 255
    3c36:	80 93 fd 06 	sts	0x06FD, r24
			EEPROM_u8WriteByte(0xF8,NumberOfRegistars,BLOCK1);
    3c3a:	90 91 fd 06 	lds	r25, 0x06FD
    3c3e:	88 ef       	ldi	r24, 0xF8	; 248
    3c40:	69 2f       	mov	r22, r25
    3c42:	42 e0       	ldi	r20, 0x02	; 2
    3c44:	0e 94 2e 1b 	call	0x365c	; 0x365c <EEPROM_u8WriteByte>
    3c48:	04 c0       	rjmp	.+8      	; 0x3c52 <addNewUser+0x1b4>
		}
		else
		{
			Bluetooth_vSendString((u8 *)"\n\rUser Is Already Exist");
    3c4a:	87 e0       	ldi	r24, 0x07	; 7
    3c4c:	91 e0       	ldi	r25, 0x01	; 1
    3c4e:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		}
	}
	return ret;
    3c52:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3c54:	69 96       	adiw	r28, 0x19	; 25
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	cf 91       	pop	r28
    3c62:	df 91       	pop	r29
    3c64:	1f 91       	pop	r17
    3c66:	0f 91       	pop	r16
    3c68:	08 95       	ret

00003c6a <editUser>:
u8 editUser(ST_userData_t *_user)
{
    3c6a:	0f 93       	push	r16
    3c6c:	1f 93       	push	r17
    3c6e:	df 93       	push	r29
    3c70:	cf 93       	push	r28
    3c72:	cd b7       	in	r28, 0x3d	; 61
    3c74:	de b7       	in	r29, 0x3e	; 62
    3c76:	6a 97       	sbiw	r28, 0x1a	; 26
    3c78:	0f b6       	in	r0, 0x3f	; 63
    3c7a:	f8 94       	cli
    3c7c:	de bf       	out	0x3e, r29	; 62
    3c7e:	0f be       	out	0x3f, r0	; 63
    3c80:	cd bf       	out	0x3d, r28	; 61
    3c82:	9a 8f       	std	Y+26, r25	; 0x1a
    3c84:	89 8f       	std	Y+25, r24	; 0x19
	Bluetooth_vClearBuffer();
    3c86:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Bluetooth_vClearBuffer>
	u8 ret = 0;
    3c8a:	1c 82       	std	Y+4, r1	; 0x04
	Bluetooth_vSendString((u8 *)"\n\r===== Editing User =====");
    3c8c:	8f e1       	ldi	r24, 0x1F	; 31
    3c8e:	91 e0       	ldi	r25, 0x01	; 1
    3c90:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>

	u8 tempname[USER_NAME_MAX_SIZE];
	u8 temppass[USER_PASS_MAX_SIZE];
	Bluetooth_vSendString((u8 *)"\n\rEnter User Name : ");
    3c94:	8e eb       	ldi	r24, 0xBE	; 190
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	u8 counterNmae = 0;
    3c9c:	1b 82       	std	Y+3, r1	; 0x03
    3c9e:	1d c0       	rjmp	.+58     	; 0x3cda <editUser+0x70>
	while(tempname[counterNmae-1] != '\r')
	{
		tempname[counterNmae] = Bluetooth_u8ReceiveData();
    3ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca2:	08 2f       	mov	r16, r24
    3ca4:	10 e0       	ldi	r17, 0x00	; 0
    3ca6:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <Bluetooth_u8ReceiveData>
    3caa:	28 2f       	mov	r18, r24
    3cac:	ce 01       	movw	r24, r28
    3cae:	05 96       	adiw	r24, 0x05	; 5
    3cb0:	fc 01       	movw	r30, r24
    3cb2:	e0 0f       	add	r30, r16
    3cb4:	f1 1f       	adc	r31, r17
    3cb6:	20 83       	st	Z, r18
		Bluetooth_vSendData(tempname[counterNmae]);
    3cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cba:	28 2f       	mov	r18, r24
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	ce 01       	movw	r24, r28
    3cc0:	05 96       	adiw	r24, 0x05	; 5
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	e2 0f       	add	r30, r18
    3cc6:	f3 1f       	adc	r31, r19
    3cc8:	80 81       	ld	r24, Z
    3cca:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>
		counterNmae++;
    3cce:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd0:	8f 5f       	subi	r24, 0xFF	; 255
    3cd2:	8b 83       	std	Y+3, r24	; 0x03
		if(counterNmae == USER_NAME_MAX_SIZE - 1) break;
    3cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd6:	89 30       	cpi	r24, 0x09	; 9
    3cd8:	71 f0       	breq	.+28     	; 0x3cf6 <editUser+0x8c>

	u8 tempname[USER_NAME_MAX_SIZE];
	u8 temppass[USER_PASS_MAX_SIZE];
	Bluetooth_vSendString((u8 *)"\n\rEnter User Name : ");
	u8 counterNmae = 0;
	while(tempname[counterNmae-1] != '\r')
    3cda:	8b 81       	ldd	r24, Y+3	; 0x03
    3cdc:	88 2f       	mov	r24, r24
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	9c 01       	movw	r18, r24
    3ce2:	21 50       	subi	r18, 0x01	; 1
    3ce4:	30 40       	sbci	r19, 0x00	; 0
    3ce6:	ce 01       	movw	r24, r28
    3ce8:	05 96       	adiw	r24, 0x05	; 5
    3cea:	fc 01       	movw	r30, r24
    3cec:	e2 0f       	add	r30, r18
    3cee:	f3 1f       	adc	r31, r19
    3cf0:	80 81       	ld	r24, Z
    3cf2:	8d 30       	cpi	r24, 0x0D	; 13
    3cf4:	a9 f6       	brne	.-86     	; 0x3ca0 <editUser+0x36>
		tempname[counterNmae] = Bluetooth_u8ReceiveData();
		Bluetooth_vSendData(tempname[counterNmae]);
		counterNmae++;
		if(counterNmae == USER_NAME_MAX_SIZE - 1) break;
	}
	tempname[counterNmae-1] = '\0';
    3cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf8:	88 2f       	mov	r24, r24
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	9c 01       	movw	r18, r24
    3cfe:	21 50       	subi	r18, 0x01	; 1
    3d00:	30 40       	sbci	r19, 0x00	; 0
    3d02:	ce 01       	movw	r24, r28
    3d04:	05 96       	adiw	r24, 0x05	; 5
    3d06:	fc 01       	movw	r30, r24
    3d08:	e2 0f       	add	r30, r18
    3d0a:	f3 1f       	adc	r31, r19
    3d0c:	10 82       	st	Z, r1
	if(isUserExist(tempname))
    3d0e:	ce 01       	movw	r24, r28
    3d10:	05 96       	adiw	r24, 0x05	; 5
    3d12:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <isUserExist>
    3d16:	88 23       	and	r24, r24
    3d18:	b9 f0       	breq	.+46     	; 0x3d48 <editUser+0xde>
	{
		u8 func_ret = isFreeSlot(_user);
    3d1a:	89 8d       	ldd	r24, Y+25	; 0x19
    3d1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d1e:	0e 94 14 21 	call	0x4228	; 0x4228 <isFreeSlot>
    3d22:	8a 83       	std	Y+2, r24	; 0x02
		if(func_ret == 0)
    3d24:	8a 81       	ldd	r24, Y+2	; 0x02
    3d26:	88 23       	and	r24, r24
    3d28:	79 f4       	brne	.+30     	; 0x3d48 <editUser+0xde>
		{
			eraseUser(_user);
    3d2a:	89 8d       	ldd	r24, Y+25	; 0x19
    3d2c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d2e:	0e 94 94 20 	call	0x4128	; 0x4128 <eraseUser>
			strcpy((char *)_user->userName,(char *)tempname);
    3d32:	89 8d       	ldd	r24, Y+25	; 0x19
    3d34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d36:	05 96       	adiw	r24, 0x05	; 5
    3d38:	9e 01       	movw	r18, r28
    3d3a:	2b 5f       	subi	r18, 0xFB	; 251
    3d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d3e:	b9 01       	movw	r22, r18
    3d40:	0e 94 96 29 	call	0x532c	; 0x532c <strcpy>
			ret = 1;
    3d44:	81 e0       	ldi	r24, 0x01	; 1
    3d46:	8c 83       	std	Y+4, r24	; 0x04
		}
	}
	if(ret == 1)
    3d48:	8c 81       	ldd	r24, Y+4	; 0x04
    3d4a:	81 30       	cpi	r24, 0x01	; 1
    3d4c:	09 f0       	breq	.+2      	; 0x3d50 <editUser+0xe6>
    3d4e:	4b c0       	rjmp	.+150    	; 0x3de6 <editUser+0x17c>
	{
		Bluetooth_vSendString((u8 *)"\n\rEnter User Password : ");
    3d50:	83 ed       	ldi	r24, 0xD3	; 211
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		u8 counterPass = 0;
    3d58:	19 82       	std	Y+1, r1	; 0x01
    3d5a:	1d c0       	rjmp	.+58     	; 0x3d96 <editUser+0x12c>
		while(temppass[counterPass - 1] != '\r')
		{
			temppass[counterPass] = Bluetooth_u8ReceiveData();
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	08 2f       	mov	r16, r24
    3d60:	10 e0       	ldi	r17, 0x00	; 0
    3d62:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <Bluetooth_u8ReceiveData>
    3d66:	28 2f       	mov	r18, r24
    3d68:	ce 01       	movw	r24, r28
    3d6a:	0f 96       	adiw	r24, 0x0f	; 15
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	e0 0f       	add	r30, r16
    3d70:	f1 1f       	adc	r31, r17
    3d72:	20 83       	st	Z, r18
			Bluetooth_vSendData(temppass[counterPass]);
    3d74:	89 81       	ldd	r24, Y+1	; 0x01
    3d76:	28 2f       	mov	r18, r24
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	ce 01       	movw	r24, r28
    3d7c:	0f 96       	adiw	r24, 0x0f	; 15
    3d7e:	fc 01       	movw	r30, r24
    3d80:	e2 0f       	add	r30, r18
    3d82:	f3 1f       	adc	r31, r19
    3d84:	80 81       	ld	r24, Z
    3d86:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>
			counterPass++;
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	8f 5f       	subi	r24, 0xFF	; 255
    3d8e:	89 83       	std	Y+1, r24	; 0x01
			if(counterPass == USER_PASS_MAX_SIZE - 1) break;
    3d90:	89 81       	ldd	r24, Y+1	; 0x01
    3d92:	89 30       	cpi	r24, 0x09	; 9
    3d94:	71 f0       	breq	.+28     	; 0x3db2 <editUser+0x148>
	}
	if(ret == 1)
	{
		Bluetooth_vSendString((u8 *)"\n\rEnter User Password : ");
		u8 counterPass = 0;
		while(temppass[counterPass - 1] != '\r')
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	88 2f       	mov	r24, r24
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	9c 01       	movw	r18, r24
    3d9e:	21 50       	subi	r18, 0x01	; 1
    3da0:	30 40       	sbci	r19, 0x00	; 0
    3da2:	ce 01       	movw	r24, r28
    3da4:	0f 96       	adiw	r24, 0x0f	; 15
    3da6:	fc 01       	movw	r30, r24
    3da8:	e2 0f       	add	r30, r18
    3daa:	f3 1f       	adc	r31, r19
    3dac:	80 81       	ld	r24, Z
    3dae:	8d 30       	cpi	r24, 0x0D	; 13
    3db0:	a9 f6       	brne	.-86     	; 0x3d5c <editUser+0xf2>
			temppass[counterPass] = Bluetooth_u8ReceiveData();
			Bluetooth_vSendData(temppass[counterPass]);
			counterPass++;
			if(counterPass == USER_PASS_MAX_SIZE - 1) break;
		}
		temppass[counterPass-1] = '\0';
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	88 2f       	mov	r24, r24
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	9c 01       	movw	r18, r24
    3dba:	21 50       	subi	r18, 0x01	; 1
    3dbc:	30 40       	sbci	r19, 0x00	; 0
    3dbe:	ce 01       	movw	r24, r28
    3dc0:	0f 96       	adiw	r24, 0x0f	; 15
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	e2 0f       	add	r30, r18
    3dc6:	f3 1f       	adc	r31, r19
    3dc8:	10 82       	st	Z, r1
		strcpy((char *)_user->userPass,(char *)temppass);
    3dca:	89 8d       	ldd	r24, Y+25	; 0x19
    3dcc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3dce:	0f 96       	adiw	r24, 0x0f	; 15
    3dd0:	9e 01       	movw	r18, r28
    3dd2:	21 5f       	subi	r18, 0xF1	; 241
    3dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd6:	b9 01       	movw	r22, r18
    3dd8:	0e 94 96 29 	call	0x532c	; 0x532c <strcpy>
		//EEPROM_vWriteString(_user->userNameAdd,_user->userName,_user->block);
		//_delay_ms(200);
		//EEPROM_vWriteString(_user->userPassAdd,_user->userPass,_user->block);
		Bluetooth_vSendString((u8 *)"\n\rUser Edited Successfully ");
    3ddc:	8a e3       	ldi	r24, 0x3A	; 58
    3dde:	91 e0       	ldi	r25, 0x01	; 1
    3de0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
    3de4:	04 c0       	rjmp	.+8      	; 0x3dee <editUser+0x184>
	}
	else
	{
		Bluetooth_vSendString((u8 *)"\n\rUser Is Not Exist");
    3de6:	86 e5       	ldi	r24, 0x56	; 86
    3de8:	91 e0       	ldi	r25, 0x01	; 1
    3dea:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	}
	return ret;
    3dee:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3df0:	6a 96       	adiw	r28, 0x1a	; 26
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	f8 94       	cli
    3df6:	de bf       	out	0x3e, r29	; 62
    3df8:	0f be       	out	0x3f, r0	; 63
    3dfa:	cd bf       	out	0x3d, r28	; 61
    3dfc:	cf 91       	pop	r28
    3dfe:	df 91       	pop	r29
    3e00:	1f 91       	pop	r17
    3e02:	0f 91       	pop	r16
    3e04:	08 95       	ret

00003e06 <isUserExist>:

u8 isUserExist(u8 *userName)
{
    3e06:	df 93       	push	r29
    3e08:	cf 93       	push	r28
    3e0a:	00 d0       	rcall	.+0      	; 0x3e0c <isUserExist+0x6>
    3e0c:	00 d0       	rcall	.+0      	; 0x3e0e <isUserExist+0x8>
    3e0e:	cd b7       	in	r28, 0x3d	; 61
    3e10:	de b7       	in	r29, 0x3e	; 62
    3e12:	9c 83       	std	Y+4, r25	; 0x04
    3e14:	8b 83       	std	Y+3, r24	; 0x03
	u8 ret = 1;
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3e1a:	19 82       	std	Y+1, r1	; 0x01
    3e1c:	18 c0       	rjmp	.+48     	; 0x3e4e <isUserExist+0x48>
	while(i < userSlots)
	{
		if(!strcmp((char *)userName,(char *)dbAccounts[i]->userName))
    3e1e:	89 81       	ldd	r24, Y+1	; 0x01
    3e20:	88 2f       	mov	r24, r24
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	88 0f       	add	r24, r24
    3e26:	99 1f       	adc	r25, r25
    3e28:	fc 01       	movw	r30, r24
    3e2a:	ed 54       	subi	r30, 0x4D	; 77
    3e2c:	f9 4f       	sbci	r31, 0xF9	; 249
    3e2e:	80 81       	ld	r24, Z
    3e30:	91 81       	ldd	r25, Z+1	; 0x01
    3e32:	9c 01       	movw	r18, r24
    3e34:	2b 5f       	subi	r18, 0xFB	; 251
    3e36:	3f 4f       	sbci	r19, 0xFF	; 255
    3e38:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e3c:	b9 01       	movw	r22, r18
    3e3e:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    3e42:	00 97       	sbiw	r24, 0x00	; 0
    3e44:	09 f4       	brne	.+2      	; 0x3e48 <isUserExist+0x42>
		{
			ret = 0;
    3e46:	1a 82       	std	Y+2, r1	; 0x02
		}
		i++;
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	8f 5f       	subi	r24, 0xFF	; 255
    3e4c:	89 83       	std	Y+1, r24	; 0x01

u8 isUserExist(u8 *userName)
{
	u8 ret = 1;
	u8 i = 0;
	while(i < userSlots)
    3e4e:	90 91 35 06 	lds	r25, 0x0635
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
    3e54:	89 17       	cp	r24, r25
    3e56:	18 f3       	brcs	.-58     	; 0x3e1e <isUserExist+0x18>
		{
			ret = 0;
		}
		i++;
	}
	return ret;
    3e58:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3e5a:	0f 90       	pop	r0
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	cf 91       	pop	r28
    3e64:	df 91       	pop	r29
    3e66:	08 95       	ret

00003e68 <databaseLoad>:

void databaseLoad()
{
    3e68:	df 93       	push	r29
    3e6a:	cf 93       	push	r28
    3e6c:	0f 92       	push	r0
    3e6e:	cd b7       	in	r28, 0x3d	; 61
    3e70:	de b7       	in	r29, 0x3e	; 62
	u8 i = 0;
    3e72:	19 82       	std	Y+1, r1	; 0x01
    3e74:	5b c0       	rjmp	.+182    	; 0x3f2c <databaseLoad+0xc4>
	while(i < userSlots)
	{
		EEPROM_vReadString(dbAccounts[i]->userNameAdd,dbAccounts[i]->userName,dbAccounts[i]->block);
    3e76:	89 81       	ldd	r24, Y+1	; 0x01
    3e78:	88 2f       	mov	r24, r24
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	88 0f       	add	r24, r24
    3e7e:	99 1f       	adc	r25, r25
    3e80:	fc 01       	movw	r30, r24
    3e82:	ed 54       	subi	r30, 0x4D	; 77
    3e84:	f9 4f       	sbci	r31, 0xF9	; 249
    3e86:	01 90       	ld	r0, Z+
    3e88:	f0 81       	ld	r31, Z
    3e8a:	e0 2d       	mov	r30, r0
    3e8c:	81 81       	ldd	r24, Z+1	; 0x01
    3e8e:	92 81       	ldd	r25, Z+2	; 0x02
    3e90:	48 2f       	mov	r20, r24
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
    3e94:	88 2f       	mov	r24, r24
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	88 0f       	add	r24, r24
    3e9a:	99 1f       	adc	r25, r25
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	ed 54       	subi	r30, 0x4D	; 77
    3ea0:	f9 4f       	sbci	r31, 0xF9	; 249
    3ea2:	80 81       	ld	r24, Z
    3ea4:	91 81       	ldd	r25, Z+1	; 0x01
    3ea6:	9c 01       	movw	r18, r24
    3ea8:	2b 5f       	subi	r18, 0xFB	; 251
    3eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	88 2f       	mov	r24, r24
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	88 0f       	add	r24, r24
    3eb4:	99 1f       	adc	r25, r25
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	ed 54       	subi	r30, 0x4D	; 77
    3eba:	f9 4f       	sbci	r31, 0xF9	; 249
    3ebc:	01 90       	ld	r0, Z+
    3ebe:	f0 81       	ld	r31, Z
    3ec0:	e0 2d       	mov	r30, r0
    3ec2:	90 81       	ld	r25, Z
    3ec4:	84 2f       	mov	r24, r20
    3ec6:	b9 01       	movw	r22, r18
    3ec8:	49 2f       	mov	r20, r25
    3eca:	0e 94 c3 1c 	call	0x3986	; 0x3986 <EEPROM_vReadString>
		EEPROM_vReadString(dbAccounts[i]->userPassAdd,dbAccounts[i]->userPass,dbAccounts[i]->block);
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	88 2f       	mov	r24, r24
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	88 0f       	add	r24, r24
    3ed6:	99 1f       	adc	r25, r25
    3ed8:	fc 01       	movw	r30, r24
    3eda:	ed 54       	subi	r30, 0x4D	; 77
    3edc:	f9 4f       	sbci	r31, 0xF9	; 249
    3ede:	01 90       	ld	r0, Z+
    3ee0:	f0 81       	ld	r31, Z
    3ee2:	e0 2d       	mov	r30, r0
    3ee4:	83 81       	ldd	r24, Z+3	; 0x03
    3ee6:	94 81       	ldd	r25, Z+4	; 0x04
    3ee8:	48 2f       	mov	r20, r24
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	88 2f       	mov	r24, r24
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	88 0f       	add	r24, r24
    3ef2:	99 1f       	adc	r25, r25
    3ef4:	fc 01       	movw	r30, r24
    3ef6:	ed 54       	subi	r30, 0x4D	; 77
    3ef8:	f9 4f       	sbci	r31, 0xF9	; 249
    3efa:	80 81       	ld	r24, Z
    3efc:	91 81       	ldd	r25, Z+1	; 0x01
    3efe:	9c 01       	movw	r18, r24
    3f00:	21 5f       	subi	r18, 0xF1	; 241
    3f02:	3f 4f       	sbci	r19, 0xFF	; 255
    3f04:	89 81       	ldd	r24, Y+1	; 0x01
    3f06:	88 2f       	mov	r24, r24
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	88 0f       	add	r24, r24
    3f0c:	99 1f       	adc	r25, r25
    3f0e:	fc 01       	movw	r30, r24
    3f10:	ed 54       	subi	r30, 0x4D	; 77
    3f12:	f9 4f       	sbci	r31, 0xF9	; 249
    3f14:	01 90       	ld	r0, Z+
    3f16:	f0 81       	ld	r31, Z
    3f18:	e0 2d       	mov	r30, r0
    3f1a:	90 81       	ld	r25, Z
    3f1c:	84 2f       	mov	r24, r20
    3f1e:	b9 01       	movw	r22, r18
    3f20:	49 2f       	mov	r20, r25
    3f22:	0e 94 c3 1c 	call	0x3986	; 0x3986 <EEPROM_vReadString>
		i++;
    3f26:	89 81       	ldd	r24, Y+1	; 0x01
    3f28:	8f 5f       	subi	r24, 0xFF	; 255
    3f2a:	89 83       	std	Y+1, r24	; 0x01
}

void databaseLoad()
{
	u8 i = 0;
	while(i < userSlots)
    3f2c:	90 91 35 06 	lds	r25, 0x0635
    3f30:	89 81       	ldd	r24, Y+1	; 0x01
    3f32:	89 17       	cp	r24, r25
    3f34:	08 f4       	brcc	.+2      	; 0x3f38 <databaseLoad+0xd0>
    3f36:	9f cf       	rjmp	.-194    	; 0x3e76 <databaseLoad+0xe>
	{
		EEPROM_vReadString(dbAccounts[i]->userNameAdd,dbAccounts[i]->userName,dbAccounts[i]->block);
		EEPROM_vReadString(dbAccounts[i]->userPassAdd,dbAccounts[i]->userPass,dbAccounts[i]->block);
		i++;
	}
}
    3f38:	0f 90       	pop	r0
    3f3a:	cf 91       	pop	r28
    3f3c:	df 91       	pop	r29
    3f3e:	08 95       	ret

00003f40 <databaseSave>:


void databaseSave()
{
    3f40:	df 93       	push	r29
    3f42:	cf 93       	push	r28
    3f44:	0f 92       	push	r0
    3f46:	cd b7       	in	r28, 0x3d	; 61
    3f48:	de b7       	in	r29, 0x3e	; 62
	u8 i = 0;
    3f4a:	19 82       	std	Y+1, r1	; 0x01
    3f4c:	5b c0       	rjmp	.+182    	; 0x4004 <databaseSave+0xc4>
	while(i < userSlots)
	{
		EEPROM_vWriteString(dbAccounts[i]->userNameAdd,dbAccounts[i]->userName,dbAccounts[i]->block);
    3f4e:	89 81       	ldd	r24, Y+1	; 0x01
    3f50:	88 2f       	mov	r24, r24
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	88 0f       	add	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	fc 01       	movw	r30, r24
    3f5a:	ed 54       	subi	r30, 0x4D	; 77
    3f5c:	f9 4f       	sbci	r31, 0xF9	; 249
    3f5e:	01 90       	ld	r0, Z+
    3f60:	f0 81       	ld	r31, Z
    3f62:	e0 2d       	mov	r30, r0
    3f64:	81 81       	ldd	r24, Z+1	; 0x01
    3f66:	92 81       	ldd	r25, Z+2	; 0x02
    3f68:	48 2f       	mov	r20, r24
    3f6a:	89 81       	ldd	r24, Y+1	; 0x01
    3f6c:	88 2f       	mov	r24, r24
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	88 0f       	add	r24, r24
    3f72:	99 1f       	adc	r25, r25
    3f74:	fc 01       	movw	r30, r24
    3f76:	ed 54       	subi	r30, 0x4D	; 77
    3f78:	f9 4f       	sbci	r31, 0xF9	; 249
    3f7a:	80 81       	ld	r24, Z
    3f7c:	91 81       	ldd	r25, Z+1	; 0x01
    3f7e:	9c 01       	movw	r18, r24
    3f80:	2b 5f       	subi	r18, 0xFB	; 251
    3f82:	3f 4f       	sbci	r19, 0xFF	; 255
    3f84:	89 81       	ldd	r24, Y+1	; 0x01
    3f86:	88 2f       	mov	r24, r24
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	88 0f       	add	r24, r24
    3f8c:	99 1f       	adc	r25, r25
    3f8e:	fc 01       	movw	r30, r24
    3f90:	ed 54       	subi	r30, 0x4D	; 77
    3f92:	f9 4f       	sbci	r31, 0xF9	; 249
    3f94:	01 90       	ld	r0, Z+
    3f96:	f0 81       	ld	r31, Z
    3f98:	e0 2d       	mov	r30, r0
    3f9a:	90 81       	ld	r25, Z
    3f9c:	84 2f       	mov	r24, r20
    3f9e:	b9 01       	movw	r22, r18
    3fa0:	49 2f       	mov	r20, r25
    3fa2:	0e 94 87 1c 	call	0x390e	; 0x390e <EEPROM_vWriteString>
		EEPROM_vWriteString(dbAccounts[i]->userPassAdd,dbAccounts[i]->userPass,dbAccounts[i]->block);
    3fa6:	89 81       	ldd	r24, Y+1	; 0x01
    3fa8:	88 2f       	mov	r24, r24
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	88 0f       	add	r24, r24
    3fae:	99 1f       	adc	r25, r25
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	ed 54       	subi	r30, 0x4D	; 77
    3fb4:	f9 4f       	sbci	r31, 0xF9	; 249
    3fb6:	01 90       	ld	r0, Z+
    3fb8:	f0 81       	ld	r31, Z
    3fba:	e0 2d       	mov	r30, r0
    3fbc:	83 81       	ldd	r24, Z+3	; 0x03
    3fbe:	94 81       	ldd	r25, Z+4	; 0x04
    3fc0:	48 2f       	mov	r20, r24
    3fc2:	89 81       	ldd	r24, Y+1	; 0x01
    3fc4:	88 2f       	mov	r24, r24
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	88 0f       	add	r24, r24
    3fca:	99 1f       	adc	r25, r25
    3fcc:	fc 01       	movw	r30, r24
    3fce:	ed 54       	subi	r30, 0x4D	; 77
    3fd0:	f9 4f       	sbci	r31, 0xF9	; 249
    3fd2:	80 81       	ld	r24, Z
    3fd4:	91 81       	ldd	r25, Z+1	; 0x01
    3fd6:	9c 01       	movw	r18, r24
    3fd8:	21 5f       	subi	r18, 0xF1	; 241
    3fda:	3f 4f       	sbci	r19, 0xFF	; 255
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	88 2f       	mov	r24, r24
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	88 0f       	add	r24, r24
    3fe4:	99 1f       	adc	r25, r25
    3fe6:	fc 01       	movw	r30, r24
    3fe8:	ed 54       	subi	r30, 0x4D	; 77
    3fea:	f9 4f       	sbci	r31, 0xF9	; 249
    3fec:	01 90       	ld	r0, Z+
    3fee:	f0 81       	ld	r31, Z
    3ff0:	e0 2d       	mov	r30, r0
    3ff2:	90 81       	ld	r25, Z
    3ff4:	84 2f       	mov	r24, r20
    3ff6:	b9 01       	movw	r22, r18
    3ff8:	49 2f       	mov	r20, r25
    3ffa:	0e 94 87 1c 	call	0x390e	; 0x390e <EEPROM_vWriteString>
		i++;
    3ffe:	89 81       	ldd	r24, Y+1	; 0x01
    4000:	8f 5f       	subi	r24, 0xFF	; 255
    4002:	89 83       	std	Y+1, r24	; 0x01


void databaseSave()
{
	u8 i = 0;
	while(i < userSlots)
    4004:	90 91 35 06 	lds	r25, 0x0635
    4008:	89 81       	ldd	r24, Y+1	; 0x01
    400a:	89 17       	cp	r24, r25
    400c:	08 f4       	brcc	.+2      	; 0x4010 <databaseSave+0xd0>
    400e:	9f cf       	rjmp	.-194    	; 0x3f4e <databaseSave+0xe>
	{
		EEPROM_vWriteString(dbAccounts[i]->userNameAdd,dbAccounts[i]->userName,dbAccounts[i]->block);
		EEPROM_vWriteString(dbAccounts[i]->userPassAdd,dbAccounts[i]->userPass,dbAccounts[i]->block);
		i++;
	}
}
    4010:	0f 90       	pop	r0
    4012:	cf 91       	pop	r28
    4014:	df 91       	pop	r29
    4016:	08 95       	ret

00004018 <viewUsers>:


void viewUsers()
{
    4018:	df 93       	push	r29
    401a:	cf 93       	push	r28
    401c:	0f 92       	push	r0
    401e:	cd b7       	in	r28, 0x3d	; 61
    4020:	de b7       	in	r29, 0x3e	; 62
	u8 i = 0;
    4022:	19 82       	std	Y+1, r1	; 0x01
    4024:	4b c0       	rjmp	.+150    	; 0x40bc <viewUsers+0xa4>
	while(i < userSlots)
	{
		Bluetooth_vSendString((u8 *)"\n\rUser Name Address : ");
    4026:	8a e6       	ldi	r24, 0x6A	; 106
    4028:	91 e0       	ldi	r25, 0x01	; 1
    402a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		Bluetooth_vSendData(dbAccounts[i]->userNameAdd);
    402e:	89 81       	ldd	r24, Y+1	; 0x01
    4030:	88 2f       	mov	r24, r24
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	88 0f       	add	r24, r24
    4036:	99 1f       	adc	r25, r25
    4038:	fc 01       	movw	r30, r24
    403a:	ed 54       	subi	r30, 0x4D	; 77
    403c:	f9 4f       	sbci	r31, 0xF9	; 249
    403e:	01 90       	ld	r0, Z+
    4040:	f0 81       	ld	r31, Z
    4042:	e0 2d       	mov	r30, r0
    4044:	81 81       	ldd	r24, Z+1	; 0x01
    4046:	92 81       	ldd	r25, Z+2	; 0x02
    4048:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>

		Bluetooth_vSendString((u8 *)"\n\rUser Password Address : ");
    404c:	81 e8       	ldi	r24, 0x81	; 129
    404e:	91 e0       	ldi	r25, 0x01	; 1
    4050:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		Bluetooth_vSendData(dbAccounts[i]->userPassAdd);
    4054:	89 81       	ldd	r24, Y+1	; 0x01
    4056:	88 2f       	mov	r24, r24
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	88 0f       	add	r24, r24
    405c:	99 1f       	adc	r25, r25
    405e:	fc 01       	movw	r30, r24
    4060:	ed 54       	subi	r30, 0x4D	; 77
    4062:	f9 4f       	sbci	r31, 0xF9	; 249
    4064:	01 90       	ld	r0, Z+
    4066:	f0 81       	ld	r31, Z
    4068:	e0 2d       	mov	r30, r0
    406a:	83 81       	ldd	r24, Z+3	; 0x03
    406c:	94 81       	ldd	r25, Z+4	; 0x04
    406e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>


		Bluetooth_vSendString((u8 *)"\n\rUser Name : ");
    4072:	8c e9       	ldi	r24, 0x9C	; 156
    4074:	91 e0       	ldi	r25, 0x01	; 1
    4076:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		Bluetooth_vSendString(dbAccounts[i]->userName);
    407a:	89 81       	ldd	r24, Y+1	; 0x01
    407c:	88 2f       	mov	r24, r24
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	88 0f       	add	r24, r24
    4082:	99 1f       	adc	r25, r25
    4084:	fc 01       	movw	r30, r24
    4086:	ed 54       	subi	r30, 0x4D	; 77
    4088:	f9 4f       	sbci	r31, 0xF9	; 249
    408a:	80 81       	ld	r24, Z
    408c:	91 81       	ldd	r25, Z+1	; 0x01
    408e:	05 96       	adiw	r24, 0x05	; 5
    4090:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>


		Bluetooth_vSendString((u8 *)"\n\rUser Password : ");
    4094:	8b ea       	ldi	r24, 0xAB	; 171
    4096:	91 e0       	ldi	r25, 0x01	; 1
    4098:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		Bluetooth_vSendString(dbAccounts[i]->userPass);
    409c:	89 81       	ldd	r24, Y+1	; 0x01
    409e:	88 2f       	mov	r24, r24
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	88 0f       	add	r24, r24
    40a4:	99 1f       	adc	r25, r25
    40a6:	fc 01       	movw	r30, r24
    40a8:	ed 54       	subi	r30, 0x4D	; 77
    40aa:	f9 4f       	sbci	r31, 0xF9	; 249
    40ac:	80 81       	ld	r24, Z
    40ae:	91 81       	ldd	r25, Z+1	; 0x01
    40b0:	0f 96       	adiw	r24, 0x0f	; 15
    40b2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		i++;
    40b6:	89 81       	ldd	r24, Y+1	; 0x01
    40b8:	8f 5f       	subi	r24, 0xFF	; 255
    40ba:	89 83       	std	Y+1, r24	; 0x01


void viewUsers()
{
	u8 i = 0;
	while(i < userSlots)
    40bc:	90 91 35 06 	lds	r25, 0x0635
    40c0:	89 81       	ldd	r24, Y+1	; 0x01
    40c2:	89 17       	cp	r24, r25
    40c4:	08 f4       	brcc	.+2      	; 0x40c8 <viewUsers+0xb0>
    40c6:	af cf       	rjmp	.-162    	; 0x4026 <viewUsers+0xe>

		Bluetooth_vSendString((u8 *)"\n\rUser Password : ");
		Bluetooth_vSendString(dbAccounts[i]->userPass);
		i++;
	}
}
    40c8:	0f 90       	pop	r0
    40ca:	cf 91       	pop	r28
    40cc:	df 91       	pop	r29
    40ce:	08 95       	ret

000040d0 <UsersList>:

void UsersList()
{
    40d0:	df 93       	push	r29
    40d2:	cf 93       	push	r28
    40d4:	0f 92       	push	r0
    40d6:	cd b7       	in	r28, 0x3d	; 61
    40d8:	de b7       	in	r29, 0x3e	; 62
	u8 i = 0;
    40da:	19 82       	std	Y+1, r1	; 0x01
    40dc:	1c c0       	rjmp	.+56     	; 0x4116 <UsersList+0x46>
	while(i < userSlots)
	{
		Bluetooth_vSendString((u8 *)"\n\r");
    40de:	8e eb       	ldi	r24, 0xBE	; 190
    40e0:	91 e0       	ldi	r25, 0x01	; 1
    40e2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		Bluetooth_vSendData((i) + '0');
    40e6:	89 81       	ldd	r24, Y+1	; 0x01
    40e8:	80 5d       	subi	r24, 0xD0	; 208
    40ea:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>
		Bluetooth_vSendString((u8 *)" - User Name : ");
    40ee:	81 ec       	ldi	r24, 0xC1	; 193
    40f0:	91 e0       	ldi	r25, 0x01	; 1
    40f2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		Bluetooth_vSendString(dbAccounts[i]->userName);
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
    40f8:	88 2f       	mov	r24, r24
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	88 0f       	add	r24, r24
    40fe:	99 1f       	adc	r25, r25
    4100:	fc 01       	movw	r30, r24
    4102:	ed 54       	subi	r30, 0x4D	; 77
    4104:	f9 4f       	sbci	r31, 0xF9	; 249
    4106:	80 81       	ld	r24, Z
    4108:	91 81       	ldd	r25, Z+1	; 0x01
    410a:	05 96       	adiw	r24, 0x05	; 5
    410c:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		i++;
    4110:	89 81       	ldd	r24, Y+1	; 0x01
    4112:	8f 5f       	subi	r24, 0xFF	; 255
    4114:	89 83       	std	Y+1, r24	; 0x01
}

void UsersList()
{
	u8 i = 0;
	while(i < userSlots)
    4116:	90 91 35 06 	lds	r25, 0x0635
    411a:	89 81       	ldd	r24, Y+1	; 0x01
    411c:	89 17       	cp	r24, r25
    411e:	f8 f2       	brcs	.-66     	; 0x40de <UsersList+0xe>
		Bluetooth_vSendData((i) + '0');
		Bluetooth_vSendString((u8 *)" - User Name : ");
		Bluetooth_vSendString(dbAccounts[i]->userName);
		i++;
	}
}
    4120:	0f 90       	pop	r0
    4122:	cf 91       	pop	r28
    4124:	df 91       	pop	r29
    4126:	08 95       	ret

00004128 <eraseUser>:

void eraseUser(ST_userData_t *_user)
{
    4128:	df 93       	push	r29
    412a:	cf 93       	push	r28
    412c:	00 d0       	rcall	.+0      	; 0x412e <eraseUser+0x6>
    412e:	00 d0       	rcall	.+0      	; 0x4130 <eraseUser+0x8>
    4130:	cd b7       	in	r28, 0x3d	; 61
    4132:	de b7       	in	r29, 0x3e	; 62
    4134:	9c 83       	std	Y+4, r25	; 0x04
    4136:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;
    4138:	1a 82       	std	Y+2, r1	; 0x02
	u8 j = 0;
    413a:	19 82       	std	Y+1, r1	; 0x01
    413c:	16 c0       	rjmp	.+44     	; 0x416a <eraseUser+0x42>
	while(i <= USER_NAME_MAX_SIZE)
	{
		strcpy((char *)_user->userName[i],"\0");
    413e:	8a 81       	ldd	r24, Y+2	; 0x02
    4140:	28 2f       	mov	r18, r24
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	8b 81       	ldd	r24, Y+3	; 0x03
    4146:	9c 81       	ldd	r25, Y+4	; 0x04
    4148:	82 0f       	add	r24, r18
    414a:	93 1f       	adc	r25, r19
    414c:	fc 01       	movw	r30, r24
    414e:	35 96       	adiw	r30, 0x05	; 5
    4150:	80 81       	ld	r24, Z
    4152:	88 2f       	mov	r24, r24
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	21 ed       	ldi	r18, 0xD1	; 209
    4158:	31 e0       	ldi	r19, 0x01	; 1
    415a:	b9 01       	movw	r22, r18
    415c:	41 e0       	ldi	r20, 0x01	; 1
    415e:	50 e0       	ldi	r21, 0x00	; 0
    4160:	0e 94 84 29 	call	0x5308	; 0x5308 <memcpy>
		i++;
    4164:	8a 81       	ldd	r24, Y+2	; 0x02
    4166:	8f 5f       	subi	r24, 0xFF	; 255
    4168:	8a 83       	std	Y+2, r24	; 0x02

void eraseUser(ST_userData_t *_user)
{
	u8 i = 0;
	u8 j = 0;
	while(i <= USER_NAME_MAX_SIZE)
    416a:	8a 81       	ldd	r24, Y+2	; 0x02
    416c:	8b 30       	cpi	r24, 0x0B	; 11
    416e:	38 f3       	brcs	.-50     	; 0x413e <eraseUser+0x16>
    4170:	16 c0       	rjmp	.+44     	; 0x419e <eraseUser+0x76>
		strcpy((char *)_user->userName[i],"\0");
		i++;
	}
	while(j <= USER_PASS_MAX_SIZE)
	{
		strcpy((char *)_user->userPass[j],"\0");
    4172:	89 81       	ldd	r24, Y+1	; 0x01
    4174:	28 2f       	mov	r18, r24
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	8b 81       	ldd	r24, Y+3	; 0x03
    417a:	9c 81       	ldd	r25, Y+4	; 0x04
    417c:	82 0f       	add	r24, r18
    417e:	93 1f       	adc	r25, r19
    4180:	fc 01       	movw	r30, r24
    4182:	3f 96       	adiw	r30, 0x0f	; 15
    4184:	80 81       	ld	r24, Z
    4186:	88 2f       	mov	r24, r24
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	21 ed       	ldi	r18, 0xD1	; 209
    418c:	31 e0       	ldi	r19, 0x01	; 1
    418e:	b9 01       	movw	r22, r18
    4190:	41 e0       	ldi	r20, 0x01	; 1
    4192:	50 e0       	ldi	r21, 0x00	; 0
    4194:	0e 94 84 29 	call	0x5308	; 0x5308 <memcpy>
		j++;
    4198:	89 81       	ldd	r24, Y+1	; 0x01
    419a:	8f 5f       	subi	r24, 0xFF	; 255
    419c:	89 83       	std	Y+1, r24	; 0x01
	while(i <= USER_NAME_MAX_SIZE)
	{
		strcpy((char *)_user->userName[i],"\0");
		i++;
	}
	while(j <= USER_PASS_MAX_SIZE)
    419e:	89 81       	ldd	r24, Y+1	; 0x01
    41a0:	8b 30       	cpi	r24, 0x0B	; 11
    41a2:	38 f3       	brcs	.-50     	; 0x4172 <eraseUser+0x4a>
	{
		strcpy((char *)_user->userPass[j],"\0");
		j++;
	}
	strcpy((char *)_user->userName,"FREE");
    41a4:	8b 81       	ldd	r24, Y+3	; 0x03
    41a6:	9c 81       	ldd	r25, Y+4	; 0x04
    41a8:	05 96       	adiw	r24, 0x05	; 5
    41aa:	23 ed       	ldi	r18, 0xD3	; 211
    41ac:	31 e0       	ldi	r19, 0x01	; 1
    41ae:	b9 01       	movw	r22, r18
    41b0:	45 e0       	ldi	r20, 0x05	; 5
    41b2:	50 e0       	ldi	r21, 0x00	; 0
    41b4:	0e 94 84 29 	call	0x5308	; 0x5308 <memcpy>
	strcpy((char *)_user->userPass,"\0");
    41b8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ba:	9c 81       	ldd	r25, Y+4	; 0x04
    41bc:	0f 96       	adiw	r24, 0x0f	; 15
    41be:	21 ed       	ldi	r18, 0xD1	; 209
    41c0:	31 e0       	ldi	r19, 0x01	; 1
    41c2:	b9 01       	movw	r22, r18
    41c4:	41 e0       	ldi	r20, 0x01	; 1
    41c6:	50 e0       	ldi	r21, 0x00	; 0
    41c8:	0e 94 84 29 	call	0x5308	; 0x5308 <memcpy>
}
    41cc:	0f 90       	pop	r0
    41ce:	0f 90       	pop	r0
    41d0:	0f 90       	pop	r0
    41d2:	0f 90       	pop	r0
    41d4:	cf 91       	pop	r28
    41d6:	df 91       	pop	r29
    41d8:	08 95       	ret

000041da <removeUser>:

void removeUser(ST_userData_t *_user)
{
    41da:	df 93       	push	r29
    41dc:	cf 93       	push	r28
    41de:	00 d0       	rcall	.+0      	; 0x41e0 <removeUser+0x6>
    41e0:	cd b7       	in	r28, 0x3d	; 61
    41e2:	de b7       	in	r29, 0x3e	; 62
    41e4:	9a 83       	std	Y+2, r25	; 0x02
    41e6:	89 83       	std	Y+1, r24	; 0x01
	eraseUser(_user);
    41e8:	89 81       	ldd	r24, Y+1	; 0x01
    41ea:	9a 81       	ldd	r25, Y+2	; 0x02
    41ec:	0e 94 94 20 	call	0x4128	; 0x4128 <eraseUser>
	EEPROM_u8ReadByte(0xF8,&NumberOfRegistars,BLOCK1);
    41f0:	2d ef       	ldi	r18, 0xFD	; 253
    41f2:	36 e0       	ldi	r19, 0x06	; 6
    41f4:	88 ef       	ldi	r24, 0xF8	; 248
    41f6:	b9 01       	movw	r22, r18
    41f8:	42 e0       	ldi	r20, 0x02	; 2
    41fa:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <EEPROM_u8ReadByte>
	NumberOfRegistars--;
    41fe:	80 91 fd 06 	lds	r24, 0x06FD
    4202:	81 50       	subi	r24, 0x01	; 1
    4204:	80 93 fd 06 	sts	0x06FD, r24
	EEPROM_u8WriteByte(0xF8,NumberOfRegistars,BLOCK1);
    4208:	90 91 fd 06 	lds	r25, 0x06FD
    420c:	88 ef       	ldi	r24, 0xF8	; 248
    420e:	69 2f       	mov	r22, r25
    4210:	42 e0       	ldi	r20, 0x02	; 2
    4212:	0e 94 2e 1b 	call	0x365c	; 0x365c <EEPROM_u8WriteByte>
	Bluetooth_vSendString((u8 *)"\n\rUser Removed Successfully ");
    4216:	88 ed       	ldi	r24, 0xD8	; 216
    4218:	91 e0       	ldi	r25, 0x01	; 1
    421a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
}
    421e:	0f 90       	pop	r0
    4220:	0f 90       	pop	r0
    4222:	cf 91       	pop	r28
    4224:	df 91       	pop	r29
    4226:	08 95       	ret

00004228 <isFreeSlot>:

u8 isFreeSlot(ST_userData_t *_user)
{
    4228:	df 93       	push	r29
    422a:	cf 93       	push	r28
    422c:	00 d0       	rcall	.+0      	; 0x422e <isFreeSlot+0x6>
    422e:	0f 92       	push	r0
    4230:	cd b7       	in	r28, 0x3d	; 61
    4232:	de b7       	in	r29, 0x3e	; 62
    4234:	9b 83       	std	Y+3, r25	; 0x03
    4236:	8a 83       	std	Y+2, r24	; 0x02

		u8 ret = 0;
    4238:	19 82       	std	Y+1, r1	; 0x01

		if(strcmp("FREE",(char *)_user->userName)==0)
    423a:	8a 81       	ldd	r24, Y+2	; 0x02
    423c:	9b 81       	ldd	r25, Y+3	; 0x03
    423e:	9c 01       	movw	r18, r24
    4240:	2b 5f       	subi	r18, 0xFB	; 251
    4242:	3f 4f       	sbci	r19, 0xFF	; 255
    4244:	83 ed       	ldi	r24, 0xD3	; 211
    4246:	91 e0       	ldi	r25, 0x01	; 1
    4248:	b9 01       	movw	r22, r18
    424a:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    424e:	00 97       	sbiw	r24, 0x00	; 0
    4250:	11 f4       	brne	.+4      	; 0x4256 <isFreeSlot+0x2e>
		{
			ret = 1;
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	89 83       	std	Y+1, r24	; 0x01
		}

		return ret;
    4256:	89 81       	ldd	r24, Y+1	; 0x01
}
    4258:	0f 90       	pop	r0
    425a:	0f 90       	pop	r0
    425c:	0f 90       	pop	r0
    425e:	cf 91       	pop	r28
    4260:	df 91       	pop	r29
    4262:	08 95       	ret

00004264 <app_copy_string>:
#include "string_functions.h"

/*
 * Function to save a string with known length into another variable
 */
void app_copy_string(u8* Copy_u8InputString, u8* Copy_u8OutputString, u8 Copy_u8Length){
    4264:	df 93       	push	r29
    4266:	cf 93       	push	r28
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
    426c:	27 97       	sbiw	r28, 0x07	; 7
    426e:	0f b6       	in	r0, 0x3f	; 63
    4270:	f8 94       	cli
    4272:	de bf       	out	0x3e, r29	; 62
    4274:	0f be       	out	0x3f, r0	; 63
    4276:	cd bf       	out	0x3d, r28	; 61
    4278:	9c 83       	std	Y+4, r25	; 0x04
    427a:	8b 83       	std	Y+3, r24	; 0x03
    427c:	7e 83       	std	Y+6, r23	; 0x06
    427e:	6d 83       	std	Y+5, r22	; 0x05
    4280:	4f 83       	std	Y+7, r20	; 0x07
	app_clear_string(Copy_u8OutputString, array_max_size);
    4282:	8d 81       	ldd	r24, Y+5	; 0x05
    4284:	9e 81       	ldd	r25, Y+6	; 0x06
    4286:	64 e1       	ldi	r22, 0x14	; 20
    4288:	0e 94 6f 21 	call	0x42de	; 0x42de <app_clear_string>
	for(int i=0;i<Copy_u8Length;i++){
    428c:	1a 82       	std	Y+2, r1	; 0x02
    428e:	19 82       	std	Y+1, r1	; 0x01
    4290:	15 c0       	rjmp	.+42     	; 0x42bc <app_copy_string+0x58>
		Copy_u8OutputString[i] = Copy_u8InputString[i];
    4292:	29 81       	ldd	r18, Y+1	; 0x01
    4294:	3a 81       	ldd	r19, Y+2	; 0x02
    4296:	8d 81       	ldd	r24, Y+5	; 0x05
    4298:	9e 81       	ldd	r25, Y+6	; 0x06
    429a:	dc 01       	movw	r26, r24
    429c:	a2 0f       	add	r26, r18
    429e:	b3 1f       	adc	r27, r19
    42a0:	29 81       	ldd	r18, Y+1	; 0x01
    42a2:	3a 81       	ldd	r19, Y+2	; 0x02
    42a4:	8b 81       	ldd	r24, Y+3	; 0x03
    42a6:	9c 81       	ldd	r25, Y+4	; 0x04
    42a8:	fc 01       	movw	r30, r24
    42aa:	e2 0f       	add	r30, r18
    42ac:	f3 1f       	adc	r31, r19
    42ae:	80 81       	ld	r24, Z
    42b0:	8c 93       	st	X, r24
/*
 * Function to save a string with known length into another variable
 */
void app_copy_string(u8* Copy_u8InputString, u8* Copy_u8OutputString, u8 Copy_u8Length){
	app_clear_string(Copy_u8OutputString, array_max_size);
	for(int i=0;i<Copy_u8Length;i++){
    42b2:	89 81       	ldd	r24, Y+1	; 0x01
    42b4:	9a 81       	ldd	r25, Y+2	; 0x02
    42b6:	01 96       	adiw	r24, 0x01	; 1
    42b8:	9a 83       	std	Y+2, r25	; 0x02
    42ba:	89 83       	std	Y+1, r24	; 0x01
    42bc:	8f 81       	ldd	r24, Y+7	; 0x07
    42be:	28 2f       	mov	r18, r24
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	89 81       	ldd	r24, Y+1	; 0x01
    42c4:	9a 81       	ldd	r25, Y+2	; 0x02
    42c6:	82 17       	cp	r24, r18
    42c8:	93 07       	cpc	r25, r19
    42ca:	1c f3       	brlt	.-58     	; 0x4292 <app_copy_string+0x2e>
		Copy_u8OutputString[i] = Copy_u8InputString[i];
	}
}
    42cc:	27 96       	adiw	r28, 0x07	; 7
    42ce:	0f b6       	in	r0, 0x3f	; 63
    42d0:	f8 94       	cli
    42d2:	de bf       	out	0x3e, r29	; 62
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	cd bf       	out	0x3d, r28	; 61
    42d8:	cf 91       	pop	r28
    42da:	df 91       	pop	r29
    42dc:	08 95       	ret

000042de <app_clear_string>:

/**
 * Function to clear an array to null
 */
void app_clear_string(u8* Copy_u8InputString, u8 Copy_u8Length){
    42de:	df 93       	push	r29
    42e0:	cf 93       	push	r28
    42e2:	00 d0       	rcall	.+0      	; 0x42e4 <app_clear_string+0x6>
    42e4:	00 d0       	rcall	.+0      	; 0x42e6 <app_clear_string+0x8>
    42e6:	0f 92       	push	r0
    42e8:	cd b7       	in	r28, 0x3d	; 61
    42ea:	de b7       	in	r29, 0x3e	; 62
    42ec:	9c 83       	std	Y+4, r25	; 0x04
    42ee:	8b 83       	std	Y+3, r24	; 0x03
    42f0:	6d 83       	std	Y+5, r22	; 0x05
	for(int i=0;i<Copy_u8Length;i++){
    42f2:	1a 82       	std	Y+2, r1	; 0x02
    42f4:	19 82       	std	Y+1, r1	; 0x01
    42f6:	0d c0       	rjmp	.+26     	; 0x4312 <app_clear_string+0x34>
		Copy_u8InputString[i] = NULL;
    42f8:	29 81       	ldd	r18, Y+1	; 0x01
    42fa:	3a 81       	ldd	r19, Y+2	; 0x02
    42fc:	8b 81       	ldd	r24, Y+3	; 0x03
    42fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4300:	fc 01       	movw	r30, r24
    4302:	e2 0f       	add	r30, r18
    4304:	f3 1f       	adc	r31, r19
    4306:	10 82       	st	Z, r1

/**
 * Function to clear an array to null
 */
void app_clear_string(u8* Copy_u8InputString, u8 Copy_u8Length){
	for(int i=0;i<Copy_u8Length;i++){
    4308:	89 81       	ldd	r24, Y+1	; 0x01
    430a:	9a 81       	ldd	r25, Y+2	; 0x02
    430c:	01 96       	adiw	r24, 0x01	; 1
    430e:	9a 83       	std	Y+2, r25	; 0x02
    4310:	89 83       	std	Y+1, r24	; 0x01
    4312:	8d 81       	ldd	r24, Y+5	; 0x05
    4314:	28 2f       	mov	r18, r24
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	89 81       	ldd	r24, Y+1	; 0x01
    431a:	9a 81       	ldd	r25, Y+2	; 0x02
    431c:	82 17       	cp	r24, r18
    431e:	93 07       	cpc	r25, r19
    4320:	5c f3       	brlt	.-42     	; 0x42f8 <app_clear_string+0x1a>
		Copy_u8InputString[i] = NULL;
	}
}
    4322:	0f 90       	pop	r0
    4324:	0f 90       	pop	r0
    4326:	0f 90       	pop	r0
    4328:	0f 90       	pop	r0
    432a:	0f 90       	pop	r0
    432c:	cf 91       	pop	r28
    432e:	df 91       	pop	r29
    4330:	08 95       	ret

00004332 <psw_Check_Credentials>:
 * This function takes username and password as input and check if it's equal to the saved ones
 * returns master_data if the inputs are for master user
 * returns correct_data if the inputs are for saved username and password
 * returns wrong_data if the inputs are not identical for any saved username and password
 */
enu_psw_check_return psw_Check_Credentials(){
    4332:	df 93       	push	r29
    4334:	cf 93       	push	r28
    4336:	00 d0       	rcall	.+0      	; 0x4338 <psw_Check_Credentials+0x6>
    4338:	cd b7       	in	r28, 0x3d	; 61
    433a:	de b7       	in	r29, 0x3e	; 62
	u8 temp_return = 0;
    433c:	19 82       	std	Y+1, r1	; 0x01
	/* Check if user entered "FREE" as username and password" */
	if( (strcmp((char*)input_username_string, "FREE") == 0) && (strcmp((char*)input_psw_string, "FREE") == 0) ){
    433e:	89 e2       	ldi	r24, 0x29	; 41
    4340:	97 e0       	ldi	r25, 0x07	; 7
    4342:	25 ef       	ldi	r18, 0xF5	; 245
    4344:	31 e0       	ldi	r19, 0x01	; 1
    4346:	b9 01       	movw	r22, r18
    4348:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    434c:	00 97       	sbiw	r24, 0x00	; 0
    434e:	59 f4       	brne	.+22     	; 0x4366 <psw_Check_Credentials+0x34>
    4350:	8e e3       	ldi	r24, 0x3E	; 62
    4352:	97 e0       	ldi	r25, 0x07	; 7
    4354:	25 ef       	ldi	r18, 0xF5	; 245
    4356:	31 e0       	ldi	r19, 0x01	; 1
    4358:	b9 01       	movw	r22, r18
    435a:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    435e:	00 97       	sbiw	r24, 0x00	; 0
    4360:	11 f4       	brne	.+4      	; 0x4366 <psw_Check_Credentials+0x34>
		return wrong_data;
    4362:	1a 82       	std	Y+2, r1	; 0x02
    4364:	13 c0       	rjmp	.+38     	; 0x438c <psw_Check_Credentials+0x5a>
	}
	/* Check if username and password are for master */
	temp_return = psw_Check_If_Master();
    4366:	0e 94 cc 21 	call	0x4398	; 0x4398 <psw_Check_If_Master>
    436a:	89 83       	std	Y+1, r24	; 0x01
	if(temp_return == master_data){
    436c:	89 81       	ldd	r24, Y+1	; 0x01
    436e:	82 30       	cpi	r24, 0x02	; 2
    4370:	19 f4       	brne	.+6      	; 0x4378 <psw_Check_Credentials+0x46>
		return master_data;
    4372:	82 e0       	ldi	r24, 0x02	; 2
    4374:	8a 83       	std	Y+2, r24	; 0x02
    4376:	0a c0       	rjmp	.+20     	; 0x438c <psw_Check_Credentials+0x5a>
	}else{ /* Do Nothing */ }
	/* If not, check for saved users */
	temp_return = psw_check_If_Normal();
    4378:	0e 94 d5 23 	call	0x47aa	; 0x47aa <psw_check_If_Normal>
    437c:	89 83       	std	Y+1, r24	; 0x01
	if(temp_return == correct_data){
    437e:	89 81       	ldd	r24, Y+1	; 0x01
    4380:	81 30       	cpi	r24, 0x01	; 1
    4382:	19 f4       	brne	.+6      	; 0x438a <psw_Check_Credentials+0x58>
		return correct_data;
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	8a 83       	std	Y+2, r24	; 0x02
    4388:	01 c0       	rjmp	.+2      	; 0x438c <psw_Check_Credentials+0x5a>
	}else{ /* Do Nothing */ }
	/* If not, return 0 as not found */
	return wrong_data;
    438a:	1a 82       	std	Y+2, r1	; 0x02
    438c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    438e:	0f 90       	pop	r0
    4390:	0f 90       	pop	r0
    4392:	cf 91       	pop	r28
    4394:	df 91       	pop	r29
    4396:	08 95       	ret

00004398 <psw_Check_If_Master>:
/*
 * This function checks if username and password are for master user or not
 * returns 1 if the inputs are identical to master login credentials
 * returns 0 if the inputs are not identical to master login credentials
 */
static u8 psw_Check_If_Master(){
    4398:	df 93       	push	r29
    439a:	cf 93       	push	r28
    439c:	cd b7       	in	r28, 0x3d	; 61
    439e:	de b7       	in	r29, 0x3e	; 62
    43a0:	e3 97       	sbiw	r28, 0x33	; 51
    43a2:	0f b6       	in	r0, 0x3f	; 63
    43a4:	f8 94       	cli
    43a6:	de bf       	out	0x3e, r29	; 62
    43a8:	0f be       	out	0x3f, r0	; 63
    43aa:	cd bf       	out	0x3d, r28	; 61
	u8 Master_username[20] = "MASTER";
    43ac:	ce 01       	movw	r24, r28
    43ae:	01 96       	adiw	r24, 0x01	; 1
    43b0:	9b a7       	std	Y+43, r25	; 0x2b
    43b2:	8a a7       	std	Y+42, r24	; 0x2a
    43b4:	aa ef       	ldi	r26, 0xFA	; 250
    43b6:	b1 e0       	ldi	r27, 0x01	; 1
    43b8:	bd a7       	std	Y+45, r27	; 0x2d
    43ba:	ac a7       	std	Y+44, r26	; 0x2c
    43bc:	b7 e0       	ldi	r27, 0x07	; 7
    43be:	be a7       	std	Y+46, r27	; 0x2e
    43c0:	ec a5       	ldd	r30, Y+44	; 0x2c
    43c2:	fd a5       	ldd	r31, Y+45	; 0x2d
    43c4:	00 80       	ld	r0, Z
    43c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    43c8:	9d a5       	ldd	r25, Y+45	; 0x2d
    43ca:	01 96       	adiw	r24, 0x01	; 1
    43cc:	9d a7       	std	Y+45, r25	; 0x2d
    43ce:	8c a7       	std	Y+44, r24	; 0x2c
    43d0:	aa a5       	ldd	r26, Y+42	; 0x2a
    43d2:	bb a5       	ldd	r27, Y+43	; 0x2b
    43d4:	0c 92       	st	X, r0
    43d6:	ea a5       	ldd	r30, Y+42	; 0x2a
    43d8:	fb a5       	ldd	r31, Y+43	; 0x2b
    43da:	31 96       	adiw	r30, 0x01	; 1
    43dc:	fb a7       	std	Y+43, r31	; 0x2b
    43de:	ea a7       	std	Y+42, r30	; 0x2a
    43e0:	fe a5       	ldd	r31, Y+46	; 0x2e
    43e2:	f1 50       	subi	r31, 0x01	; 1
    43e4:	fe a7       	std	Y+46, r31	; 0x2e
    43e6:	8e a5       	ldd	r24, Y+46	; 0x2e
    43e8:	88 23       	and	r24, r24
    43ea:	51 f7       	brne	.-44     	; 0x43c0 <psw_Check_If_Master+0x28>
    43ec:	8d e0       	ldi	r24, 0x0D	; 13
    43ee:	fe 01       	movw	r30, r28
    43f0:	38 96       	adiw	r30, 0x08	; 8
    43f2:	df 01       	movw	r26, r30
    43f4:	98 2f       	mov	r25, r24
    43f6:	1d 92       	st	X+, r1
    43f8:	9a 95       	dec	r25
    43fa:	e9 f7       	brne	.-6      	; 0x43f6 <psw_Check_If_Master+0x5e>
	u8 Master_password[20] = "MASTER";
    43fc:	de 01       	movw	r26, r28
    43fe:	55 96       	adiw	r26, 0x15	; 21
    4400:	b8 ab       	std	Y+48, r27	; 0x30
    4402:	af a7       	std	Y+47, r26	; 0x2f
    4404:	ea ef       	ldi	r30, 0xFA	; 250
    4406:	f1 e0       	ldi	r31, 0x01	; 1
    4408:	fa ab       	std	Y+50, r31	; 0x32
    440a:	e9 ab       	std	Y+49, r30	; 0x31
    440c:	f7 e0       	ldi	r31, 0x07	; 7
    440e:	fb ab       	std	Y+51, r31	; 0x33
    4410:	a9 a9       	ldd	r26, Y+49	; 0x31
    4412:	ba a9       	ldd	r27, Y+50	; 0x32
    4414:	0c 90       	ld	r0, X
    4416:	e9 a9       	ldd	r30, Y+49	; 0x31
    4418:	fa a9       	ldd	r31, Y+50	; 0x32
    441a:	31 96       	adiw	r30, 0x01	; 1
    441c:	fa ab       	std	Y+50, r31	; 0x32
    441e:	e9 ab       	std	Y+49, r30	; 0x31
    4420:	af a5       	ldd	r26, Y+47	; 0x2f
    4422:	b8 a9       	ldd	r27, Y+48	; 0x30
    4424:	0c 92       	st	X, r0
    4426:	ef a5       	ldd	r30, Y+47	; 0x2f
    4428:	f8 a9       	ldd	r31, Y+48	; 0x30
    442a:	31 96       	adiw	r30, 0x01	; 1
    442c:	f8 ab       	std	Y+48, r31	; 0x30
    442e:	ef a7       	std	Y+47, r30	; 0x2f
    4430:	fb a9       	ldd	r31, Y+51	; 0x33
    4432:	f1 50       	subi	r31, 0x01	; 1
    4434:	fb ab       	std	Y+51, r31	; 0x33
    4436:	8b a9       	ldd	r24, Y+51	; 0x33
    4438:	88 23       	and	r24, r24
    443a:	51 f7       	brne	.-44     	; 0x4410 <psw_Check_If_Master+0x78>
    443c:	8d e0       	ldi	r24, 0x0D	; 13
    443e:	fe 01       	movw	r30, r28
    4440:	7c 96       	adiw	r30, 0x1c	; 28
    4442:	df 01       	movw	r26, r30
    4444:	98 2f       	mov	r25, r24
    4446:	1d 92       	st	X+, r1
    4448:	9a 95       	dec	r25
    444a:	e9 f7       	brne	.-6      	; 0x4446 <psw_Check_If_Master+0xae>
	/* If username and password equals to master user and password, return 1 */
	if( (strcmp((char*)input_username_string, (char*)Master_username) == 0) && (strcmp((char*)input_psw_string, (char*)Master_password) == 0) ){
    444c:	89 e2       	ldi	r24, 0x29	; 41
    444e:	97 e0       	ldi	r25, 0x07	; 7
    4450:	9e 01       	movw	r18, r28
    4452:	2f 5f       	subi	r18, 0xFF	; 255
    4454:	3f 4f       	sbci	r19, 0xFF	; 255
    4456:	b9 01       	movw	r22, r18
    4458:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    445c:	00 97       	sbiw	r24, 0x00	; 0
    445e:	69 f4       	brne	.+26     	; 0x447a <psw_Check_If_Master+0xe2>
    4460:	8e e3       	ldi	r24, 0x3E	; 62
    4462:	97 e0       	ldi	r25, 0x07	; 7
    4464:	9e 01       	movw	r18, r28
    4466:	2b 5e       	subi	r18, 0xEB	; 235
    4468:	3f 4f       	sbci	r19, 0xFF	; 255
    446a:	b9 01       	movw	r22, r18
    446c:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    4470:	00 97       	sbiw	r24, 0x00	; 0
    4472:	19 f4       	brne	.+6      	; 0x447a <psw_Check_If_Master+0xe2>
		return master_data;
    4474:	a2 e0       	ldi	r26, 0x02	; 2
    4476:	a9 a7       	std	Y+41, r26	; 0x29
    4478:	01 c0       	rjmp	.+2      	; 0x447c <psw_Check_If_Master+0xe4>
	}
	/* If username and password are not for master user, return 0 */
	return wrong_data;
    447a:	19 a6       	std	Y+41, r1	; 0x29
    447c:	89 a5       	ldd	r24, Y+41	; 0x29
}
    447e:	e3 96       	adiw	r28, 0x33	; 51
    4480:	0f b6       	in	r0, 0x3f	; 63
    4482:	f8 94       	cli
    4484:	de bf       	out	0x3e, r29	; 62
    4486:	0f be       	out	0x3f, r0	; 63
    4488:	cd bf       	out	0x3d, r28	; 61
    448a:	cf 91       	pop	r28
    448c:	df 91       	pop	r29
    448e:	08 95       	ret

00004490 <psw_theft_protection>:

/**
 * This function activate theft protection system
 * It enables an alarm siren for 10 seconds and display remaining time
 */
void psw_theft_protection(void){
    4490:	df 93       	push	r29
    4492:	cf 93       	push	r28
    4494:	cd b7       	in	r28, 0x3d	; 61
    4496:	de b7       	in	r29, 0x3e	; 62
    4498:	aa 97       	sbiw	r28, 0x2a	; 42
    449a:	0f b6       	in	r0, 0x3f	; 63
    449c:	f8 94       	cli
    449e:	de bf       	out	0x3e, r29	; 62
    44a0:	0f be       	out	0x3f, r0	; 63
    44a2:	cd bf       	out	0x3d, r28	; 61

	/* Enable timer 2 */
	TMR_vStartTimer(&TIMER2);
    44a4:	85 ef       	ldi	r24, 0xF5	; 245
    44a6:	96 e0       	ldi	r25, 0x06	; 6
    44a8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <TMR_vStartTimer>
	timer2_flag = FLAG_OFF;
    44ac:	10 92 fa 06 	sts	0x06FA, r1
    44b0:	6a c1       	rjmp	.+724    	; 0x4786 <psw_theft_protection+0x2f6>
	/* While loop until flag is off */
	while(timer2_flag == FLAG_OFF){
	DIO_vSetPinDir(PORTB,PIN3,OUTPUT);
    44b2:	81 e0       	ldi	r24, 0x01	; 1
    44b4:	63 e0       	ldi	r22, 0x03	; 3
    44b6:	41 e0       	ldi	r20, 0x01	; 1
    44b8:	0e 94 9e 14 	call	0x293c	; 0x293c <DIO_vSetPinDir>
			DIO_vSetPinValue(PORTB,PIN3,HIGH);
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	63 e0       	ldi	r22, 0x03	; 3
    44c0:	41 e0       	ldi	r20, 0x01	; 1
    44c2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
    44c6:	80 e0       	ldi	r24, 0x00	; 0
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	aa e7       	ldi	r26, 0x7A	; 122
    44cc:	b3 e4       	ldi	r27, 0x43	; 67
    44ce:	8f a3       	std	Y+39, r24	; 0x27
    44d0:	98 a7       	std	Y+40, r25	; 0x28
    44d2:	a9 a7       	std	Y+41, r26	; 0x29
    44d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44d6:	6f a1       	ldd	r22, Y+39	; 0x27
    44d8:	78 a5       	ldd	r23, Y+40	; 0x28
    44da:	89 a5       	ldd	r24, Y+41	; 0x29
    44dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	4a ef       	ldi	r20, 0xFA	; 250
    44e4:	54 e4       	ldi	r21, 0x44	; 68
    44e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ea:	dc 01       	movw	r26, r24
    44ec:	cb 01       	movw	r24, r22
    44ee:	8b a3       	std	Y+35, r24	; 0x23
    44f0:	9c a3       	std	Y+36, r25	; 0x24
    44f2:	ad a3       	std	Y+37, r26	; 0x25
    44f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44f6:	6b a1       	ldd	r22, Y+35	; 0x23
    44f8:	7c a1       	ldd	r23, Y+36	; 0x24
    44fa:	8d a1       	ldd	r24, Y+37	; 0x25
    44fc:	9e a1       	ldd	r25, Y+38	; 0x26
    44fe:	20 e0       	ldi	r18, 0x00	; 0
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	40 e8       	ldi	r20, 0x80	; 128
    4504:	5f e3       	ldi	r21, 0x3F	; 63
    4506:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    450a:	88 23       	and	r24, r24
    450c:	2c f4       	brge	.+10     	; 0x4518 <psw_theft_protection+0x88>
		__ticks = 1;
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	9a a3       	std	Y+34, r25	; 0x22
    4514:	89 a3       	std	Y+33, r24	; 0x21
    4516:	3f c0       	rjmp	.+126    	; 0x4596 <psw_theft_protection+0x106>
	else if (__tmp > 65535)
    4518:	6b a1       	ldd	r22, Y+35	; 0x23
    451a:	7c a1       	ldd	r23, Y+36	; 0x24
    451c:	8d a1       	ldd	r24, Y+37	; 0x25
    451e:	9e a1       	ldd	r25, Y+38	; 0x26
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	3f ef       	ldi	r19, 0xFF	; 255
    4524:	4f e7       	ldi	r20, 0x7F	; 127
    4526:	57 e4       	ldi	r21, 0x47	; 71
    4528:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    452c:	18 16       	cp	r1, r24
    452e:	4c f5       	brge	.+82     	; 0x4582 <psw_theft_protection+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4530:	6f a1       	ldd	r22, Y+39	; 0x27
    4532:	78 a5       	ldd	r23, Y+40	; 0x28
    4534:	89 a5       	ldd	r24, Y+41	; 0x29
    4536:	9a a5       	ldd	r25, Y+42	; 0x2a
    4538:	20 e0       	ldi	r18, 0x00	; 0
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	40 e2       	ldi	r20, 0x20	; 32
    453e:	51 e4       	ldi	r21, 0x41	; 65
    4540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	bc 01       	movw	r22, r24
    454a:	cd 01       	movw	r24, r26
    454c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4550:	dc 01       	movw	r26, r24
    4552:	cb 01       	movw	r24, r22
    4554:	9a a3       	std	Y+34, r25	; 0x22
    4556:	89 a3       	std	Y+33, r24	; 0x21
    4558:	0f c0       	rjmp	.+30     	; 0x4578 <psw_theft_protection+0xe8>
    455a:	88 ec       	ldi	r24, 0xC8	; 200
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	98 a3       	std	Y+32, r25	; 0x20
    4560:	8f 8f       	std	Y+31, r24	; 0x1f
    4562:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4564:	98 a1       	ldd	r25, Y+32	; 0x20
    4566:	01 97       	sbiw	r24, 0x01	; 1
    4568:	f1 f7       	brne	.-4      	; 0x4566 <psw_theft_protection+0xd6>
    456a:	98 a3       	std	Y+32, r25	; 0x20
    456c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    456e:	89 a1       	ldd	r24, Y+33	; 0x21
    4570:	9a a1       	ldd	r25, Y+34	; 0x22
    4572:	01 97       	sbiw	r24, 0x01	; 1
    4574:	9a a3       	std	Y+34, r25	; 0x22
    4576:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4578:	89 a1       	ldd	r24, Y+33	; 0x21
    457a:	9a a1       	ldd	r25, Y+34	; 0x22
    457c:	00 97       	sbiw	r24, 0x00	; 0
    457e:	69 f7       	brne	.-38     	; 0x455a <psw_theft_protection+0xca>
    4580:	14 c0       	rjmp	.+40     	; 0x45aa <psw_theft_protection+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4582:	6b a1       	ldd	r22, Y+35	; 0x23
    4584:	7c a1       	ldd	r23, Y+36	; 0x24
    4586:	8d a1       	ldd	r24, Y+37	; 0x25
    4588:	9e a1       	ldd	r25, Y+38	; 0x26
    458a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    458e:	dc 01       	movw	r26, r24
    4590:	cb 01       	movw	r24, r22
    4592:	9a a3       	std	Y+34, r25	; 0x22
    4594:	89 a3       	std	Y+33, r24	; 0x21
    4596:	89 a1       	ldd	r24, Y+33	; 0x21
    4598:	9a a1       	ldd	r25, Y+34	; 0x22
    459a:	9e 8f       	std	Y+30, r25	; 0x1e
    459c:	8d 8f       	std	Y+29, r24	; 0x1d
    459e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45a2:	01 97       	sbiw	r24, 0x01	; 1
    45a4:	f1 f7       	brne	.-4      	; 0x45a2 <psw_theft_protection+0x112>
    45a6:	9e 8f       	std	Y+30, r25	; 0x1e
    45a8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);
		DIO_vSetPinValue(PORTB,PIN3,LOW);
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	63 e0       	ldi	r22, 0x03	; 3
    45ae:	40 e0       	ldi	r20, 0x00	; 0
    45b0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
    45b4:	80 e0       	ldi	r24, 0x00	; 0
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	aa e7       	ldi	r26, 0x7A	; 122
    45ba:	b3 e4       	ldi	r27, 0x43	; 67
    45bc:	89 8f       	std	Y+25, r24	; 0x19
    45be:	9a 8f       	std	Y+26, r25	; 0x1a
    45c0:	ab 8f       	std	Y+27, r26	; 0x1b
    45c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c4:	69 8d       	ldd	r22, Y+25	; 0x19
    45c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	4a ef       	ldi	r20, 0xFA	; 250
    45d2:	54 e4       	ldi	r21, 0x44	; 68
    45d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
    45dc:	8d 8b       	std	Y+21, r24	; 0x15
    45de:	9e 8b       	std	Y+22, r25	; 0x16
    45e0:	af 8b       	std	Y+23, r26	; 0x17
    45e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45e4:	6d 89       	ldd	r22, Y+21	; 0x15
    45e6:	7e 89       	ldd	r23, Y+22	; 0x16
    45e8:	8f 89       	ldd	r24, Y+23	; 0x17
    45ea:	98 8d       	ldd	r25, Y+24	; 0x18
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	40 e8       	ldi	r20, 0x80	; 128
    45f2:	5f e3       	ldi	r21, 0x3F	; 63
    45f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45f8:	88 23       	and	r24, r24
    45fa:	2c f4       	brge	.+10     	; 0x4606 <psw_theft_protection+0x176>
		__ticks = 1;
    45fc:	81 e0       	ldi	r24, 0x01	; 1
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	9c 8b       	std	Y+20, r25	; 0x14
    4602:	8b 8b       	std	Y+19, r24	; 0x13
    4604:	3f c0       	rjmp	.+126    	; 0x4684 <psw_theft_protection+0x1f4>
	else if (__tmp > 65535)
    4606:	6d 89       	ldd	r22, Y+21	; 0x15
    4608:	7e 89       	ldd	r23, Y+22	; 0x16
    460a:	8f 89       	ldd	r24, Y+23	; 0x17
    460c:	98 8d       	ldd	r25, Y+24	; 0x18
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	3f ef       	ldi	r19, 0xFF	; 255
    4612:	4f e7       	ldi	r20, 0x7F	; 127
    4614:	57 e4       	ldi	r21, 0x47	; 71
    4616:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    461a:	18 16       	cp	r1, r24
    461c:	4c f5       	brge	.+82     	; 0x4670 <psw_theft_protection+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    461e:	69 8d       	ldd	r22, Y+25	; 0x19
    4620:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4622:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4624:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	40 e2       	ldi	r20, 0x20	; 32
    462c:	51 e4       	ldi	r21, 0x41	; 65
    462e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4632:	dc 01       	movw	r26, r24
    4634:	cb 01       	movw	r24, r22
    4636:	bc 01       	movw	r22, r24
    4638:	cd 01       	movw	r24, r26
    463a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	9c 8b       	std	Y+20, r25	; 0x14
    4644:	8b 8b       	std	Y+19, r24	; 0x13
    4646:	0f c0       	rjmp	.+30     	; 0x4666 <psw_theft_protection+0x1d6>
    4648:	88 ec       	ldi	r24, 0xC8	; 200
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	9a 8b       	std	Y+18, r25	; 0x12
    464e:	89 8b       	std	Y+17, r24	; 0x11
    4650:	89 89       	ldd	r24, Y+17	; 0x11
    4652:	9a 89       	ldd	r25, Y+18	; 0x12
    4654:	01 97       	sbiw	r24, 0x01	; 1
    4656:	f1 f7       	brne	.-4      	; 0x4654 <psw_theft_protection+0x1c4>
    4658:	9a 8b       	std	Y+18, r25	; 0x12
    465a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465c:	8b 89       	ldd	r24, Y+19	; 0x13
    465e:	9c 89       	ldd	r25, Y+20	; 0x14
    4660:	01 97       	sbiw	r24, 0x01	; 1
    4662:	9c 8b       	std	Y+20, r25	; 0x14
    4664:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4666:	8b 89       	ldd	r24, Y+19	; 0x13
    4668:	9c 89       	ldd	r25, Y+20	; 0x14
    466a:	00 97       	sbiw	r24, 0x00	; 0
    466c:	69 f7       	brne	.-38     	; 0x4648 <psw_theft_protection+0x1b8>
    466e:	14 c0       	rjmp	.+40     	; 0x4698 <psw_theft_protection+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4670:	6d 89       	ldd	r22, Y+21	; 0x15
    4672:	7e 89       	ldd	r23, Y+22	; 0x16
    4674:	8f 89       	ldd	r24, Y+23	; 0x17
    4676:	98 8d       	ldd	r25, Y+24	; 0x18
    4678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	9c 8b       	std	Y+20, r25	; 0x14
    4682:	8b 8b       	std	Y+19, r24	; 0x13
    4684:	8b 89       	ldd	r24, Y+19	; 0x13
    4686:	9c 89       	ldd	r25, Y+20	; 0x14
    4688:	98 8b       	std	Y+16, r25	; 0x10
    468a:	8f 87       	std	Y+15, r24	; 0x0f
    468c:	8f 85       	ldd	r24, Y+15	; 0x0f
    468e:	98 89       	ldd	r25, Y+16	; 0x10
    4690:	01 97       	sbiw	r24, 0x01	; 1
    4692:	f1 f7       	brne	.-4      	; 0x4690 <psw_theft_protection+0x200>
    4694:	98 8b       	std	Y+16, r25	; 0x10
    4696:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		DIO_vSetPinValue(PORTB,PIN3,HIGH);
    4698:	81 e0       	ldi	r24, 0x01	; 1
    469a:	63 e0       	ldi	r22, 0x03	; 3
    469c:	41 e0       	ldi	r20, 0x01	; 1
    469e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
    46a2:	80 e0       	ldi	r24, 0x00	; 0
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	aa e7       	ldi	r26, 0x7A	; 122
    46a8:	b4 e4       	ldi	r27, 0x44	; 68
    46aa:	8b 87       	std	Y+11, r24	; 0x0b
    46ac:	9c 87       	std	Y+12, r25	; 0x0c
    46ae:	ad 87       	std	Y+13, r26	; 0x0d
    46b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    46b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    46b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    46b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	4a ef       	ldi	r20, 0xFA	; 250
    46c0:	54 e4       	ldi	r21, 0x44	; 68
    46c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c6:	dc 01       	movw	r26, r24
    46c8:	cb 01       	movw	r24, r22
    46ca:	8f 83       	std	Y+7, r24	; 0x07
    46cc:	98 87       	std	Y+8, r25	; 0x08
    46ce:	a9 87       	std	Y+9, r26	; 0x09
    46d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46d2:	6f 81       	ldd	r22, Y+7	; 0x07
    46d4:	78 85       	ldd	r23, Y+8	; 0x08
    46d6:	89 85       	ldd	r24, Y+9	; 0x09
    46d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    46da:	20 e0       	ldi	r18, 0x00	; 0
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	40 e8       	ldi	r20, 0x80	; 128
    46e0:	5f e3       	ldi	r21, 0x3F	; 63
    46e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46e6:	88 23       	and	r24, r24
    46e8:	2c f4       	brge	.+10     	; 0x46f4 <psw_theft_protection+0x264>
		__ticks = 1;
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	9e 83       	std	Y+6, r25	; 0x06
    46f0:	8d 83       	std	Y+5, r24	; 0x05
    46f2:	3f c0       	rjmp	.+126    	; 0x4772 <psw_theft_protection+0x2e2>
	else if (__tmp > 65535)
    46f4:	6f 81       	ldd	r22, Y+7	; 0x07
    46f6:	78 85       	ldd	r23, Y+8	; 0x08
    46f8:	89 85       	ldd	r24, Y+9	; 0x09
    46fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	3f ef       	ldi	r19, 0xFF	; 255
    4700:	4f e7       	ldi	r20, 0x7F	; 127
    4702:	57 e4       	ldi	r21, 0x47	; 71
    4704:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4708:	18 16       	cp	r1, r24
    470a:	4c f5       	brge	.+82     	; 0x475e <psw_theft_protection+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    470c:	6b 85       	ldd	r22, Y+11	; 0x0b
    470e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4710:	8d 85       	ldd	r24, Y+13	; 0x0d
    4712:	9e 85       	ldd	r25, Y+14	; 0x0e
    4714:	20 e0       	ldi	r18, 0x00	; 0
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	40 e2       	ldi	r20, 0x20	; 32
    471a:	51 e4       	ldi	r21, 0x41	; 65
    471c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4720:	dc 01       	movw	r26, r24
    4722:	cb 01       	movw	r24, r22
    4724:	bc 01       	movw	r22, r24
    4726:	cd 01       	movw	r24, r26
    4728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    472c:	dc 01       	movw	r26, r24
    472e:	cb 01       	movw	r24, r22
    4730:	9e 83       	std	Y+6, r25	; 0x06
    4732:	8d 83       	std	Y+5, r24	; 0x05
    4734:	0f c0       	rjmp	.+30     	; 0x4754 <psw_theft_protection+0x2c4>
    4736:	88 ec       	ldi	r24, 0xC8	; 200
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	9c 83       	std	Y+4, r25	; 0x04
    473c:	8b 83       	std	Y+3, r24	; 0x03
    473e:	8b 81       	ldd	r24, Y+3	; 0x03
    4740:	9c 81       	ldd	r25, Y+4	; 0x04
    4742:	01 97       	sbiw	r24, 0x01	; 1
    4744:	f1 f7       	brne	.-4      	; 0x4742 <psw_theft_protection+0x2b2>
    4746:	9c 83       	std	Y+4, r25	; 0x04
    4748:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    474a:	8d 81       	ldd	r24, Y+5	; 0x05
    474c:	9e 81       	ldd	r25, Y+6	; 0x06
    474e:	01 97       	sbiw	r24, 0x01	; 1
    4750:	9e 83       	std	Y+6, r25	; 0x06
    4752:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4754:	8d 81       	ldd	r24, Y+5	; 0x05
    4756:	9e 81       	ldd	r25, Y+6	; 0x06
    4758:	00 97       	sbiw	r24, 0x00	; 0
    475a:	69 f7       	brne	.-38     	; 0x4736 <psw_theft_protection+0x2a6>
    475c:	14 c0       	rjmp	.+40     	; 0x4786 <psw_theft_protection+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475e:	6f 81       	ldd	r22, Y+7	; 0x07
    4760:	78 85       	ldd	r23, Y+8	; 0x08
    4762:	89 85       	ldd	r24, Y+9	; 0x09
    4764:	9a 85       	ldd	r25, Y+10	; 0x0a
    4766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	9e 83       	std	Y+6, r25	; 0x06
    4770:	8d 83       	std	Y+5, r24	; 0x05
    4772:	8d 81       	ldd	r24, Y+5	; 0x05
    4774:	9e 81       	ldd	r25, Y+6	; 0x06
    4776:	9a 83       	std	Y+2, r25	; 0x02
    4778:	89 83       	std	Y+1, r24	; 0x01
    477a:	89 81       	ldd	r24, Y+1	; 0x01
    477c:	9a 81       	ldd	r25, Y+2	; 0x02
    477e:	01 97       	sbiw	r24, 0x01	; 1
    4780:	f1 f7       	brne	.-4      	; 0x477e <psw_theft_protection+0x2ee>
    4782:	9a 83       	std	Y+2, r25	; 0x02
    4784:	89 83       	std	Y+1, r24	; 0x01

	/* Enable timer 2 */
	TMR_vStartTimer(&TIMER2);
	timer2_flag = FLAG_OFF;
	/* While loop until flag is off */
	while(timer2_flag == FLAG_OFF){
    4786:	80 91 fa 06 	lds	r24, 0x06FA
    478a:	88 23       	and	r24, r24
    478c:	09 f4       	brne	.+2      	; 0x4790 <psw_theft_protection+0x300>
    478e:	91 ce       	rjmp	.-734    	; 0x44b2 <psw_theft_protection+0x22>
		_delay_ms(250);
		DIO_vSetPinValue(PORTB,PIN3,HIGH);

		_delay_ms(1000);
	}
	TMR_vStop(&TIMER2);
    4790:	85 ef       	ldi	r24, 0xF5	; 245
    4792:	96 e0       	ldi	r25, 0x06	; 6
    4794:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TMR_vStop>
}
    4798:	aa 96       	adiw	r28, 0x2a	; 42
    479a:	0f b6       	in	r0, 0x3f	; 63
    479c:	f8 94       	cli
    479e:	de bf       	out	0x3e, r29	; 62
    47a0:	0f be       	out	0x3f, r0	; 63
    47a2:	cd bf       	out	0x3d, r28	; 61
    47a4:	cf 91       	pop	r28
    47a6:	df 91       	pop	r29
    47a8:	08 95       	ret

000047aa <psw_check_If_Normal>:
/*
 * This function checks if username and password are for normal user or not
 * returns 1 if the inputs are identical to a normal user login credentials
 * returns 0 if the inputs are not identical to a normal user login credentials
 */
static u8 psw_check_If_Normal(){
    47aa:	df 93       	push	r29
    47ac:	cf 93       	push	r28
    47ae:	0f 92       	push	r0
    47b0:	cd b7       	in	r28, 0x3d	; 61
    47b2:	de b7       	in	r29, 0x3e	; 62
	if(strcmp((char*)(USER_ONE.userName), (char*)input_username_string) == 0){
    47b4:	8b e3       	ldi	r24, 0x3B	; 59
    47b6:	96 e0       	ldi	r25, 0x06	; 6
    47b8:	29 e2       	ldi	r18, 0x29	; 41
    47ba:	37 e0       	ldi	r19, 0x07	; 7
    47bc:	b9 01       	movw	r22, r18
    47be:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    47c2:	00 97       	sbiw	r24, 0x00	; 0
    47c4:	69 f4       	brne	.+26     	; 0x47e0 <psw_check_If_Normal+0x36>
		if(strcmp((char*)(USER_ONE.userPass), (char*)input_psw_string) == 0){
    47c6:	85 e4       	ldi	r24, 0x45	; 69
    47c8:	96 e0       	ldi	r25, 0x06	; 6
    47ca:	2e e3       	ldi	r18, 0x3E	; 62
    47cc:	37 e0       	ldi	r19, 0x07	; 7
    47ce:	b9 01       	movw	r22, r18
    47d0:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    47d4:	00 97       	sbiw	r24, 0x00	; 0
    47d6:	09 f0       	breq	.+2      	; 0x47da <psw_check_If_Normal+0x30>
    47d8:	58 c0       	rjmp	.+176    	; 0x488a <psw_check_If_Normal+0xe0>
			return correct_data;
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	89 83       	std	Y+1, r24	; 0x01
    47de:	56 c0       	rjmp	.+172    	; 0x488c <psw_check_If_Normal+0xe2>
		}
	}
	else if(strcmp((char*)(USER_TWO.userName), (char*)input_username_string) == 0){
    47e0:	84 e5       	ldi	r24, 0x54	; 84
    47e2:	96 e0       	ldi	r25, 0x06	; 6
    47e4:	29 e2       	ldi	r18, 0x29	; 41
    47e6:	37 e0       	ldi	r19, 0x07	; 7
    47e8:	b9 01       	movw	r22, r18
    47ea:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    47ee:	00 97       	sbiw	r24, 0x00	; 0
    47f0:	69 f4       	brne	.+26     	; 0x480c <psw_check_If_Normal+0x62>
		if(strcmp((char*)(USER_TWO.userPass), (char*)input_psw_string) == 0){
    47f2:	8e e5       	ldi	r24, 0x5E	; 94
    47f4:	96 e0       	ldi	r25, 0x06	; 6
    47f6:	2e e3       	ldi	r18, 0x3E	; 62
    47f8:	37 e0       	ldi	r19, 0x07	; 7
    47fa:	b9 01       	movw	r22, r18
    47fc:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    4800:	00 97       	sbiw	r24, 0x00	; 0
    4802:	09 f0       	breq	.+2      	; 0x4806 <psw_check_If_Normal+0x5c>
    4804:	42 c0       	rjmp	.+132    	; 0x488a <psw_check_If_Normal+0xe0>
			return correct_data;
    4806:	81 e0       	ldi	r24, 0x01	; 1
    4808:	89 83       	std	Y+1, r24	; 0x01
    480a:	40 c0       	rjmp	.+128    	; 0x488c <psw_check_If_Normal+0xe2>
		}
	}
	else if(strcmp((char*)(USER_THREE.userName), (char*)input_username_string) == 0){
    480c:	8d e6       	ldi	r24, 0x6D	; 109
    480e:	96 e0       	ldi	r25, 0x06	; 6
    4810:	29 e2       	ldi	r18, 0x29	; 41
    4812:	37 e0       	ldi	r19, 0x07	; 7
    4814:	b9 01       	movw	r22, r18
    4816:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    481a:	00 97       	sbiw	r24, 0x00	; 0
    481c:	61 f4       	brne	.+24     	; 0x4836 <psw_check_If_Normal+0x8c>
		if(strcmp((char*)(USER_THREE.userPass), (char*)input_psw_string) == 0){
    481e:	87 e7       	ldi	r24, 0x77	; 119
    4820:	96 e0       	ldi	r25, 0x06	; 6
    4822:	2e e3       	ldi	r18, 0x3E	; 62
    4824:	37 e0       	ldi	r19, 0x07	; 7
    4826:	b9 01       	movw	r22, r18
    4828:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    482c:	00 97       	sbiw	r24, 0x00	; 0
    482e:	69 f5       	brne	.+90     	; 0x488a <psw_check_If_Normal+0xe0>
			return correct_data;
    4830:	81 e0       	ldi	r24, 0x01	; 1
    4832:	89 83       	std	Y+1, r24	; 0x01
    4834:	2b c0       	rjmp	.+86     	; 0x488c <psw_check_If_Normal+0xe2>
		}
	}
	else if(strcmp((char*)(USER_FOUR.userName), (char*)input_username_string) == 0){
    4836:	86 e8       	ldi	r24, 0x86	; 134
    4838:	96 e0       	ldi	r25, 0x06	; 6
    483a:	29 e2       	ldi	r18, 0x29	; 41
    483c:	37 e0       	ldi	r19, 0x07	; 7
    483e:	b9 01       	movw	r22, r18
    4840:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    4844:	00 97       	sbiw	r24, 0x00	; 0
    4846:	61 f4       	brne	.+24     	; 0x4860 <psw_check_If_Normal+0xb6>
		if(strcmp((char*)(USER_FOUR.userPass), (char*)input_psw_string) == 0){
    4848:	80 e9       	ldi	r24, 0x90	; 144
    484a:	96 e0       	ldi	r25, 0x06	; 6
    484c:	2e e3       	ldi	r18, 0x3E	; 62
    484e:	37 e0       	ldi	r19, 0x07	; 7
    4850:	b9 01       	movw	r22, r18
    4852:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    4856:	00 97       	sbiw	r24, 0x00	; 0
    4858:	c1 f4       	brne	.+48     	; 0x488a <psw_check_If_Normal+0xe0>
			return correct_data;
    485a:	81 e0       	ldi	r24, 0x01	; 1
    485c:	89 83       	std	Y+1, r24	; 0x01
    485e:	16 c0       	rjmp	.+44     	; 0x488c <psw_check_If_Normal+0xe2>
		}
	}
	else if(strcmp((char*)(USER_FIVE.userName), (char*)input_username_string) == 0){
    4860:	8f e9       	ldi	r24, 0x9F	; 159
    4862:	96 e0       	ldi	r25, 0x06	; 6
    4864:	29 e2       	ldi	r18, 0x29	; 41
    4866:	37 e0       	ldi	r19, 0x07	; 7
    4868:	b9 01       	movw	r22, r18
    486a:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    486e:	00 97       	sbiw	r24, 0x00	; 0
    4870:	61 f4       	brne	.+24     	; 0x488a <psw_check_If_Normal+0xe0>
		if(strcmp((char*)(USER_FIVE.userPass), (char*)input_psw_string) == 0){
    4872:	89 ea       	ldi	r24, 0xA9	; 169
    4874:	96 e0       	ldi	r25, 0x06	; 6
    4876:	2e e3       	ldi	r18, 0x3E	; 62
    4878:	37 e0       	ldi	r19, 0x07	; 7
    487a:	b9 01       	movw	r22, r18
    487c:	0e 94 8d 29 	call	0x531a	; 0x531a <strcmp>
    4880:	00 97       	sbiw	r24, 0x00	; 0
    4882:	19 f4       	brne	.+6      	; 0x488a <psw_check_If_Normal+0xe0>
			return correct_data;
    4884:	81 e0       	ldi	r24, 0x01	; 1
    4886:	89 83       	std	Y+1, r24	; 0x01
    4888:	01 c0       	rjmp	.+2      	; 0x488c <psw_check_If_Normal+0xe2>
		}
	}
	else{ /* Do Nothing */ }
	return wrong_data;
    488a:	19 82       	std	Y+1, r1	; 0x01
    488c:	89 81       	ldd	r24, Y+1	; 0x01
}
    488e:	0f 90       	pop	r0
    4890:	cf 91       	pop	r28
    4892:	df 91       	pop	r29
    4894:	08 95       	ret

00004896 <setCommand>:
u8 logoutStr[] = "logout";
EN_COMMAND_MODES userCommand = IDLE_COMMAND;


EN_COMMAND_MODES setCommand(void)
{ 	//u8 i = 0;
    4896:	df 93       	push	r29
    4898:	cf 93       	push	r28
    489a:	cd b7       	in	r28, 0x3d	; 61
    489c:	de b7       	in	r29, 0x3e	; 62
    489e:	2b 97       	sbiw	r28, 0x0b	; 11
    48a0:	0f b6       	in	r0, 0x3f	; 63
    48a2:	f8 94       	cli
    48a4:	de bf       	out	0x3e, r29	; 62
    48a6:	0f be       	out	0x3f, r0	; 63
    48a8:	cd bf       	out	0x3d, r28	; 61
	EN_COMMAND_MODES ret = WRONG_COMMAND;
    48aa:	86 e0       	ldi	r24, 0x06	; 6
    48ac:	8b 87       	std	Y+11, r24	; 0x0b

	if(ret == WRONG_COMMAND)
    48ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    48b0:	86 30       	cpi	r24, 0x06	; 6
    48b2:	29 f5       	brne	.+74     	; 0x48fe <setCommand+0x68>
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    48b4:	1a 86       	std	Y+10, r1	; 0x0a
    48b6:	19 86       	std	Y+9, r1	; 0x09
    48b8:	19 c0       	rjmp	.+50     	; 0x48ec <setCommand+0x56>
		{
			if(temparrcommand[i] == ledOnStr[i])
    48ba:	89 85       	ldd	r24, Y+9	; 0x09
    48bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    48be:	fc 01       	movw	r30, r24
    48c0:	ec 5e       	subi	r30, 0xEC	; 236
    48c2:	f8 4f       	sbci	r31, 0xF8	; 248
    48c4:	20 81       	ld	r18, Z
    48c6:	89 85       	ldd	r24, Y+9	; 0x09
    48c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    48ca:	fc 01       	movw	r30, r24
    48cc:	e3 54       	subi	r30, 0x43	; 67
    48ce:	f9 4f       	sbci	r31, 0xF9	; 249
    48d0:	80 81       	ld	r24, Z
    48d2:	28 17       	cp	r18, r24
    48d4:	41 f4       	brne	.+16     	; 0x48e6 <setCommand+0x50>
			{
				ret = LED_ON;
    48d6:	81 e0       	ldi	r24, 0x01	; 1
    48d8:	8b 87       	std	Y+11, r24	; 0x0b
{ 	//u8 i = 0;
	EN_COMMAND_MODES ret = WRONG_COMMAND;

	if(ret == WRONG_COMMAND)
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    48da:	89 85       	ldd	r24, Y+9	; 0x09
    48dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    48de:	01 96       	adiw	r24, 0x01	; 1
    48e0:	9a 87       	std	Y+10, r25	; 0x0a
    48e2:	89 87       	std	Y+9, r24	; 0x09
    48e4:	03 c0       	rjmp	.+6      	; 0x48ec <setCommand+0x56>
			{
				ret = LED_ON;
			}
			else
			{
				ret = WRONG_COMMAND;
    48e6:	86 e0       	ldi	r24, 0x06	; 6
    48e8:	8b 87       	std	Y+11, r24	; 0x0b
    48ea:	09 c0       	rjmp	.+18     	; 0x48fe <setCommand+0x68>
{ 	//u8 i = 0;
	EN_COMMAND_MODES ret = WRONG_COMMAND;

	if(ret == WRONG_COMMAND)
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    48ec:	89 85       	ldd	r24, Y+9	; 0x09
    48ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    48f0:	01 96       	adiw	r24, 0x01	; 1
    48f2:	fc 01       	movw	r30, r24
    48f4:	ec 5e       	subi	r30, 0xEC	; 236
    48f6:	f8 4f       	sbci	r31, 0xF8	; 248
    48f8:	80 81       	ld	r24, Z
    48fa:	88 23       	and	r24, r24
    48fc:	f1 f6       	brne	.-68     	; 0x48ba <setCommand+0x24>
				ret = WRONG_COMMAND;
				break;
			}
		}
	}
	if(ret == WRONG_COMMAND)
    48fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4900:	86 30       	cpi	r24, 0x06	; 6
    4902:	29 f5       	brne	.+74     	; 0x494e <setCommand+0xb8>
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    4904:	18 86       	std	Y+8, r1	; 0x08
    4906:	1f 82       	std	Y+7, r1	; 0x07
    4908:	19 c0       	rjmp	.+50     	; 0x493c <setCommand+0xa6>
		{
			if(temparrcommand[i] == ledOffStr[i])
    490a:	8f 81       	ldd	r24, Y+7	; 0x07
    490c:	98 85       	ldd	r25, Y+8	; 0x08
    490e:	fc 01       	movw	r30, r24
    4910:	ec 5e       	subi	r30, 0xEC	; 236
    4912:	f8 4f       	sbci	r31, 0xF8	; 248
    4914:	20 81       	ld	r18, Z
    4916:	8f 81       	ldd	r24, Y+7	; 0x07
    4918:	98 85       	ldd	r25, Y+8	; 0x08
    491a:	fc 01       	movw	r30, r24
    491c:	ec 53       	subi	r30, 0x3C	; 60
    491e:	f9 4f       	sbci	r31, 0xF9	; 249
    4920:	80 81       	ld	r24, Z
    4922:	28 17       	cp	r18, r24
    4924:	41 f4       	brne	.+16     	; 0x4936 <setCommand+0xa0>
			{
				ret = LED_OFF;
    4926:	82 e0       	ldi	r24, 0x02	; 2
    4928:	8b 87       	std	Y+11, r24	; 0x0b
			}
		}
	}
	if(ret == WRONG_COMMAND)
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    492a:	8f 81       	ldd	r24, Y+7	; 0x07
    492c:	98 85       	ldd	r25, Y+8	; 0x08
    492e:	01 96       	adiw	r24, 0x01	; 1
    4930:	98 87       	std	Y+8, r25	; 0x08
    4932:	8f 83       	std	Y+7, r24	; 0x07
    4934:	03 c0       	rjmp	.+6      	; 0x493c <setCommand+0xa6>
			{
				ret = LED_OFF;
			}
			else
			{
				ret = WRONG_COMMAND;
    4936:	86 e0       	ldi	r24, 0x06	; 6
    4938:	8b 87       	std	Y+11, r24	; 0x0b
    493a:	09 c0       	rjmp	.+18     	; 0x494e <setCommand+0xb8>
			}
		}
	}
	if(ret == WRONG_COMMAND)
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    493c:	8f 81       	ldd	r24, Y+7	; 0x07
    493e:	98 85       	ldd	r25, Y+8	; 0x08
    4940:	01 96       	adiw	r24, 0x01	; 1
    4942:	fc 01       	movw	r30, r24
    4944:	ec 5e       	subi	r30, 0xEC	; 236
    4946:	f8 4f       	sbci	r31, 0xF8	; 248
    4948:	80 81       	ld	r24, Z
    494a:	88 23       	and	r24, r24
    494c:	f1 f6       	brne	.-68     	; 0x490a <setCommand+0x74>
				ret = WRONG_COMMAND;
				break;
			}
		}
	}
	if(ret == WRONG_COMMAND)
    494e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4950:	86 30       	cpi	r24, 0x06	; 6
    4952:	29 f5       	brne	.+74     	; 0x499e <setCommand+0x108>
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    4954:	1e 82       	std	Y+6, r1	; 0x06
    4956:	1d 82       	std	Y+5, r1	; 0x05
    4958:	19 c0       	rjmp	.+50     	; 0x498c <setCommand+0xf6>
		{
			if(temparrcommand[i] == doorOpenStr[i])
    495a:	8d 81       	ldd	r24, Y+5	; 0x05
    495c:	9e 81       	ldd	r25, Y+6	; 0x06
    495e:	fc 01       	movw	r30, r24
    4960:	ec 5e       	subi	r30, 0xEC	; 236
    4962:	f8 4f       	sbci	r31, 0xF8	; 248
    4964:	20 81       	ld	r18, Z
    4966:	8d 81       	ldd	r24, Y+5	; 0x05
    4968:	9e 81       	ldd	r25, Y+6	; 0x06
    496a:	fc 01       	movw	r30, r24
    496c:	e4 53       	subi	r30, 0x34	; 52
    496e:	f9 4f       	sbci	r31, 0xF9	; 249
    4970:	80 81       	ld	r24, Z
    4972:	28 17       	cp	r18, r24
    4974:	41 f4       	brne	.+16     	; 0x4986 <setCommand+0xf0>
			{
				ret = DOOR_OPEN;
    4976:	83 e0       	ldi	r24, 0x03	; 3
    4978:	8b 87       	std	Y+11, r24	; 0x0b
			}
		}
	}
	if(ret == WRONG_COMMAND)
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    497a:	8d 81       	ldd	r24, Y+5	; 0x05
    497c:	9e 81       	ldd	r25, Y+6	; 0x06
    497e:	01 96       	adiw	r24, 0x01	; 1
    4980:	9e 83       	std	Y+6, r25	; 0x06
    4982:	8d 83       	std	Y+5, r24	; 0x05
    4984:	03 c0       	rjmp	.+6      	; 0x498c <setCommand+0xf6>
			{
				ret = DOOR_OPEN;
			}
			else
			{
				ret = WRONG_COMMAND;
    4986:	86 e0       	ldi	r24, 0x06	; 6
    4988:	8b 87       	std	Y+11, r24	; 0x0b
    498a:	09 c0       	rjmp	.+18     	; 0x499e <setCommand+0x108>
			}
		}
	}
	if(ret == WRONG_COMMAND)
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    498c:	8d 81       	ldd	r24, Y+5	; 0x05
    498e:	9e 81       	ldd	r25, Y+6	; 0x06
    4990:	01 96       	adiw	r24, 0x01	; 1
    4992:	fc 01       	movw	r30, r24
    4994:	ec 5e       	subi	r30, 0xEC	; 236
    4996:	f8 4f       	sbci	r31, 0xF8	; 248
    4998:	80 81       	ld	r24, Z
    499a:	88 23       	and	r24, r24
    499c:	f1 f6       	brne	.-68     	; 0x495a <setCommand+0xc4>
				ret = WRONG_COMMAND;
				break;
			}
		}
	}
	if(ret == WRONG_COMMAND)
    499e:	8b 85       	ldd	r24, Y+11	; 0x0b
    49a0:	86 30       	cpi	r24, 0x06	; 6
    49a2:	29 f5       	brne	.+74     	; 0x49ee <setCommand+0x158>
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    49a4:	1c 82       	std	Y+4, r1	; 0x04
    49a6:	1b 82       	std	Y+3, r1	; 0x03
    49a8:	19 c0       	rjmp	.+50     	; 0x49dc <setCommand+0x146>
		{
			if(temparrcommand[i] == doorCloseStr[i])
    49aa:	8b 81       	ldd	r24, Y+3	; 0x03
    49ac:	9c 81       	ldd	r25, Y+4	; 0x04
    49ae:	fc 01       	movw	r30, r24
    49b0:	ec 5e       	subi	r30, 0xEC	; 236
    49b2:	f8 4f       	sbci	r31, 0xF8	; 248
    49b4:	20 81       	ld	r18, Z
    49b6:	8b 81       	ldd	r24, Y+3	; 0x03
    49b8:	9c 81       	ldd	r25, Y+4	; 0x04
    49ba:	fc 01       	movw	r30, r24
    49bc:	ea 52       	subi	r30, 0x2A	; 42
    49be:	f9 4f       	sbci	r31, 0xF9	; 249
    49c0:	80 81       	ld	r24, Z
    49c2:	28 17       	cp	r18, r24
    49c4:	41 f4       	brne	.+16     	; 0x49d6 <setCommand+0x140>
			{
				ret = DOOR_CLOSE;
    49c6:	84 e0       	ldi	r24, 0x04	; 4
    49c8:	8b 87       	std	Y+11, r24	; 0x0b
			}
		}
	}
	if(ret == WRONG_COMMAND)
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    49ca:	8b 81       	ldd	r24, Y+3	; 0x03
    49cc:	9c 81       	ldd	r25, Y+4	; 0x04
    49ce:	01 96       	adiw	r24, 0x01	; 1
    49d0:	9c 83       	std	Y+4, r25	; 0x04
    49d2:	8b 83       	std	Y+3, r24	; 0x03
    49d4:	03 c0       	rjmp	.+6      	; 0x49dc <setCommand+0x146>
			{
				ret = DOOR_CLOSE;
			}
			else
			{
				ret = WRONG_COMMAND;
    49d6:	86 e0       	ldi	r24, 0x06	; 6
    49d8:	8b 87       	std	Y+11, r24	; 0x0b
    49da:	09 c0       	rjmp	.+18     	; 0x49ee <setCommand+0x158>
			}
		}
	}
	if(ret == WRONG_COMMAND)
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    49dc:	8b 81       	ldd	r24, Y+3	; 0x03
    49de:	9c 81       	ldd	r25, Y+4	; 0x04
    49e0:	01 96       	adiw	r24, 0x01	; 1
    49e2:	fc 01       	movw	r30, r24
    49e4:	ec 5e       	subi	r30, 0xEC	; 236
    49e6:	f8 4f       	sbci	r31, 0xF8	; 248
    49e8:	80 81       	ld	r24, Z
    49ea:	88 23       	and	r24, r24
    49ec:	f1 f6       	brne	.-68     	; 0x49aa <setCommand+0x114>
				ret = WRONG_COMMAND;
				break;
			}
		}
	}
	if(ret == WRONG_COMMAND)
    49ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    49f0:	86 30       	cpi	r24, 0x06	; 6
    49f2:	29 f5       	brne	.+74     	; 0x4a3e <setCommand+0x1a8>
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    49f4:	1a 82       	std	Y+2, r1	; 0x02
    49f6:	19 82       	std	Y+1, r1	; 0x01
    49f8:	19 c0       	rjmp	.+50     	; 0x4a2c <setCommand+0x196>
		{
			if(temparrcommand[i] == logoutStr[i])
    49fa:	89 81       	ldd	r24, Y+1	; 0x01
    49fc:	9a 81       	ldd	r25, Y+2	; 0x02
    49fe:	fc 01       	movw	r30, r24
    4a00:	ec 5e       	subi	r30, 0xEC	; 236
    4a02:	f8 4f       	sbci	r31, 0xF8	; 248
    4a04:	20 81       	ld	r18, Z
    4a06:	89 81       	ldd	r24, Y+1	; 0x01
    4a08:	9a 81       	ldd	r25, Y+2	; 0x02
    4a0a:	fc 01       	movw	r30, r24
    4a0c:	ef 51       	subi	r30, 0x1F	; 31
    4a0e:	f9 4f       	sbci	r31, 0xF9	; 249
    4a10:	80 81       	ld	r24, Z
    4a12:	28 17       	cp	r18, r24
    4a14:	41 f4       	brne	.+16     	; 0x4a26 <setCommand+0x190>
			{
				ret = LOGOUT;
    4a16:	85 e0       	ldi	r24, 0x05	; 5
    4a18:	8b 87       	std	Y+11, r24	; 0x0b
			}
		}
	}
	if(ret == WRONG_COMMAND)
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    4a1a:	89 81       	ldd	r24, Y+1	; 0x01
    4a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a1e:	01 96       	adiw	r24, 0x01	; 1
    4a20:	9a 83       	std	Y+2, r25	; 0x02
    4a22:	89 83       	std	Y+1, r24	; 0x01
    4a24:	03 c0       	rjmp	.+6      	; 0x4a2c <setCommand+0x196>
			{
				ret = LOGOUT;
			}
			else
			{
				ret = WRONG_COMMAND;
    4a26:	86 e0       	ldi	r24, 0x06	; 6
    4a28:	8b 87       	std	Y+11, r24	; 0x0b
    4a2a:	09 c0       	rjmp	.+18     	; 0x4a3e <setCommand+0x1a8>
			}
		}
	}
	if(ret == WRONG_COMMAND)
	{
		for(int i =0;temparrcommand[i+1]!='\0';i++)
    4a2c:	89 81       	ldd	r24, Y+1	; 0x01
    4a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a30:	01 96       	adiw	r24, 0x01	; 1
    4a32:	fc 01       	movw	r30, r24
    4a34:	ec 5e       	subi	r30, 0xEC	; 236
    4a36:	f8 4f       	sbci	r31, 0xF8	; 248
    4a38:	80 81       	ld	r24, Z
    4a3a:	88 23       	and	r24, r24
    4a3c:	f1 f6       	brne	.-68     	; 0x49fa <setCommand+0x164>
				break;
			}
		}
	}

	return ret;
    4a3e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    4a40:	2b 96       	adiw	r28, 0x0b	; 11
    4a42:	0f b6       	in	r0, 0x3f	; 63
    4a44:	f8 94       	cli
    4a46:	de bf       	out	0x3e, r29	; 62
    4a48:	0f be       	out	0x3f, r0	; 63
    4a4a:	cd bf       	out	0x3d, r28	; 61
    4a4c:	cf 91       	pop	r28
    4a4e:	df 91       	pop	r29
    4a50:	08 95       	ret

00004a52 <getCommand>:

void getCommand(void)
{
    4a52:	df 93       	push	r29
    4a54:	cf 93       	push	r28
    4a56:	00 d0       	rcall	.+0      	; 0x4a58 <getCommand+0x6>
    4a58:	cd b7       	in	r28, 0x3d	; 61
    4a5a:	de b7       	in	r29, 0x3e	; 62
	u8 tempChar,arrIndex = ZERO_INDEX;
    4a5c:	19 82       	std	Y+1, r1	; 0x01
    4a5e:	1b c0       	rjmp	.+54     	; 0x4a96 <getCommand+0x44>
	while(tempChar != '\r'){
		tempChar = Bluetooth_u8ReceiveData();
    4a60:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <Bluetooth_u8ReceiveData>
    4a64:	8a 83       	std	Y+2, r24	; 0x02
		Bluetooth_vSendData(tempChar);
    4a66:	8a 81       	ldd	r24, Y+2	; 0x02
    4a68:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>
		if(ARR_MAX_SIZE != arrIndex+1){
    4a6c:	89 81       	ldd	r24, Y+1	; 0x01
    4a6e:	83 31       	cpi	r24, 0x13	; 19
    4a70:	59 f0       	breq	.+22     	; 0x4a88 <getCommand+0x36>
			arrcommand[arrIndex] = tempChar;
    4a72:	89 81       	ldd	r24, Y+1	; 0x01
    4a74:	88 2f       	mov	r24, r24
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	fc 01       	movw	r30, r24
    4a7a:	e0 50       	subi	r30, 0x00	; 0
    4a7c:	f9 4f       	sbci	r31, 0xF9	; 249
    4a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a80:	80 83       	st	Z, r24
			arrIndex++;
    4a82:	89 81       	ldd	r24, Y+1	; 0x01
    4a84:	8f 5f       	subi	r24, 0xFF	; 255
    4a86:	89 83       	std	Y+1, r24	; 0x01
		}
		arrcommand[arrIndex] = '\0';
    4a88:	89 81       	ldd	r24, Y+1	; 0x01
    4a8a:	88 2f       	mov	r24, r24
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	fc 01       	movw	r30, r24
    4a90:	e0 50       	subi	r30, 0x00	; 0
    4a92:	f9 4f       	sbci	r31, 0xF9	; 249
    4a94:	10 82       	st	Z, r1
}

void getCommand(void)
{
	u8 tempChar,arrIndex = ZERO_INDEX;
	while(tempChar != '\r'){
    4a96:	8a 81       	ldd	r24, Y+2	; 0x02
    4a98:	8d 30       	cpi	r24, 0x0D	; 13
    4a9a:	11 f7       	brne	.-60     	; 0x4a60 <getCommand+0xe>
			arrcommand[arrIndex] = tempChar;
			arrIndex++;
		}
		arrcommand[arrIndex] = '\0';
	}
	strcpy((char *)temparrcommand,(char *)arrcommand);
    4a9c:	84 e1       	ldi	r24, 0x14	; 20
    4a9e:	97 e0       	ldi	r25, 0x07	; 7
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	37 e0       	ldi	r19, 0x07	; 7
    4aa4:	b9 01       	movw	r22, r18
    4aa6:	0e 94 96 29 	call	0x532c	; 0x532c <strcpy>
	arrIndex = ZERO_INDEX;
    4aaa:	19 82       	std	Y+1, r1	; 0x01
	tempChar = ZERO_INDEX;
    4aac:	1a 82       	std	Y+2, r1	; 0x02
	Bluetooth_vSendString((u8*)"\r\n");
    4aae:	8e e0       	ldi	r24, 0x0E	; 14
    4ab0:	92 e0       	ldi	r25, 0x02	; 2
    4ab2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	userCommand = setCommand();
    4ab6:	0e 94 4b 24 	call	0x4896	; 0x4896 <setCommand>
    4aba:	80 93 fe 06 	sts	0x06FE, r24
}
    4abe:	0f 90       	pop	r0
    4ac0:	0f 90       	pop	r0
    4ac2:	cf 91       	pop	r28
    4ac4:	df 91       	pop	r29
    4ac6:	08 95       	ret

00004ac8 <normalUserInterface>:



u8 normalUserInterface(void)
{
    4ac8:	df 93       	push	r29
    4aca:	cf 93       	push	r28
    4acc:	00 d0       	rcall	.+0      	; 0x4ace <normalUserInterface+0x6>
    4ace:	cd b7       	in	r28, 0x3d	; 61
    4ad0:	de b7       	in	r29, 0x3e	; 62
	Bluetooth_vSendString((u8 *)"WelCome In User Mode \r\n\n");
    4ad2:	81 e1       	ldi	r24, 0x11	; 17
    4ad4:	92 e0       	ldi	r25, 0x02	; 2
    4ad6:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	while(1)
	{
		Bluetooth_vSendString((u8 *)"1 - led on \r\n");
    4ada:	8a e2       	ldi	r24, 0x2A	; 42
    4adc:	92 e0       	ldi	r25, 0x02	; 2
    4ade:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		Bluetooth_vSendString((u8 *)"2 - led off \r\n");
    4ae2:	88 e3       	ldi	r24, 0x38	; 56
    4ae4:	92 e0       	ldi	r25, 0x02	; 2
    4ae6:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		Bluetooth_vSendString((u8 *)"3 - door open \r\n");
    4aea:	87 e4       	ldi	r24, 0x47	; 71
    4aec:	92 e0       	ldi	r25, 0x02	; 2
    4aee:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		Bluetooth_vSendString((u8 *)"4 - door close \r\n");
    4af2:	88 e5       	ldi	r24, 0x58	; 88
    4af4:	92 e0       	ldi	r25, 0x02	; 2
    4af6:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		Bluetooth_vSendString((u8 *)"5 - logout \r\n");
    4afa:	8a e6       	ldi	r24, 0x6A	; 106
    4afc:	92 e0       	ldi	r25, 0x02	; 2
    4afe:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
		getCommand();
    4b02:	0e 94 29 25 	call	0x4a52	; 0x4a52 <getCommand>
		switch(userCommand)
    4b06:	80 91 fe 06 	lds	r24, 0x06FE
    4b0a:	28 2f       	mov	r18, r24
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	3a 83       	std	Y+2, r19	; 0x02
    4b10:	29 83       	std	Y+1, r18	; 0x01
    4b12:	89 81       	ldd	r24, Y+1	; 0x01
    4b14:	9a 81       	ldd	r25, Y+2	; 0x02
    4b16:	83 30       	cpi	r24, 0x03	; 3
    4b18:	91 05       	cpc	r25, r1
    4b1a:	09 f4       	brne	.+2      	; 0x4b1e <normalUserInterface+0x56>
    4b1c:	73 c0       	rjmp	.+230    	; 0x4c04 <normalUserInterface+0x13c>
    4b1e:	29 81       	ldd	r18, Y+1	; 0x01
    4b20:	3a 81       	ldd	r19, Y+2	; 0x02
    4b22:	24 30       	cpi	r18, 0x04	; 4
    4b24:	31 05       	cpc	r19, r1
    4b26:	5c f4       	brge	.+22     	; 0x4b3e <normalUserInterface+0x76>
    4b28:	89 81       	ldd	r24, Y+1	; 0x01
    4b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b2c:	81 30       	cpi	r24, 0x01	; 1
    4b2e:	91 05       	cpc	r25, r1
    4b30:	c9 f0       	breq	.+50     	; 0x4b64 <normalUserInterface+0x9c>
    4b32:	29 81       	ldd	r18, Y+1	; 0x01
    4b34:	3a 81       	ldd	r19, Y+2	; 0x02
    4b36:	22 30       	cpi	r18, 0x02	; 2
    4b38:	31 05       	cpc	r19, r1
    4b3a:	e4 f5       	brge	.+120    	; 0x4bb4 <normalUserInterface+0xec>
    4b3c:	ce cf       	rjmp	.-100    	; 0x4ada <normalUserInterface+0x12>
    4b3e:	89 81       	ldd	r24, Y+1	; 0x01
    4b40:	9a 81       	ldd	r25, Y+2	; 0x02
    4b42:	85 30       	cpi	r24, 0x05	; 5
    4b44:	91 05       	cpc	r25, r1
    4b46:	09 f4       	brne	.+2      	; 0x4b4a <normalUserInterface+0x82>
    4b48:	7d c0       	rjmp	.+250    	; 0x4c44 <normalUserInterface+0x17c>
    4b4a:	29 81       	ldd	r18, Y+1	; 0x01
    4b4c:	3a 81       	ldd	r19, Y+2	; 0x02
    4b4e:	25 30       	cpi	r18, 0x05	; 5
    4b50:	31 05       	cpc	r19, r1
    4b52:	0c f4       	brge	.+2      	; 0x4b56 <normalUserInterface+0x8e>
    4b54:	67 c0       	rjmp	.+206    	; 0x4c24 <normalUserInterface+0x15c>
    4b56:	89 81       	ldd	r24, Y+1	; 0x01
    4b58:	9a 81       	ldd	r25, Y+2	; 0x02
    4b5a:	86 30       	cpi	r24, 0x06	; 6
    4b5c:	91 05       	cpc	r25, r1
    4b5e:	09 f4       	brne	.+2      	; 0x4b62 <normalUserInterface+0x9a>
    4b60:	7d c0       	rjmp	.+250    	; 0x4c5c <normalUserInterface+0x194>
    4b62:	bb cf       	rjmp	.-138    	; 0x4ada <normalUserInterface+0x12>
			/*nothing*/
			break;
		}
		case LED_ON:
		{
			Bluetooth_vSendString((u8 *)"Turning Led On... \r\n");
    4b64:	88 e7       	ldi	r24, 0x78	; 120
    4b66:	92 e0       	ldi	r25, 0x02	; 2
    4b68:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			DIO_vSetGroupDir(PORTA,OUTPUT);
    4b6c:	80 e0       	ldi	r24, 0x00	; 0
    4b6e:	61 e0       	ldi	r22, 0x01	; 1
    4b70:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <DIO_vSetGroupDir>
			DIO_vSetPinValue(PORTA,PIN0,HIGH);
    4b74:	80 e0       	ldi	r24, 0x00	; 0
    4b76:	60 e0       	ldi	r22, 0x00	; 0
    4b78:	41 e0       	ldi	r20, 0x01	; 1
    4b7a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
			DIO_vSetPinValue(PORTA,PIN1,HIGH);
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
    4b80:	61 e0       	ldi	r22, 0x01	; 1
    4b82:	41 e0       	ldi	r20, 0x01	; 1
    4b84:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
			DIO_vSetPinValue(PORTA,PIN2,HIGH);
    4b88:	80 e0       	ldi	r24, 0x00	; 0
    4b8a:	62 e0       	ldi	r22, 0x02	; 2
    4b8c:	41 e0       	ldi	r20, 0x01	; 1
    4b8e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
			DIO_vSetPinValue(PORTA,PIN3,HIGH);
    4b92:	80 e0       	ldi	r24, 0x00	; 0
    4b94:	63 e0       	ldi	r22, 0x03	; 3
    4b96:	41 e0       	ldi	r20, 0x01	; 1
    4b98:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
			DIO_vSetPinValue(PORTA,PIN4,HIGH);
    4b9c:	80 e0       	ldi	r24, 0x00	; 0
    4b9e:	64 e0       	ldi	r22, 0x04	; 4
    4ba0:	41 e0       	ldi	r20, 0x01	; 1
    4ba2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
			Bluetooth_vSendString((u8 *)"All Led Turned On Successfully\r\n");
    4ba6:	8d e8       	ldi	r24, 0x8D	; 141
    4ba8:	92 e0       	ldi	r25, 0x02	; 2
    4baa:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			userCommand = IDLE_COMMAND;
    4bae:	10 92 fe 06 	sts	0x06FE, r1
    4bb2:	93 cf       	rjmp	.-218    	; 0x4ada <normalUserInterface+0x12>
			break;
		}
		case LED_OFF:
		{
			Bluetooth_vSendString((u8 *)"Turning Led Off... \r\n");
    4bb4:	8e ea       	ldi	r24, 0xAE	; 174
    4bb6:	92 e0       	ldi	r25, 0x02	; 2
    4bb8:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			DIO_vSetGroupDir(PORTA,OUTPUT);
    4bbc:	80 e0       	ldi	r24, 0x00	; 0
    4bbe:	61 e0       	ldi	r22, 0x01	; 1
    4bc0:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <DIO_vSetGroupDir>

			DIO_vSetPinValue(PORTA,PIN0,LOW);
    4bc4:	80 e0       	ldi	r24, 0x00	; 0
    4bc6:	60 e0       	ldi	r22, 0x00	; 0
    4bc8:	40 e0       	ldi	r20, 0x00	; 0
    4bca:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
			DIO_vSetPinValue(PORTA,PIN1,LOW);
    4bce:	80 e0       	ldi	r24, 0x00	; 0
    4bd0:	61 e0       	ldi	r22, 0x01	; 1
    4bd2:	40 e0       	ldi	r20, 0x00	; 0
    4bd4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
			DIO_vSetPinValue(PORTA,PIN2,LOW);
    4bd8:	80 e0       	ldi	r24, 0x00	; 0
    4bda:	62 e0       	ldi	r22, 0x02	; 2
    4bdc:	40 e0       	ldi	r20, 0x00	; 0
    4bde:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
			DIO_vSetPinValue(PORTA,PIN3,LOW);
    4be2:	80 e0       	ldi	r24, 0x00	; 0
    4be4:	63 e0       	ldi	r22, 0x03	; 3
    4be6:	40 e0       	ldi	r20, 0x00	; 0
    4be8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
			DIO_vSetPinValue(PORTA,PIN4,LOW);
    4bec:	80 e0       	ldi	r24, 0x00	; 0
    4bee:	64 e0       	ldi	r22, 0x04	; 4
    4bf0:	40 e0       	ldi	r20, 0x00	; 0
    4bf2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_vSetPinValue>
			Bluetooth_vSendString((u8 *)"All Led Turned Off Successfully\r\n");
    4bf6:	84 ec       	ldi	r24, 0xC4	; 196
    4bf8:	92 e0       	ldi	r25, 0x02	; 2
    4bfa:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			userCommand = IDLE_COMMAND;
    4bfe:	10 92 fe 06 	sts	0x06FE, r1
    4c02:	6b cf       	rjmp	.-298    	; 0x4ada <normalUserInterface+0x12>
			break;
		}
		case DOOR_OPEN:
		{
			Bluetooth_vSendString((u8 *)"Opening Door Lock... \r\n");
    4c04:	86 ee       	ldi	r24, 0xE6	; 230
    4c06:	92 e0       	ldi	r25, 0x02	; 2
    4c08:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			SERVO_vChangeDirection(&SERVO1, SERVO_180);
    4c0c:	88 ee       	ldi	r24, 0xE8	; 232
    4c0e:	96 e0       	ldi	r25, 0x06	; 6
    4c10:	62 e0       	ldi	r22, 0x02	; 2
    4c12:	0e 94 c3 1a 	call	0x3586	; 0x3586 <SERVO_vChangeDirection>
			Bluetooth_vSendString((u8 *)"Door Lock Opened Successfully... \r\n");
    4c16:	8e ef       	ldi	r24, 0xFE	; 254
    4c18:	92 e0       	ldi	r25, 0x02	; 2
    4c1a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			userCommand = IDLE_COMMAND;
    4c1e:	10 92 fe 06 	sts	0x06FE, r1
    4c22:	5b cf       	rjmp	.-330    	; 0x4ada <normalUserInterface+0x12>
			break;
		}
		case DOOR_CLOSE:
		{
			Bluetooth_vSendString((u8 *)"Close Door Lock... \r\n");
    4c24:	82 e2       	ldi	r24, 0x22	; 34
    4c26:	93 e0       	ldi	r25, 0x03	; 3
    4c28:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			SERVO_vChangeDirection(&SERVO1, SERVO_0);
    4c2c:	88 ee       	ldi	r24, 0xE8	; 232
    4c2e:	96 e0       	ldi	r25, 0x06	; 6
    4c30:	60 e0       	ldi	r22, 0x00	; 0
    4c32:	0e 94 c3 1a 	call	0x3586	; 0x3586 <SERVO_vChangeDirection>
			Bluetooth_vSendString((u8 *)"Door Lock Closed Successfully... \r\n");
    4c36:	88 e3       	ldi	r24, 0x38	; 56
    4c38:	93 e0       	ldi	r25, 0x03	; 3
    4c3a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			userCommand = IDLE_COMMAND;
    4c3e:	10 92 fe 06 	sts	0x06FE, r1
    4c42:	4b cf       	rjmp	.-362    	; 0x4ada <normalUserInterface+0x12>
			break;
		}
		case LOGOUT:
		{
			Bluetooth_vSendString((u8 *)"Logging Out...\r\n");
    4c44:	8c e5       	ldi	r24, 0x5C	; 92
    4c46:	93 e0       	ldi	r25, 0x03	; 3
    4c48:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			userCommand = IDLE_COMMAND;
    4c4c:	10 92 fe 06 	sts	0x06FE, r1
			return 0;
    4c50:	80 e0       	ldi	r24, 0x00	; 0
			userCommand = IDLE_COMMAND;
		}
		}

	}
}
    4c52:	0f 90       	pop	r0
    4c54:	0f 90       	pop	r0
    4c56:	cf 91       	pop	r28
    4c58:	df 91       	pop	r29
    4c5a:	08 95       	ret
			return 0;
			break;
		}
		case WRONG_COMMAND:
		{
			Bluetooth_vSendString((u8 *)"You Enter Invalid Command Please Try Again \r\n");
    4c5c:	8d e6       	ldi	r24, 0x6D	; 109
    4c5e:	93 e0       	ldi	r25, 0x03	; 3
    4c60:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			userCommand = IDLE_COMMAND;
    4c64:	10 92 fe 06 	sts	0x06FE, r1
    4c68:	38 cf       	rjmp	.-400    	; 0x4ada <normalUserInterface+0x12>

00004c6a <master_user_interface>:


extern ST_userData_t USER_ONE,USER_TWO,USER_THREE,USER_FOUR,USER_FIVE;

void master_user_interface()
{
    4c6a:	df 93       	push	r29
    4c6c:	cf 93       	push	r28
    4c6e:	cd b7       	in	r28, 0x3d	; 61
    4c70:	de b7       	in	r29, 0x3e	; 62
    4c72:	2d 97       	sbiw	r28, 0x0d	; 13
    4c74:	0f b6       	in	r0, 0x3f	; 63
    4c76:	f8 94       	cli
    4c78:	de bf       	out	0x3e, r29	; 62
    4c7a:	0f be       	out	0x3f, r0	; 63
    4c7c:	cd bf       	out	0x3d, r28	; 61
	Bluetooth_vSendString((u8 *)"\n\r===== Please Wait While Processing Your Data =====");
    4c7e:	8b e9       	ldi	r24, 0x9B	; 155
    4c80:	93 e0       	ldi	r25, 0x03	; 3
    4c82:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	databaseLoad();
    4c86:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <databaseLoad>
	u8 tempNumberOfRegistars;
	EEPROM_u8ReadByte(0xF8,&tempNumberOfRegistars,BLOCK1);
    4c8a:	9e 01       	movw	r18, r28
    4c8c:	2b 5f       	subi	r18, 0xFB	; 251
    4c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c90:	88 ef       	ldi	r24, 0xF8	; 248
    4c92:	b9 01       	movw	r22, r18
    4c94:	42 e0       	ldi	r20, 0x02	; 2
    4c96:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <EEPROM_u8ReadByte>
	if(tempNumberOfRegistars == 0xFF)
    4c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c9c:	8f 3f       	cpi	r24, 0xFF	; 255
    4c9e:	29 f4       	brne	.+10     	; 0x4caa <master_user_interface+0x40>
	{
		EEPROM_u8WriteByte(0xF8,0,BLOCK1);
    4ca0:	88 ef       	ldi	r24, 0xF8	; 248
    4ca2:	60 e0       	ldi	r22, 0x00	; 0
    4ca4:	42 e0       	ldi	r20, 0x02	; 2
    4ca6:	0e 94 2e 1b 	call	0x365c	; 0x365c <EEPROM_u8WriteByte>
	}
	u8 operation = '0';
    4caa:	80 e3       	ldi	r24, 0x30	; 48
    4cac:	8c 83       	std	Y+4, r24	; 0x04
	Bluetooth_vSendString((u8 *)"\n\r===== User Management System =====");
    4cae:	80 ed       	ldi	r24, 0xD0	; 208
    4cb0:	93 e0       	ldi	r25, 0x03	; 3
    4cb2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	Bluetooth_vSendString((u8 *)"\n\r===== Choose Operation =====");
    4cb6:	85 ef       	ldi	r24, 0xF5	; 245
    4cb8:	93 e0       	ldi	r25, 0x03	; 3
    4cba:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	Bluetooth_vSendString((u8 *)"\n\r1 - Add User ");
    4cbe:	84 e1       	ldi	r24, 0x14	; 20
    4cc0:	94 e0       	ldi	r25, 0x04	; 4
    4cc2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	Bluetooth_vSendString((u8 *)"\n\r2 - Edit User ");
    4cc6:	84 e2       	ldi	r24, 0x24	; 36
    4cc8:	94 e0       	ldi	r25, 0x04	; 4
    4cca:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	Bluetooth_vSendString((u8 *)"\n\r3 - Remove User ");
    4cce:	85 e3       	ldi	r24, 0x35	; 53
    4cd0:	94 e0       	ldi	r25, 0x04	; 4
    4cd2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	Bluetooth_vSendString((u8 *)"\n\r4 - Exit ");
    4cd6:	88 e4       	ldi	r24, 0x48	; 72
    4cd8:	94 e0       	ldi	r25, 0x04	; 4
    4cda:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	Bluetooth_vSendString((u8 *)"\n\rEnter Choice : ");
    4cde:	84 e5       	ldi	r24, 0x54	; 84
    4ce0:	94 e0       	ldi	r25, 0x04	; 4
    4ce2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	while(1)
	{
		operation = Bluetooth_u8ReceiveData();
    4ce6:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <Bluetooth_u8ReceiveData>
    4cea:	8c 83       	std	Y+4, r24	; 0x04
		Bluetooth_vClearBuffer();
    4cec:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Bluetooth_vClearBuffer>
		Bluetooth_vSendData(operation);
    4cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    4cf2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>
		switch(operation)
    4cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    4cf8:	28 2f       	mov	r18, r24
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
    4cfc:	3d 87       	std	Y+13, r19	; 0x0d
    4cfe:	2c 87       	std	Y+12, r18	; 0x0c
    4d00:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d02:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d04:	82 33       	cpi	r24, 0x32	; 50
    4d06:	91 05       	cpc	r25, r1
    4d08:	09 f4       	brne	.+2      	; 0x4d0c <master_user_interface+0xa2>
    4d0a:	81 c0       	rjmp	.+258    	; 0x4e0e <master_user_interface+0x1a4>
    4d0c:	2c 85       	ldd	r18, Y+12	; 0x0c
    4d0e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4d10:	23 33       	cpi	r18, 0x33	; 51
    4d12:	31 05       	cpc	r19, r1
    4d14:	34 f4       	brge	.+12     	; 0x4d22 <master_user_interface+0xb8>
    4d16:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d18:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d1a:	81 33       	cpi	r24, 0x31	; 49
    4d1c:	91 05       	cpc	r25, r1
    4d1e:	71 f0       	breq	.+28     	; 0x4d3c <master_user_interface+0xd2>
    4d20:	5b c1       	rjmp	.+694    	; 0x4fd8 <master_user_interface+0x36e>
    4d22:	2c 85       	ldd	r18, Y+12	; 0x0c
    4d24:	3d 85       	ldd	r19, Y+13	; 0x0d
    4d26:	23 33       	cpi	r18, 0x33	; 51
    4d28:	31 05       	cpc	r19, r1
    4d2a:	09 f4       	brne	.+2      	; 0x4d2e <master_user_interface+0xc4>
    4d2c:	db c0       	rjmp	.+438    	; 0x4ee4 <master_user_interface+0x27a>
    4d2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d30:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d32:	84 33       	cpi	r24, 0x34	; 52
    4d34:	91 05       	cpc	r25, r1
    4d36:	09 f4       	brne	.+2      	; 0x4d3a <master_user_interface+0xd0>
    4d38:	40 c1       	rjmp	.+640    	; 0x4fba <master_user_interface+0x350>
    4d3a:	4e c1       	rjmp	.+668    	; 0x4fd8 <master_user_interface+0x36e>
		{
		case '1' :
		{
			u8 user;
			UsersList();
    4d3c:	0e 94 68 20 	call	0x40d0	; 0x40d0 <UsersList>
			Bluetooth_vSendString((u8 *)"\n\rChoose Free User Slot : ");
    4d40:	86 e6       	ldi	r24, 0x66	; 102
    4d42:	94 e0       	ldi	r25, 0x04	; 4
    4d44:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			user = Bluetooth_u8ReceiveData();
    4d48:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <Bluetooth_u8ReceiveData>
    4d4c:	8b 83       	std	Y+3, r24	; 0x03
			Bluetooth_vSendData(user);
    4d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d50:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>
			Bluetooth_vClearBuffer();
    4d54:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Bluetooth_vClearBuffer>
			switch(user)
    4d58:	8b 81       	ldd	r24, Y+3	; 0x03
    4d5a:	28 2f       	mov	r18, r24
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	3b 87       	std	Y+11, r19	; 0x0b
    4d60:	2a 87       	std	Y+10, r18	; 0x0a
    4d62:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d64:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d66:	82 33       	cpi	r24, 0x32	; 50
    4d68:	91 05       	cpc	r25, r1
    4d6a:	29 f1       	breq	.+74     	; 0x4db6 <master_user_interface+0x14c>
    4d6c:	2a 85       	ldd	r18, Y+10	; 0x0a
    4d6e:	3b 85       	ldd	r19, Y+11	; 0x0b
    4d70:	23 33       	cpi	r18, 0x33	; 51
    4d72:	31 05       	cpc	r19, r1
    4d74:	5c f4       	brge	.+22     	; 0x4d8c <master_user_interface+0x122>
    4d76:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d78:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d7a:	80 33       	cpi	r24, 0x30	; 48
    4d7c:	91 05       	cpc	r25, r1
    4d7e:	89 f0       	breq	.+34     	; 0x4da2 <master_user_interface+0x138>
    4d80:	2a 85       	ldd	r18, Y+10	; 0x0a
    4d82:	3b 85       	ldd	r19, Y+11	; 0x0b
    4d84:	21 33       	cpi	r18, 0x31	; 49
    4d86:	31 05       	cpc	r19, r1
    4d88:	89 f0       	breq	.+34     	; 0x4dac <master_user_interface+0x142>
    4d8a:	24 c0       	rjmp	.+72     	; 0x4dd4 <master_user_interface+0x16a>
    4d8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d90:	83 33       	cpi	r24, 0x33	; 51
    4d92:	91 05       	cpc	r25, r1
    4d94:	a9 f0       	breq	.+42     	; 0x4dc0 <master_user_interface+0x156>
    4d96:	2a 85       	ldd	r18, Y+10	; 0x0a
    4d98:	3b 85       	ldd	r19, Y+11	; 0x0b
    4d9a:	24 33       	cpi	r18, 0x34	; 52
    4d9c:	31 05       	cpc	r19, r1
    4d9e:	a9 f0       	breq	.+42     	; 0x4dca <master_user_interface+0x160>
    4da0:	19 c0       	rjmp	.+50     	; 0x4dd4 <master_user_interface+0x16a>
			{
			case '0' : addNewUser(&USER_ONE); break;
    4da2:	86 e3       	ldi	r24, 0x36	; 54
    4da4:	96 e0       	ldi	r25, 0x06	; 6
    4da6:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <addNewUser>
    4daa:	18 c0       	rjmp	.+48     	; 0x4ddc <master_user_interface+0x172>
			case '1' : addNewUser(&USER_TWO); break;
    4dac:	8f e4       	ldi	r24, 0x4F	; 79
    4dae:	96 e0       	ldi	r25, 0x06	; 6
    4db0:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <addNewUser>
    4db4:	13 c0       	rjmp	.+38     	; 0x4ddc <master_user_interface+0x172>
			case '2' : addNewUser(&USER_THREE); break;
    4db6:	88 e6       	ldi	r24, 0x68	; 104
    4db8:	96 e0       	ldi	r25, 0x06	; 6
    4dba:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <addNewUser>
    4dbe:	0e c0       	rjmp	.+28     	; 0x4ddc <master_user_interface+0x172>
			case '3' : addNewUser(&USER_FOUR); break;
    4dc0:	81 e8       	ldi	r24, 0x81	; 129
    4dc2:	96 e0       	ldi	r25, 0x06	; 6
    4dc4:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <addNewUser>
    4dc8:	09 c0       	rjmp	.+18     	; 0x4ddc <master_user_interface+0x172>
			case '4' : addNewUser(&USER_FIVE); break;
    4dca:	8a e9       	ldi	r24, 0x9A	; 154
    4dcc:	96 e0       	ldi	r25, 0x06	; 6
    4dce:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <addNewUser>
    4dd2:	04 c0       	rjmp	.+8      	; 0x4ddc <master_user_interface+0x172>
/*			case '5' : addNewUser(&USER_SIX); break;
			case '6' : addNewUser(&USER_SEVEN); break;
			case '7' : addNewUser(&USER_EGIHT); break;
			case '8' : addNewUser(&USER_NINE); break;
			case '9' : addNewUser(&USER_TEN); break;*/
			default: Bluetooth_vSendString((u8 *)"\n\rWrong Entry!\n\r ");
    4dd4:	81 e8       	ldi	r24, 0x81	; 129
    4dd6:	94 e0       	ldi	r25, 0x04	; 4
    4dd8:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			}
			Bluetooth_vSendString((u8 *)"\n\r===== Choose Operation =====");
    4ddc:	85 ef       	ldi	r24, 0xF5	; 245
    4dde:	93 e0       	ldi	r25, 0x03	; 3
    4de0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r1 - Add User ");
    4de4:	84 e1       	ldi	r24, 0x14	; 20
    4de6:	94 e0       	ldi	r25, 0x04	; 4
    4de8:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r2 - Edit User ");
    4dec:	84 e2       	ldi	r24, 0x24	; 36
    4dee:	94 e0       	ldi	r25, 0x04	; 4
    4df0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r3 - Remove User ");
    4df4:	85 e3       	ldi	r24, 0x35	; 53
    4df6:	94 e0       	ldi	r25, 0x04	; 4
    4df8:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r4 - Exit ");
    4dfc:	88 e4       	ldi	r24, 0x48	; 72
    4dfe:	94 e0       	ldi	r25, 0x04	; 4
    4e00:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\rEnter Choice : ");
    4e04:	84 e5       	ldi	r24, 0x54	; 84
    4e06:	94 e0       	ldi	r25, 0x04	; 4
    4e08:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
    4e0c:	6c cf       	rjmp	.-296    	; 0x4ce6 <master_user_interface+0x7c>
			break;
		}
		case '2':
		{
			u8 user;
			UsersList();
    4e0e:	0e 94 68 20 	call	0x40d0	; 0x40d0 <UsersList>
			Bluetooth_vSendString((u8 *)"\n\rChoose User To Edit : ");
    4e12:	83 e9       	ldi	r24, 0x93	; 147
    4e14:	94 e0       	ldi	r25, 0x04	; 4
    4e16:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			user = Bluetooth_u8ReceiveData();
    4e1a:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <Bluetooth_u8ReceiveData>
    4e1e:	8a 83       	std	Y+2, r24	; 0x02
			Bluetooth_vSendData(user);
    4e20:	8a 81       	ldd	r24, Y+2	; 0x02
    4e22:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>
			Bluetooth_vClearBuffer();
    4e26:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Bluetooth_vClearBuffer>
			switch(user)
    4e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e2c:	28 2f       	mov	r18, r24
    4e2e:	30 e0       	ldi	r19, 0x00	; 0
    4e30:	39 87       	std	Y+9, r19	; 0x09
    4e32:	28 87       	std	Y+8, r18	; 0x08
    4e34:	88 85       	ldd	r24, Y+8	; 0x08
    4e36:	99 85       	ldd	r25, Y+9	; 0x09
    4e38:	82 33       	cpi	r24, 0x32	; 50
    4e3a:	91 05       	cpc	r25, r1
    4e3c:	29 f1       	breq	.+74     	; 0x4e88 <master_user_interface+0x21e>
    4e3e:	28 85       	ldd	r18, Y+8	; 0x08
    4e40:	39 85       	ldd	r19, Y+9	; 0x09
    4e42:	23 33       	cpi	r18, 0x33	; 51
    4e44:	31 05       	cpc	r19, r1
    4e46:	5c f4       	brge	.+22     	; 0x4e5e <master_user_interface+0x1f4>
    4e48:	88 85       	ldd	r24, Y+8	; 0x08
    4e4a:	99 85       	ldd	r25, Y+9	; 0x09
    4e4c:	80 33       	cpi	r24, 0x30	; 48
    4e4e:	91 05       	cpc	r25, r1
    4e50:	89 f0       	breq	.+34     	; 0x4e74 <master_user_interface+0x20a>
    4e52:	28 85       	ldd	r18, Y+8	; 0x08
    4e54:	39 85       	ldd	r19, Y+9	; 0x09
    4e56:	21 33       	cpi	r18, 0x31	; 49
    4e58:	31 05       	cpc	r19, r1
    4e5a:	89 f0       	breq	.+34     	; 0x4e7e <master_user_interface+0x214>
    4e5c:	24 c0       	rjmp	.+72     	; 0x4ea6 <master_user_interface+0x23c>
    4e5e:	88 85       	ldd	r24, Y+8	; 0x08
    4e60:	99 85       	ldd	r25, Y+9	; 0x09
    4e62:	83 33       	cpi	r24, 0x33	; 51
    4e64:	91 05       	cpc	r25, r1
    4e66:	a9 f0       	breq	.+42     	; 0x4e92 <master_user_interface+0x228>
    4e68:	28 85       	ldd	r18, Y+8	; 0x08
    4e6a:	39 85       	ldd	r19, Y+9	; 0x09
    4e6c:	24 33       	cpi	r18, 0x34	; 52
    4e6e:	31 05       	cpc	r19, r1
    4e70:	a9 f0       	breq	.+42     	; 0x4e9c <master_user_interface+0x232>
    4e72:	19 c0       	rjmp	.+50     	; 0x4ea6 <master_user_interface+0x23c>
			{
			case '0' : editUser(&USER_ONE); break;
    4e74:	86 e3       	ldi	r24, 0x36	; 54
    4e76:	96 e0       	ldi	r25, 0x06	; 6
    4e78:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <editUser>
    4e7c:	18 c0       	rjmp	.+48     	; 0x4eae <master_user_interface+0x244>
			case '1' : editUser(&USER_TWO); break;
    4e7e:	8f e4       	ldi	r24, 0x4F	; 79
    4e80:	96 e0       	ldi	r25, 0x06	; 6
    4e82:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <editUser>
    4e86:	13 c0       	rjmp	.+38     	; 0x4eae <master_user_interface+0x244>
			case '2' : editUser(&USER_THREE); break;
    4e88:	88 e6       	ldi	r24, 0x68	; 104
    4e8a:	96 e0       	ldi	r25, 0x06	; 6
    4e8c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <editUser>
    4e90:	0e c0       	rjmp	.+28     	; 0x4eae <master_user_interface+0x244>
			case '3' : editUser(&USER_FOUR);break;
    4e92:	81 e8       	ldi	r24, 0x81	; 129
    4e94:	96 e0       	ldi	r25, 0x06	; 6
    4e96:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <editUser>
    4e9a:	09 c0       	rjmp	.+18     	; 0x4eae <master_user_interface+0x244>
			case '4' : editUser(&USER_FIVE); break;
    4e9c:	8a e9       	ldi	r24, 0x9A	; 154
    4e9e:	96 e0       	ldi	r25, 0x06	; 6
    4ea0:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <editUser>
    4ea4:	04 c0       	rjmp	.+8      	; 0x4eae <master_user_interface+0x244>
/*			case '5' : editUser(&USER_SIX); break;
			case '6' : editUser(&USER_SEVEN); break;
			case '7' : editUser(&USER_EGIHT); break;
			case '8' : editUser(&USER_NINE); break;
			case '9' : editUser(&USER_TEN); break;*/
			default: Bluetooth_vSendString((u8 *)"\n\rWrong Entry!\n\r ");
    4ea6:	81 e8       	ldi	r24, 0x81	; 129
    4ea8:	94 e0       	ldi	r25, 0x04	; 4
    4eaa:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			}
			Bluetooth_vSendString((u8 *)"\n\r===== Choose Operation =====");
    4eae:	85 ef       	ldi	r24, 0xF5	; 245
    4eb0:	93 e0       	ldi	r25, 0x03	; 3
    4eb2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r1 - Add User ");
    4eb6:	84 e1       	ldi	r24, 0x14	; 20
    4eb8:	94 e0       	ldi	r25, 0x04	; 4
    4eba:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r2 - Edit User ");
    4ebe:	84 e2       	ldi	r24, 0x24	; 36
    4ec0:	94 e0       	ldi	r25, 0x04	; 4
    4ec2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r3 - Remove User ");
    4ec6:	85 e3       	ldi	r24, 0x35	; 53
    4ec8:	94 e0       	ldi	r25, 0x04	; 4
    4eca:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r4 - Exit ");
    4ece:	88 e4       	ldi	r24, 0x48	; 72
    4ed0:	94 e0       	ldi	r25, 0x04	; 4
    4ed2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\rEnter Choice : ");
    4ed6:	84 e5       	ldi	r24, 0x54	; 84
    4ed8:	94 e0       	ldi	r25, 0x04	; 4
    4eda:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vClearBuffer();
    4ede:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Bluetooth_vClearBuffer>
    4ee2:	01 cf       	rjmp	.-510    	; 0x4ce6 <master_user_interface+0x7c>
			break;
		}
		case '3':
		{
			u8 user;
			UsersList();
    4ee4:	0e 94 68 20 	call	0x40d0	; 0x40d0 <UsersList>
			Bluetooth_vSendString((u8 *)"\n\rChoose User To Remove : ");
    4ee8:	8c ea       	ldi	r24, 0xAC	; 172
    4eea:	94 e0       	ldi	r25, 0x04	; 4
    4eec:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>

			user = Bluetooth_u8ReceiveData();
    4ef0:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <Bluetooth_u8ReceiveData>
    4ef4:	89 83       	std	Y+1, r24	; 0x01
			Bluetooth_vClearBuffer();
    4ef6:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Bluetooth_vClearBuffer>
			Bluetooth_vSendData(user);
    4efa:	89 81       	ldd	r24, Y+1	; 0x01
    4efc:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>
			switch(user)
    4f00:	89 81       	ldd	r24, Y+1	; 0x01
    4f02:	28 2f       	mov	r18, r24
    4f04:	30 e0       	ldi	r19, 0x00	; 0
    4f06:	3f 83       	std	Y+7, r19	; 0x07
    4f08:	2e 83       	std	Y+6, r18	; 0x06
    4f0a:	8e 81       	ldd	r24, Y+6	; 0x06
    4f0c:	9f 81       	ldd	r25, Y+7	; 0x07
    4f0e:	82 33       	cpi	r24, 0x32	; 50
    4f10:	91 05       	cpc	r25, r1
    4f12:	29 f1       	breq	.+74     	; 0x4f5e <master_user_interface+0x2f4>
    4f14:	2e 81       	ldd	r18, Y+6	; 0x06
    4f16:	3f 81       	ldd	r19, Y+7	; 0x07
    4f18:	23 33       	cpi	r18, 0x33	; 51
    4f1a:	31 05       	cpc	r19, r1
    4f1c:	5c f4       	brge	.+22     	; 0x4f34 <master_user_interface+0x2ca>
    4f1e:	8e 81       	ldd	r24, Y+6	; 0x06
    4f20:	9f 81       	ldd	r25, Y+7	; 0x07
    4f22:	80 33       	cpi	r24, 0x30	; 48
    4f24:	91 05       	cpc	r25, r1
    4f26:	89 f0       	breq	.+34     	; 0x4f4a <master_user_interface+0x2e0>
    4f28:	2e 81       	ldd	r18, Y+6	; 0x06
    4f2a:	3f 81       	ldd	r19, Y+7	; 0x07
    4f2c:	21 33       	cpi	r18, 0x31	; 49
    4f2e:	31 05       	cpc	r19, r1
    4f30:	89 f0       	breq	.+34     	; 0x4f54 <master_user_interface+0x2ea>
    4f32:	24 c0       	rjmp	.+72     	; 0x4f7c <master_user_interface+0x312>
    4f34:	8e 81       	ldd	r24, Y+6	; 0x06
    4f36:	9f 81       	ldd	r25, Y+7	; 0x07
    4f38:	83 33       	cpi	r24, 0x33	; 51
    4f3a:	91 05       	cpc	r25, r1
    4f3c:	a9 f0       	breq	.+42     	; 0x4f68 <master_user_interface+0x2fe>
    4f3e:	2e 81       	ldd	r18, Y+6	; 0x06
    4f40:	3f 81       	ldd	r19, Y+7	; 0x07
    4f42:	24 33       	cpi	r18, 0x34	; 52
    4f44:	31 05       	cpc	r19, r1
    4f46:	a9 f0       	breq	.+42     	; 0x4f72 <master_user_interface+0x308>
    4f48:	19 c0       	rjmp	.+50     	; 0x4f7c <master_user_interface+0x312>
			{
			case '0' : removeUser(&USER_ONE); break;
    4f4a:	86 e3       	ldi	r24, 0x36	; 54
    4f4c:	96 e0       	ldi	r25, 0x06	; 6
    4f4e:	0e 94 ed 20 	call	0x41da	; 0x41da <removeUser>
    4f52:	18 c0       	rjmp	.+48     	; 0x4f84 <master_user_interface+0x31a>
			case '1' : removeUser(&USER_TWO); break;
    4f54:	8f e4       	ldi	r24, 0x4F	; 79
    4f56:	96 e0       	ldi	r25, 0x06	; 6
    4f58:	0e 94 ed 20 	call	0x41da	; 0x41da <removeUser>
    4f5c:	13 c0       	rjmp	.+38     	; 0x4f84 <master_user_interface+0x31a>
			case '2' : removeUser(&USER_THREE); break;
    4f5e:	88 e6       	ldi	r24, 0x68	; 104
    4f60:	96 e0       	ldi	r25, 0x06	; 6
    4f62:	0e 94 ed 20 	call	0x41da	; 0x41da <removeUser>
    4f66:	0e c0       	rjmp	.+28     	; 0x4f84 <master_user_interface+0x31a>
			case '3' : removeUser(&USER_FOUR);break;
    4f68:	81 e8       	ldi	r24, 0x81	; 129
    4f6a:	96 e0       	ldi	r25, 0x06	; 6
    4f6c:	0e 94 ed 20 	call	0x41da	; 0x41da <removeUser>
    4f70:	09 c0       	rjmp	.+18     	; 0x4f84 <master_user_interface+0x31a>
			case '4' : removeUser(&USER_FIVE); break;
    4f72:	8a e9       	ldi	r24, 0x9A	; 154
    4f74:	96 e0       	ldi	r25, 0x06	; 6
    4f76:	0e 94 ed 20 	call	0x41da	; 0x41da <removeUser>
    4f7a:	04 c0       	rjmp	.+8      	; 0x4f84 <master_user_interface+0x31a>
/*			case '5' : removeUser(&USER_SIX); break;
			case '6' : removeUser(&USER_SEVEN); break;
			case '7' : removeUser(&USER_EGIHT); break;
			case '8' : removeUser(&USER_NINE); break;
			case '9' : removeUser(&USER_TEN); break;*/
			default: Bluetooth_vSendString((u8 *)"\n\rWrong Entry!\n\r ");
    4f7c:	81 e8       	ldi	r24, 0x81	; 129
    4f7e:	94 e0       	ldi	r25, 0x04	; 4
    4f80:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			}
			Bluetooth_vSendString((u8 *)"\n\r===== Choose Operation =====");
    4f84:	85 ef       	ldi	r24, 0xF5	; 245
    4f86:	93 e0       	ldi	r25, 0x03	; 3
    4f88:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r1 - Add User ");
    4f8c:	84 e1       	ldi	r24, 0x14	; 20
    4f8e:	94 e0       	ldi	r25, 0x04	; 4
    4f90:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r2 - Edit User ");
    4f94:	84 e2       	ldi	r24, 0x24	; 36
    4f96:	94 e0       	ldi	r25, 0x04	; 4
    4f98:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r3 - Remove User ");
    4f9c:	85 e3       	ldi	r24, 0x35	; 53
    4f9e:	94 e0       	ldi	r25, 0x04	; 4
    4fa0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r4 - Exit ");
    4fa4:	88 e4       	ldi	r24, 0x48	; 72
    4fa6:	94 e0       	ldi	r25, 0x04	; 4
    4fa8:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\rEnter Choice : ");
    4fac:	84 e5       	ldi	r24, 0x54	; 84
    4fae:	94 e0       	ldi	r25, 0x04	; 4
    4fb0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vClearBuffer();
    4fb4:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Bluetooth_vClearBuffer>
    4fb8:	96 ce       	rjmp	.-724    	; 0x4ce6 <master_user_interface+0x7c>
			break;
		}
		case '4':
		{
			Bluetooth_vSendString((u8 *)"\n\r===== Please Wait While Saving Your Data =====\r\n\r\n");
    4fba:	87 ec       	ldi	r24, 0xC7	; 199
    4fbc:	94 e0       	ldi	r25, 0x04	; 4
    4fbe:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			databaseSave();
    4fc2:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <databaseSave>
			break;
		}
		}

	}
}
    4fc6:	2d 96       	adiw	r28, 0x0d	; 13
    4fc8:	0f b6       	in	r0, 0x3f	; 63
    4fca:	f8 94       	cli
    4fcc:	de bf       	out	0x3e, r29	; 62
    4fce:	0f be       	out	0x3f, r0	; 63
    4fd0:	cd bf       	out	0x3d, r28	; 61
    4fd2:	cf 91       	pop	r28
    4fd4:	df 91       	pop	r29
    4fd6:	08 95       	ret
			databaseSave();
			return;
		}
		default :
		{
			Bluetooth_vSendString((u8 *)"\n\rWrong Choice Try Again : ");
    4fd8:	8c ef       	ldi	r24, 0xFC	; 252
    4fda:	94 e0       	ldi	r25, 0x04	; 4
    4fdc:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r===== Choose Operation =====");
    4fe0:	85 ef       	ldi	r24, 0xF5	; 245
    4fe2:	93 e0       	ldi	r25, 0x03	; 3
    4fe4:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r1 - Add User ");
    4fe8:	84 e1       	ldi	r24, 0x14	; 20
    4fea:	94 e0       	ldi	r25, 0x04	; 4
    4fec:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r2 - Edit User ");
    4ff0:	84 e2       	ldi	r24, 0x24	; 36
    4ff2:	94 e0       	ldi	r25, 0x04	; 4
    4ff4:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r3 - Remove User ");
    4ff8:	85 e3       	ldi	r24, 0x35	; 53
    4ffa:	94 e0       	ldi	r25, 0x04	; 4
    4ffc:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\r4 - Exit ");
    5000:	88 e4       	ldi	r24, 0x48	; 72
    5002:	94 e0       	ldi	r25, 0x04	; 4
    5004:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vSendString((u8 *)"\n\rEnter Choice : ");
    5008:	84 e5       	ldi	r24, 0x54	; 84
    500a:	94 e0       	ldi	r25, 0x04	; 4
    500c:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
			Bluetooth_vClearBuffer();
    5010:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Bluetooth_vClearBuffer>
    5014:	68 ce       	rjmp	.-816    	; 0x4ce6 <master_user_interface+0x7c>

00005016 <app_vInit>:
	.TMR_ToggleMode = TMR_InterruptMode,
	.TMR_OCMode = OC_Disconnected,
	.TMR_Prescale = PRE_1024
}; // overflow time = 32.768ms

void app_vInit(void){
    5016:	df 93       	push	r29
    5018:	cf 93       	push	r28
    501a:	cd b7       	in	r28, 0x3d	; 61
    501c:	de b7       	in	r29, 0x3e	; 62
	// Initialize hardware components
	SERVO_vInit(&SERVO1);
    501e:	88 ee       	ldi	r24, 0xE8	; 232
    5020:	96 e0       	ldi	r25, 0x06	; 6
    5022:	0e 94 8b 1a 	call	0x3516	; 0x3516 <SERVO_vInit>
	SERVO_vStart(&SERVO1);
    5026:	88 ee       	ldi	r24, 0xE8	; 232
    5028:	96 e0       	ldi	r25, 0x06	; 6
    502a:	0e 94 05 1b 	call	0x360a	; 0x360a <SERVO_vStart>
	Bluetooth_vInit();
    502e:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <Bluetooth_vInit>
	EEPROM_vinit();
    5032:	0e 94 25 1b 	call	0x364a	; 0x364a <EEPROM_vinit>
	databaseLoad();
    5036:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <databaseLoad>
	TMR_vInit(&TIMER2);
    503a:	85 ef       	ldi	r24, 0xF5	; 245
    503c:	96 e0       	ldi	r25, 0x06	; 6
    503e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <TMR_vInit>
	Bluetooth_vEnable();
    5042:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <Bluetooth_vEnable>
	Current_State = locked_user_input;
    5046:	81 e0       	ldi	r24, 0x01	; 1
    5048:	80 93 3d 07 	sts	0x073D, r24

	// Initialize variables
}
    504c:	cf 91       	pop	r28
    504e:	df 91       	pop	r29
    5050:	08 95       	ret

00005052 <app_ReceiveInput>:

void app_ReceiveInput(void){
    5052:	df 93       	push	r29
    5054:	cf 93       	push	r28
    5056:	00 d0       	rcall	.+0      	; 0x5058 <app_ReceiveInput+0x6>
    5058:	cd b7       	in	r28, 0x3d	; 61
    505a:	de b7       	in	r29, 0x3e	; 62
    505c:	1f c0       	rjmp	.+62     	; 0x509c <app_ReceiveInput+0x4a>
	while(temp_char != '\r'){
		temp_char = Bluetooth_u8ReceiveData();
    505e:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <Bluetooth_u8ReceiveData>
    5062:	80 93 28 07 	sts	0x0728, r24
		Bluetooth_vSendData(temp_char);
    5066:	80 91 28 07 	lds	r24, 0x0728
    506a:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Bluetooth_vSendData>
		if(temp_char != '\r'){
    506e:	80 91 28 07 	lds	r24, 0x0728
    5072:	8d 30       	cpi	r24, 0x0D	; 13
    5074:	99 f0       	breq	.+38     	; 0x509c <app_ReceiveInput+0x4a>
			if(char_counter < array_max_size){
    5076:	80 91 ff 06 	lds	r24, 0x06FF
    507a:	84 31       	cpi	r24, 0x14	; 20
    507c:	78 f4       	brcc	.+30     	; 0x509c <app_ReceiveInput+0x4a>
				input_temp_string[char_counter] = temp_char;
    507e:	80 91 ff 06 	lds	r24, 0x06FF
    5082:	88 2f       	mov	r24, r24
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	20 91 28 07 	lds	r18, 0x0728
    508a:	fc 01       	movw	r30, r24
    508c:	ee 5a       	subi	r30, 0xAE	; 174
    508e:	f8 4f       	sbci	r31, 0xF8	; 248
    5090:	20 83       	st	Z, r18
				char_counter++;
    5092:	80 91 ff 06 	lds	r24, 0x06FF
    5096:	8f 5f       	subi	r24, 0xFF	; 255
    5098:	80 93 ff 06 	sts	0x06FF, r24

	// Initialize variables
}

void app_ReceiveInput(void){
	while(temp_char != '\r'){
    509c:	80 91 28 07 	lds	r24, 0x0728
    50a0:	8d 30       	cpi	r24, 0x0D	; 13
    50a2:	e9 f6       	brne	.-70     	; 0x505e <app_ReceiveInput+0xc>
				input_temp_string[char_counter] = temp_char;
				char_counter++;
			}
		}
	}
	temp_char = 0;
    50a4:	10 92 28 07 	sts	0x0728, r1
	Bluetooth_vSendString((u8*)"\r\n");
    50a8:	88 e1       	ldi	r24, 0x18	; 24
    50aa:	95 e0       	ldi	r25, 0x05	; 5
    50ac:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Bluetooth_vSendString>
	switch(Current_State){
    50b0:	80 91 3d 07 	lds	r24, 0x073D
    50b4:	28 2f       	mov	r18, r24
    50b6:	30 e0       	ldi	r19, 0x00	; 0
    50b8:	3a 83       	std	Y+2, r19	; 0x02
    50ba:	29 83       	std	Y+1, r18	; 0x01
    50bc:	89 81       	ldd	r24, Y+1	; 0x01
    50be:	9a 81       	ldd	r25, Y+2	; 0x02
    50c0:	81 30       	cpi	r24, 0x01	; 1
    50c2:	91 05       	cpc	r25, r1
    50c4:	31 f0       	breq	.+12     	; 0x50d2 <app_ReceiveInput+0x80>
    50c6:	29 81       	ldd	r18, Y+1	; 0x01
    50c8:	3a 81       	ldd	r19, Y+2	; 0x02
    50ca:	22 30       	cpi	r18, 0x02	; 2
    50cc:	31 05       	cpc	r19, r1
    50ce:	a1 f0       	breq	.+40     	; 0x50f8 <app_ReceiveInput+0xa6>
    50d0:	25 c0       	rjmp	.+74     	; 0x511c <app_ReceiveInput+0xca>
		case locked_user_input:
			// Save entered username and jump to locked_psw_input state
			app_copy_string(input_temp_string, input_username_string, char_counter);
    50d2:	40 91 ff 06 	lds	r20, 0x06FF
    50d6:	82 e5       	ldi	r24, 0x52	; 82
    50d8:	97 e0       	ldi	r25, 0x07	; 7
    50da:	29 e2       	ldi	r18, 0x29	; 41
    50dc:	37 e0       	ldi	r19, 0x07	; 7
    50de:	b9 01       	movw	r22, r18
    50e0:	0e 94 32 21 	call	0x4264	; 0x4264 <app_copy_string>
			app_clear_string(input_temp_string, char_counter);
    50e4:	20 91 ff 06 	lds	r18, 0x06FF
    50e8:	82 e5       	ldi	r24, 0x52	; 82
    50ea:	97 e0       	ldi	r25, 0x07	; 7
    50ec:	62 2f       	mov	r22, r18
    50ee:	0e 94 6f 21 	call	0x42de	; 0x42de <app_clear_string>
			char_counter = 0;
    50f2:	10 92 ff 06 	sts	0x06FF, r1
    50f6:	12 c0       	rjmp	.+36     	; 0x511c <app_ReceiveInput+0xca>
			break;
		case locked_psw_input:
			// Save entered password and check if username and password are correct
			app_copy_string(input_temp_string, input_psw_string, char_counter);
    50f8:	40 91 ff 06 	lds	r20, 0x06FF
    50fc:	82 e5       	ldi	r24, 0x52	; 82
    50fe:	97 e0       	ldi	r25, 0x07	; 7
    5100:	2e e3       	ldi	r18, 0x3E	; 62
    5102:	37 e0       	ldi	r19, 0x07	; 7
    5104:	b9 01       	movw	r22, r18
    5106:	0e 94 32 21 	call	0x4264	; 0x4264 <app_copy_string>
			app_clear_string(input_temp_string, char_counter);
    510a:	20 91 ff 06 	lds	r18, 0x06FF
    510e:	82 e5       	ldi	r24, 0x52	; 82
    5110:	97 e0       	ldi	r25, 0x07	; 7
    5112:	62 2f       	mov	r22, r18
    5114:	0e 94 6f 21 	call	0x42de	; 0x42de <app_clear_string>
			char_counter = 0;
    5118:	10 92 ff 06 	sts	0x06FF, r1
			break;
		default:
			// Do Nothing
			break;
	}
}
    511c:	0f 90       	pop	r0
    511e:	0f 90       	pop	r0
    5120:	cf 91       	pop	r28
    5122:	df 91       	pop	r29
    5124:	08 95       	ret

00005126 <main>:
extern enu_app_states Current_State;
extern u8 input_username_string[20];
extern u8 input_psw_string[20];


int main(void){
    5126:	df 93       	push	r29
    5128:	cf 93       	push	r28
    512a:	00 d0       	rcall	.+0      	; 0x512c <main+0x6>
    512c:	00 d0       	rcall	.+0      	; 0x512e <main+0x8>
    512e:	00 d0       	rcall	.+0      	; 0x5130 <main+0xa>
    5130:	cd b7       	in	r28, 0x3d	; 61
    5132:	de b7       	in	r29, 0x3e	; 62
	/* Initialization part */
	enu_psw_check_return psw_check_flag;
	u8 wrong_entry_counter=0;
    5134:	19 82       	std	Y+1, r1	; 0x01
	app_vInit();
    5136:	0e 94 0b 28 	call	0x5016	; 0x5016 <app_vInit>
	while(1){

		/* Main Program */
		switch(Current_State){
    513a:	80 91 3d 07 	lds	r24, 0x073D
    513e:	28 2f       	mov	r18, r24
    5140:	30 e0       	ldi	r19, 0x00	; 0
    5142:	3e 83       	std	Y+6, r19	; 0x06
    5144:	2d 83       	std	Y+5, r18	; 0x05
    5146:	8d 81       	ldd	r24, Y+5	; 0x05
    5148:	9e 81       	ldd	r25, Y+6	; 0x06
    514a:	82 30       	cpi	r24, 0x02	; 2
    514c:	91 05       	cpc	r25, r1
    514e:	99 f1       	breq	.+102    	; 0x51b6 <main+0x90>
    5150:	2d 81       	ldd	r18, Y+5	; 0x05
    5152:	3e 81       	ldd	r19, Y+6	; 0x06
    5154:	23 30       	cpi	r18, 0x03	; 3
    5156:	31 05       	cpc	r19, r1
    5158:	54 f4       	brge	.+20     	; 0x516e <main+0x48>
    515a:	8d 81       	ldd	r24, Y+5	; 0x05
    515c:	9e 81       	ldd	r25, Y+6	; 0x06
    515e:	00 97       	sbiw	r24, 0x00	; 0
    5160:	c1 f0       	breq	.+48     	; 0x5192 <main+0x6c>
    5162:	2d 81       	ldd	r18, Y+5	; 0x05
    5164:	3e 81       	ldd	r19, Y+6	; 0x06
    5166:	21 30       	cpi	r18, 0x01	; 1
    5168:	31 05       	cpc	r19, r1
    516a:	d9 f0       	breq	.+54     	; 0x51a2 <main+0x7c>
    516c:	e6 cf       	rjmp	.-52     	; 0x513a <main+0x14>
    516e:	8d 81       	ldd	r24, Y+5	; 0x05
    5170:	9e 81       	ldd	r25, Y+6	; 0x06
    5172:	84 30       	cpi	r24, 0x04	; 4
    5174:	91 05       	cpc	r25, r1
    5176:	09 f4       	brne	.+2      	; 0x517a <main+0x54>
    5178:	82 c0       	rjmp	.+260    	; 0x527e <main+0x158>
    517a:	2d 81       	ldd	r18, Y+5	; 0x05
    517c:	3e 81       	ldd	r19, Y+6	; 0x06
    517e:	24 30       	cpi	r18, 0x04	; 4
    5180:	31 05       	cpc	r19, r1
    5182:	1c f1       	brlt	.+70     	; 0x51ca <main+0xa4>
    5184:	8d 81       	ldd	r24, Y+5	; 0x05
    5186:	9e 81       	ldd	r25, Y+6	; 0x06
    5188:	85 30       	cpi	r24, 0x05	; 5
    518a:	91 05       	cpc	r25, r1
    518c:	09 f4       	brne	.+2      	; 0x5190 <main+0x6a>
    518e:	7e c0       	rjmp	.+252    	; 0x528c <main+0x166>
    5190:	d4 cf       	rjmp	.-88     	; 0x513a <main+0x14>
		case start_state:
			UART_vSendString((u8*)"Welcome to Mobile Controlled System\n\r");
    5192:	8b e1       	ldi	r24, 0x1B	; 27
    5194:	95 e0       	ldi	r25, 0x05	; 5
    5196:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
			//UART_vSendString((u8*)"-----------------------------------\n\n\r");
			Current_State = locked_user_input;
    519a:	81 e0       	ldi	r24, 0x01	; 1
    519c:	80 93 3d 07 	sts	0x073D, r24
    51a0:	cc cf       	rjmp	.-104    	; 0x513a <main+0x14>
			break;
		case locked_user_input:
			UART_vSendString((u8*)"Enter username: ");
    51a2:	81 e4       	ldi	r24, 0x41	; 65
    51a4:	95 e0       	ldi	r25, 0x05	; 5
    51a6:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
			app_ReceiveInput();
    51aa:	0e 94 29 28 	call	0x5052	; 0x5052 <app_ReceiveInput>
			Current_State = locked_psw_input;
    51ae:	82 e0       	ldi	r24, 0x02	; 2
    51b0:	80 93 3d 07 	sts	0x073D, r24
    51b4:	c2 cf       	rjmp	.-124    	; 0x513a <main+0x14>
			break;
		case locked_psw_input:
			UART_vSendString((u8*)"Enter password: ");
    51b6:	82 e5       	ldi	r24, 0x52	; 82
    51b8:	95 e0       	ldi	r25, 0x05	; 5
    51ba:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
			app_ReceiveInput();
    51be:	0e 94 29 28 	call	0x5052	; 0x5052 <app_ReceiveInput>
			Current_State = locked_checking_user_psw;
    51c2:	83 e0       	ldi	r24, 0x03	; 3
    51c4:	80 93 3d 07 	sts	0x073D, r24
    51c8:	b8 cf       	rjmp	.-144    	; 0x513a <main+0x14>
			break;
		case locked_checking_user_psw:
			psw_check_flag = psw_Check_Credentials(input_username_string, input_psw_string);
    51ca:	89 e2       	ldi	r24, 0x29	; 41
    51cc:	97 e0       	ldi	r25, 0x07	; 7
    51ce:	2e e3       	ldi	r18, 0x3E	; 62
    51d0:	37 e0       	ldi	r19, 0x07	; 7
    51d2:	b9 01       	movw	r22, r18
    51d4:	0e 94 99 21 	call	0x4332	; 0x4332 <psw_Check_Credentials>
    51d8:	8a 83       	std	Y+2, r24	; 0x02
			switch(psw_check_flag){
    51da:	8a 81       	ldd	r24, Y+2	; 0x02
    51dc:	28 2f       	mov	r18, r24
    51de:	30 e0       	ldi	r19, 0x00	; 0
    51e0:	3c 83       	std	Y+4, r19	; 0x04
    51e2:	2b 83       	std	Y+3, r18	; 0x03
    51e4:	8b 81       	ldd	r24, Y+3	; 0x03
    51e6:	9c 81       	ldd	r25, Y+4	; 0x04
    51e8:	81 30       	cpi	r24, 0x01	; 1
    51ea:	91 05       	cpc	r25, r1
    51ec:	b1 f1       	breq	.+108    	; 0x525a <main+0x134>
    51ee:	2b 81       	ldd	r18, Y+3	; 0x03
    51f0:	3c 81       	ldd	r19, Y+4	; 0x04
    51f2:	22 30       	cpi	r18, 0x02	; 2
    51f4:	31 05       	cpc	r19, r1
    51f6:	d1 f1       	breq	.+116    	; 0x526c <main+0x146>
    51f8:	8b 81       	ldd	r24, Y+3	; 0x03
    51fa:	9c 81       	ldd	r25, Y+4	; 0x04
    51fc:	00 97       	sbiw	r24, 0x00	; 0
    51fe:	09 f0       	breq	.+2      	; 0x5202 <main+0xdc>
    5200:	9c cf       	rjmp	.-200    	; 0x513a <main+0x14>
			case wrong_data:
				UART_vSendString((u8*)"Wrong data!\n\r\n\r");
    5202:	83 e6       	ldi	r24, 0x63	; 99
    5204:	95 e0       	ldi	r25, 0x05	; 5
    5206:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
				if(0 == wrong_entry_counter){
    520a:	89 81       	ldd	r24, Y+1	; 0x01
    520c:	88 23       	and	r24, r24
    520e:	41 f4       	brne	.+16     	; 0x5220 <main+0xfa>
					UART_vSendString((u8*)"2 more tries remaining!\n\r\n\r");
    5210:	83 e7       	ldi	r24, 0x73	; 115
    5212:	95 e0       	ldi	r25, 0x05	; 5
    5214:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
					wrong_entry_counter++;
    5218:	89 81       	ldd	r24, Y+1	; 0x01
    521a:	8f 5f       	subi	r24, 0xFF	; 255
    521c:	89 83       	std	Y+1, r24	; 0x01
    521e:	19 c0       	rjmp	.+50     	; 0x5252 <main+0x12c>
				}
				else if(1 == wrong_entry_counter){
    5220:	89 81       	ldd	r24, Y+1	; 0x01
    5222:	81 30       	cpi	r24, 0x01	; 1
    5224:	41 f4       	brne	.+16     	; 0x5236 <main+0x110>
					UART_vSendString((u8*)"1 more try remaining!\n\r\n\r");
    5226:	8f e8       	ldi	r24, 0x8F	; 143
    5228:	95 e0       	ldi	r25, 0x05	; 5
    522a:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
					wrong_entry_counter++;
    522e:	89 81       	ldd	r24, Y+1	; 0x01
    5230:	8f 5f       	subi	r24, 0xFF	; 255
    5232:	89 83       	std	Y+1, r24	; 0x01
    5234:	0e c0       	rjmp	.+28     	; 0x5252 <main+0x12c>
				}
				else if(2 == wrong_entry_counter){
    5236:	89 81       	ldd	r24, Y+1	; 0x01
    5238:	82 30       	cpi	r24, 0x02	; 2
    523a:	59 f4       	brne	.+22     	; 0x5252 <main+0x12c>
					UART_vSendString((u8*)"You entered wrong password 3 times\n\r");
    523c:	89 ea       	ldi	r24, 0xA9	; 169
    523e:	95 e0       	ldi	r25, 0x05	; 5
    5240:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
					UART_vSendString((u8*)"System is locked for 10 seconds!\n\r");
    5244:	8e ec       	ldi	r24, 0xCE	; 206
    5246:	95 e0       	ldi	r25, 0x05	; 5
    5248:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
					psw_theft_protection();
    524c:	0e 94 48 22 	call	0x4490	; 0x4490 <psw_theft_protection>
					wrong_entry_counter = 0;
    5250:	19 82       	std	Y+1, r1	; 0x01
				}
				else{ /* Do Nothing */ }
				Current_State = locked_user_input;
    5252:	81 e0       	ldi	r24, 0x01	; 1
    5254:	80 93 3d 07 	sts	0x073D, r24
    5258:	70 cf       	rjmp	.-288    	; 0x513a <main+0x14>
				break;
			case correct_data:
				wrong_entry_counter = 0;
    525a:	19 82       	std	Y+1, r1	; 0x01
				UART_vSendString((u8*)"Normal user activated!\n\r");
    525c:	81 ef       	ldi	r24, 0xF1	; 241
    525e:	95 e0       	ldi	r25, 0x05	; 5
    5260:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
				Current_State = unlocked_normal_user;
    5264:	85 e0       	ldi	r24, 0x05	; 5
    5266:	80 93 3d 07 	sts	0x073D, r24
    526a:	67 cf       	rjmp	.-306    	; 0x513a <main+0x14>
				break;
			case master_data:
				wrong_entry_counter = 0;
    526c:	19 82       	std	Y+1, r1	; 0x01
				UART_vSendString((u8*)"Master user activated!\n\r");
    526e:	8a e0       	ldi	r24, 0x0A	; 10
    5270:	96 e0       	ldi	r25, 0x06	; 6
    5272:	0e 94 7c 07 	call	0xef8	; 0xef8 <UART_vSendString>
				Current_State = unlocked_master_user;
    5276:	84 e0       	ldi	r24, 0x04	; 4
    5278:	80 93 3d 07 	sts	0x073D, r24
    527c:	5e cf       	rjmp	.-324    	; 0x513a <main+0x14>
				break;
			default: /* Do Nothing */ break;
			}
			break;
		case unlocked_master_user:
			master_user_interface();
    527e:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <master_user_interface>
			Current_State = start_state;
    5282:	10 92 3d 07 	sts	0x073D, r1
			Bluetooth_vClearBuffer();
    5286:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Bluetooth_vClearBuffer>
    528a:	57 cf       	rjmp	.-338    	; 0x513a <main+0x14>
			break;
		case unlocked_normal_user:
			normalUserInterface();
    528c:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <normalUserInterface>
			Current_State = start_state;
    5290:	10 92 3d 07 	sts	0x073D, r1
			Bluetooth_vClearBuffer();
    5294:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <Bluetooth_vClearBuffer>
    5298:	50 cf       	rjmp	.-352    	; 0x513a <main+0x14>

0000529a <__prologue_saves__>:
    529a:	2f 92       	push	r2
    529c:	3f 92       	push	r3
    529e:	4f 92       	push	r4
    52a0:	5f 92       	push	r5
    52a2:	6f 92       	push	r6
    52a4:	7f 92       	push	r7
    52a6:	8f 92       	push	r8
    52a8:	9f 92       	push	r9
    52aa:	af 92       	push	r10
    52ac:	bf 92       	push	r11
    52ae:	cf 92       	push	r12
    52b0:	df 92       	push	r13
    52b2:	ef 92       	push	r14
    52b4:	ff 92       	push	r15
    52b6:	0f 93       	push	r16
    52b8:	1f 93       	push	r17
    52ba:	cf 93       	push	r28
    52bc:	df 93       	push	r29
    52be:	cd b7       	in	r28, 0x3d	; 61
    52c0:	de b7       	in	r29, 0x3e	; 62
    52c2:	ca 1b       	sub	r28, r26
    52c4:	db 0b       	sbc	r29, r27
    52c6:	0f b6       	in	r0, 0x3f	; 63
    52c8:	f8 94       	cli
    52ca:	de bf       	out	0x3e, r29	; 62
    52cc:	0f be       	out	0x3f, r0	; 63
    52ce:	cd bf       	out	0x3d, r28	; 61
    52d0:	09 94       	ijmp

000052d2 <__epilogue_restores__>:
    52d2:	2a 88       	ldd	r2, Y+18	; 0x12
    52d4:	39 88       	ldd	r3, Y+17	; 0x11
    52d6:	48 88       	ldd	r4, Y+16	; 0x10
    52d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    52da:	6e 84       	ldd	r6, Y+14	; 0x0e
    52dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    52de:	8c 84       	ldd	r8, Y+12	; 0x0c
    52e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    52e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    52e4:	b9 84       	ldd	r11, Y+9	; 0x09
    52e6:	c8 84       	ldd	r12, Y+8	; 0x08
    52e8:	df 80       	ldd	r13, Y+7	; 0x07
    52ea:	ee 80       	ldd	r14, Y+6	; 0x06
    52ec:	fd 80       	ldd	r15, Y+5	; 0x05
    52ee:	0c 81       	ldd	r16, Y+4	; 0x04
    52f0:	1b 81       	ldd	r17, Y+3	; 0x03
    52f2:	aa 81       	ldd	r26, Y+2	; 0x02
    52f4:	b9 81       	ldd	r27, Y+1	; 0x01
    52f6:	ce 0f       	add	r28, r30
    52f8:	d1 1d       	adc	r29, r1
    52fa:	0f b6       	in	r0, 0x3f	; 63
    52fc:	f8 94       	cli
    52fe:	de bf       	out	0x3e, r29	; 62
    5300:	0f be       	out	0x3f, r0	; 63
    5302:	cd bf       	out	0x3d, r28	; 61
    5304:	ed 01       	movw	r28, r26
    5306:	08 95       	ret

00005308 <memcpy>:
    5308:	fb 01       	movw	r30, r22
    530a:	dc 01       	movw	r26, r24
    530c:	02 c0       	rjmp	.+4      	; 0x5312 <memcpy+0xa>
    530e:	01 90       	ld	r0, Z+
    5310:	0d 92       	st	X+, r0
    5312:	41 50       	subi	r20, 0x01	; 1
    5314:	50 40       	sbci	r21, 0x00	; 0
    5316:	d8 f7       	brcc	.-10     	; 0x530e <memcpy+0x6>
    5318:	08 95       	ret

0000531a <strcmp>:
    531a:	fb 01       	movw	r30, r22
    531c:	dc 01       	movw	r26, r24
    531e:	8d 91       	ld	r24, X+
    5320:	01 90       	ld	r0, Z+
    5322:	80 19       	sub	r24, r0
    5324:	01 10       	cpse	r0, r1
    5326:	d9 f3       	breq	.-10     	; 0x531e <strcmp+0x4>
    5328:	99 0b       	sbc	r25, r25
    532a:	08 95       	ret

0000532c <strcpy>:
    532c:	fb 01       	movw	r30, r22
    532e:	dc 01       	movw	r26, r24
    5330:	01 90       	ld	r0, Z+
    5332:	0d 92       	st	X+, r0
    5334:	00 20       	and	r0, r0
    5336:	e1 f7       	brne	.-8      	; 0x5330 <strcpy+0x4>
    5338:	08 95       	ret

0000533a <_exit>:
    533a:	f8 94       	cli

0000533c <__stop_program>:
    533c:	ff cf       	rjmp	.-2      	; 0x533c <__stop_program>
